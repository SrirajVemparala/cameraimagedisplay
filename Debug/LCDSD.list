
LCDSD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  08008154  08008154  00018154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800872c  0800872c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800872c  0800872c  0001872c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008734  08008734  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008734  08008734  00018734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008738  08008738  00018738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800873c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          000013e8  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001470  20001470  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d9eb  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002651  00000000  00000000  0002daa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c18  00000000  00000000  000300f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ad0  00000000  00000000  00030d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000228a3  00000000  00000000  000317e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011486  00000000  00000000  00054083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c58dd  00000000  00000000  00065509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012ade6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033fc  00000000  00000000  0012ae38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800813c 	.word	0x0800813c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800813c 	.word	0x0800813c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <SELECT>:
#define FALSE 0
#define bool BYTE

/* SPI Chip Select */
static void SELECT(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800057e:	4802      	ldr	r0, [pc, #8]	; (8000588 <SELECT+0x14>)
 8000580:	f002 fd60 	bl	8003044 <HAL_GPIO_WritePin>
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40020400 	.word	0x40020400

0800058c <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000596:	4802      	ldr	r0, [pc, #8]	; (80005a0 <DESELECT+0x14>)
 8000598:	f002 fd54 	bl	8003044 <HAL_GPIO_WritePin>
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40020400 	.word	0x40020400

080005a4 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 80005ae:	bf00      	nop
 80005b0:	4808      	ldr	r0, [pc, #32]	; (80005d4 <SPI_TxByte+0x30>)
 80005b2:	f003 fdf7 	bl	80041a4 <HAL_SPI_GetState>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d1f9      	bne.n	80005b0 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 80005bc:	1df9      	adds	r1, r7, #7
 80005be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c2:	2201      	movs	r2, #1
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <SPI_TxByte+0x30>)
 80005c6:	f003 fa44 	bl	8003a52 <HAL_SPI_Transmit>
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000128 	.word	0x20000128

080005d8 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80005de:	23ff      	movs	r3, #255	; 0xff
 80005e0:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 80005e6:	bf00      	nop
 80005e8:	4809      	ldr	r0, [pc, #36]	; (8000610 <SPI_RxByte+0x38>)
 80005ea:	f003 fddb 	bl	80041a4 <HAL_SPI_GetState>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d1f9      	bne.n	80005e8 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 80005f4:	1dba      	adds	r2, r7, #6
 80005f6:	1df9      	adds	r1, r7, #7
 80005f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2301      	movs	r3, #1
 8000600:	4803      	ldr	r0, [pc, #12]	; (8000610 <SPI_RxByte+0x38>)
 8000602:	f003 fb62 	bl	8003cca <HAL_SPI_TransmitReceive>

  return data;
 8000606:	79bb      	ldrb	r3, [r7, #6]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000128 	.word	0x20000128

08000614 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800061c:	f7ff ffdc 	bl	80005d8 <SPI_RxByte>
 8000620:	4603      	mov	r3, r0
 8000622:	461a      	mov	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	701a      	strb	r2, [r3, #0]
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <SD_ReadyWait+0x34>)
 8000638:	2232      	movs	r2, #50	; 0x32
 800063a:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 800063c:	f7ff ffcc 	bl	80005d8 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000640:	f7ff ffca 	bl	80005d8 <SPI_RxByte>
 8000644:	4603      	mov	r3, r0
 8000646:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2bff      	cmp	r3, #255	; 0xff
 800064c:	d004      	beq.n	8000658 <SD_ReadyWait+0x28>
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <SD_ReadyWait+0x34>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1f3      	bne.n	8000640 <SD_ReadyWait+0x10>

  return res;
 8000658:	79fb      	ldrb	r3, [r7, #7]
}
 800065a:	4618      	mov	r0, r3
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	2000121a 	.word	0x2000121a

08000668 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800066e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000672:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000674:	f7ff ff8a 	bl	800058c <DESELECT>

  for(int i = 0; i < 10; i++)
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	e005      	b.n	800068a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800067e:	20ff      	movs	r0, #255	; 0xff
 8000680:	f7ff ff90 	bl	80005a4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	3301      	adds	r3, #1
 8000688:	613b      	str	r3, [r7, #16]
 800068a:	693b      	ldr	r3, [r7, #16]
 800068c:	2b09      	cmp	r3, #9
 800068e:	ddf6      	ble.n	800067e <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000690:	f7ff ff70 	bl	8000574 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000694:	2340      	movs	r3, #64	; 0x40
 8000696:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80006a8:	2395      	movs	r3, #149	; 0x95
 80006aa:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	e009      	b.n	80006c6 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80006b2:	1d3a      	adds	r2, r7, #4
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	4413      	add	r3, r2
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ff72 	bl	80005a4 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	3301      	adds	r3, #1
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	2b05      	cmp	r3, #5
 80006ca:	ddf2      	ble.n	80006b2 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80006cc:	e002      	b.n	80006d4 <SD_PowerOn+0x6c>
  {
    Count--;
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	3b01      	subs	r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80006d4:	f7ff ff80 	bl	80005d8 <SPI_RxByte>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d002      	beq.n	80006e4 <SD_PowerOn+0x7c>
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d1f4      	bne.n	80006ce <SD_PowerOn+0x66>
  }

  DESELECT();
 80006e4:	f7ff ff52 	bl	800058c <DESELECT>
  SPI_TxByte(0XFF);
 80006e8:	20ff      	movs	r0, #255	; 0xff
 80006ea:	f7ff ff5b 	bl	80005a4 <SPI_TxByte>

  PowerFlag = 1;
 80006ee:	4b03      	ldr	r3, [pc, #12]	; (80006fc <SD_PowerOn+0x94>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	701a      	strb	r2, [r3, #0]
}
 80006f4:	bf00      	nop
 80006f6:	3718      	adds	r7, #24
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	200000a5 	.word	0x200000a5

08000700 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000704:	4b03      	ldr	r3, [pc, #12]	; (8000714 <SD_PowerOff+0x14>)
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	200000a5 	.word	0x200000a5

08000718 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 800071c:	4b03      	ldr	r3, [pc, #12]	; (800072c <SD_CheckPower+0x14>)
 800071e:	781b      	ldrb	r3, [r3, #0]
}
 8000720:	4618      	mov	r0, r3
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	200000a5 	.word	0x200000a5

08000730 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SD_RxDataBlock+0x68>)
 800073c:	220a      	movs	r2, #10
 800073e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000740:	f7ff ff4a 	bl	80005d8 <SPI_RxByte>
 8000744:	4603      	mov	r3, r0
 8000746:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	2bff      	cmp	r3, #255	; 0xff
 800074c:	d104      	bne.n	8000758 <SD_RxDataBlock+0x28>
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SD_RxDataBlock+0x68>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2b00      	cmp	r3, #0
 8000756:	d1f3      	bne.n	8000740 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000758:	7bfb      	ldrb	r3, [r7, #15]
 800075a:	2bfe      	cmp	r3, #254	; 0xfe
 800075c:	d001      	beq.n	8000762 <SD_RxDataBlock+0x32>
    return FALSE;
 800075e:	2300      	movs	r3, #0
 8000760:	e016      	b.n	8000790 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	1c5a      	adds	r2, r3, #1
 8000766:	607a      	str	r2, [r7, #4]
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ff53 	bl	8000614 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	1c5a      	adds	r2, r3, #1
 8000772:	607a      	str	r2, [r7, #4]
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff4d 	bl	8000614 <SPI_RxBytePtr>
  } while(btr -= 2);
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	3b02      	subs	r3, #2
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d1ed      	bne.n	8000762 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000786:	f7ff ff27 	bl	80005d8 <SPI_RxByte>
  SPI_RxByte();
 800078a:	f7ff ff25 	bl	80005d8 <SPI_RxByte>

  return TRUE;
 800078e:	2301      	movs	r3, #1
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20001219 	.word	0x20001219

0800079c <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	460b      	mov	r3, r1
 80007a6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80007ac:	f7ff ff40 	bl	8000630 <SD_ReadyWait>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2bff      	cmp	r3, #255	; 0xff
 80007b4:	d001      	beq.n	80007ba <SD_TxDataBlock+0x1e>
    return FALSE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	e040      	b.n	800083c <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80007ba:	78fb      	ldrb	r3, [r7, #3]
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fef1 	bl	80005a4 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80007c2:	78fb      	ldrb	r3, [r7, #3]
 80007c4:	2bfd      	cmp	r3, #253	; 0xfd
 80007c6:	d031      	beq.n	800082c <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	1c5a      	adds	r2, r3, #1
 80007d0:	607a      	str	r2, [r7, #4]
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fee5 	bl	80005a4 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	1c5a      	adds	r2, r3, #1
 80007de:	607a      	str	r2, [r7, #4]
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff fede 	bl	80005a4 <SPI_TxByte>
    } while (--wc);
 80007e8:	7bbb      	ldrb	r3, [r7, #14]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	73bb      	strb	r3, [r7, #14]
 80007ee:	7bbb      	ldrb	r3, [r7, #14]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d1eb      	bne.n	80007cc <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80007f4:	f7ff fef0 	bl	80005d8 <SPI_RxByte>
    SPI_RxByte();
 80007f8:	f7ff feee 	bl	80005d8 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80007fc:	e00b      	b.n	8000816 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80007fe:	f7ff feeb 	bl	80005d8 <SPI_RxByte>
 8000802:	4603      	mov	r3, r0
 8000804:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	f003 031f 	and.w	r3, r3, #31
 800080c:	2b05      	cmp	r3, #5
 800080e:	d006      	beq.n	800081e <SD_TxDataBlock+0x82>
        break;

      i++;
 8000810:	7b7b      	ldrb	r3, [r7, #13]
 8000812:	3301      	adds	r3, #1
 8000814:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000816:	7b7b      	ldrb	r3, [r7, #13]
 8000818:	2b40      	cmp	r3, #64	; 0x40
 800081a:	d9f0      	bls.n	80007fe <SD_TxDataBlock+0x62>
 800081c:	e000      	b.n	8000820 <SD_TxDataBlock+0x84>
        break;
 800081e:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000820:	bf00      	nop
 8000822:	f7ff fed9 	bl	80005d8 <SPI_RxByte>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d0fa      	beq.n	8000822 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	f003 031f 	and.w	r3, r3, #31
 8000832:	2b05      	cmp	r3, #5
 8000834:	d101      	bne.n	800083a <SD_TxDataBlock+0x9e>
    return TRUE;
 8000836:	2301      	movs	r3, #1
 8000838:	e000      	b.n	800083c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800083a:	2300      	movs	r3, #0
}
 800083c:	4618      	mov	r0, r3
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	6039      	str	r1, [r7, #0]
 800084e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000850:	f7ff feee 	bl	8000630 <SD_ReadyWait>
 8000854:	4603      	mov	r3, r0
 8000856:	2bff      	cmp	r3, #255	; 0xff
 8000858:	d001      	beq.n	800085e <SD_SendCmd+0x1a>
    return 0xFF;
 800085a:	23ff      	movs	r3, #255	; 0xff
 800085c:	e040      	b.n	80008e0 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fe9f 	bl	80005a4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	0e1b      	lsrs	r3, r3, #24
 800086a:	b2db      	uxtb	r3, r3
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fe99 	bl	80005a4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	0c1b      	lsrs	r3, r3, #16
 8000876:	b2db      	uxtb	r3, r3
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fe93 	bl	80005a4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	0a1b      	lsrs	r3, r3, #8
 8000882:	b2db      	uxtb	r3, r3
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fe8d 	bl	80005a4 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fe88 	bl	80005a4 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	2b40      	cmp	r3, #64	; 0x40
 800089c:	d101      	bne.n	80008a2 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800089e:	2395      	movs	r3, #149	; 0x95
 80008a0:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b48      	cmp	r3, #72	; 0x48
 80008a6:	d101      	bne.n	80008ac <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80008a8:	2387      	movs	r3, #135	; 0x87
 80008aa:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fe78 	bl	80005a4 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	2b4c      	cmp	r3, #76	; 0x4c
 80008b8:	d101      	bne.n	80008be <SD_SendCmd+0x7a>
    SPI_RxByte();
 80008ba:	f7ff fe8d 	bl	80005d8 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80008be:	230a      	movs	r3, #10
 80008c0:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80008c2:	f7ff fe89 	bl	80005d8 <SPI_RxByte>
 80008c6:	4603      	mov	r3, r0
 80008c8:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80008ca:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	da05      	bge.n	80008de <SD_SendCmd+0x9a>
 80008d2:	7bbb      	ldrb	r3, [r7, #14]
 80008d4:	3b01      	subs	r3, #1
 80008d6:	73bb      	strb	r3, [r7, #14]
 80008d8:	7bbb      	ldrb	r3, [r7, #14]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d1f1      	bne.n	80008c2 <SD_SendCmd+0x7e>

  return res;
 80008de:	7b7b      	ldrb	r3, [r7, #13]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80008e8:	b590      	push	{r4, r7, lr}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SD_disk_initialize+0x14>
    return STA_NOINIT;
 80008f8:	2301      	movs	r3, #1
 80008fa:	e0d5      	b.n	8000aa8 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80008fc:	4b6c      	ldr	r3, [pc, #432]	; (8000ab0 <SD_disk_initialize+0x1c8>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	2b00      	cmp	r3, #0
 8000908:	d003      	beq.n	8000912 <SD_disk_initialize+0x2a>
    return Stat;
 800090a:	4b69      	ldr	r3, [pc, #420]	; (8000ab0 <SD_disk_initialize+0x1c8>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	e0ca      	b.n	8000aa8 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000912:	f7ff fea9 	bl	8000668 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000916:	f7ff fe2d 	bl	8000574 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 800091e:	2100      	movs	r1, #0
 8000920:	2040      	movs	r0, #64	; 0x40
 8000922:	f7ff ff8f 	bl	8000844 <SD_SendCmd>
 8000926:	4603      	mov	r3, r0
 8000928:	2b01      	cmp	r3, #1
 800092a:	f040 80a5 	bne.w	8000a78 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800092e:	4b61      	ldr	r3, [pc, #388]	; (8000ab4 <SD_disk_initialize+0x1cc>)
 8000930:	2264      	movs	r2, #100	; 0x64
 8000932:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000934:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000938:	2048      	movs	r0, #72	; 0x48
 800093a:	f7ff ff83 	bl	8000844 <SD_SendCmd>
 800093e:	4603      	mov	r3, r0
 8000940:	2b01      	cmp	r3, #1
 8000942:	d158      	bne.n	80009f6 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000944:	2300      	movs	r3, #0
 8000946:	73fb      	strb	r3, [r7, #15]
 8000948:	e00c      	b.n	8000964 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800094a:	7bfc      	ldrb	r4, [r7, #15]
 800094c:	f7ff fe44 	bl	80005d8 <SPI_RxByte>
 8000950:	4603      	mov	r3, r0
 8000952:	461a      	mov	r2, r3
 8000954:	f104 0310 	add.w	r3, r4, #16
 8000958:	443b      	add	r3, r7
 800095a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	3301      	adds	r3, #1
 8000962:	73fb      	strb	r3, [r7, #15]
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	2b03      	cmp	r3, #3
 8000968:	d9ef      	bls.n	800094a <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800096a:	7abb      	ldrb	r3, [r7, #10]
 800096c:	2b01      	cmp	r3, #1
 800096e:	f040 8083 	bne.w	8000a78 <SD_disk_initialize+0x190>
 8000972:	7afb      	ldrb	r3, [r7, #11]
 8000974:	2baa      	cmp	r3, #170	; 0xaa
 8000976:	d17f      	bne.n	8000a78 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000978:	2100      	movs	r1, #0
 800097a:	2077      	movs	r0, #119	; 0x77
 800097c:	f7ff ff62 	bl	8000844 <SD_SendCmd>
 8000980:	4603      	mov	r3, r0
 8000982:	2b01      	cmp	r3, #1
 8000984:	d807      	bhi.n	8000996 <SD_disk_initialize+0xae>
 8000986:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800098a:	2069      	movs	r0, #105	; 0x69
 800098c:	f7ff ff5a 	bl	8000844 <SD_SendCmd>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d005      	beq.n	80009a2 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000996:	4b47      	ldr	r3, [pc, #284]	; (8000ab4 <SD_disk_initialize+0x1cc>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b2db      	uxtb	r3, r3
 800099c:	2b00      	cmp	r3, #0
 800099e:	d1eb      	bne.n	8000978 <SD_disk_initialize+0x90>
 80009a0:	e000      	b.n	80009a4 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80009a2:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80009a4:	4b43      	ldr	r3, [pc, #268]	; (8000ab4 <SD_disk_initialize+0x1cc>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d064      	beq.n	8000a78 <SD_disk_initialize+0x190>
 80009ae:	2100      	movs	r1, #0
 80009b0:	207a      	movs	r0, #122	; 0x7a
 80009b2:	f7ff ff47 	bl	8000844 <SD_SendCmd>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d15d      	bne.n	8000a78 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80009bc:	2300      	movs	r3, #0
 80009be:	73fb      	strb	r3, [r7, #15]
 80009c0:	e00c      	b.n	80009dc <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80009c2:	7bfc      	ldrb	r4, [r7, #15]
 80009c4:	f7ff fe08 	bl	80005d8 <SPI_RxByte>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	f104 0310 	add.w	r3, r4, #16
 80009d0:	443b      	add	r3, r7
 80009d2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
 80009d8:	3301      	adds	r3, #1
 80009da:	73fb      	strb	r3, [r7, #15]
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	2b03      	cmp	r3, #3
 80009e0:	d9ef      	bls.n	80009c2 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80009e2:	7a3b      	ldrb	r3, [r7, #8]
 80009e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SD_disk_initialize+0x108>
 80009ec:	2306      	movs	r3, #6
 80009ee:	e000      	b.n	80009f2 <SD_disk_initialize+0x10a>
 80009f0:	2302      	movs	r3, #2
 80009f2:	73bb      	strb	r3, [r7, #14]
 80009f4:	e040      	b.n	8000a78 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80009f6:	2100      	movs	r1, #0
 80009f8:	2077      	movs	r0, #119	; 0x77
 80009fa:	f7ff ff23 	bl	8000844 <SD_SendCmd>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d808      	bhi.n	8000a16 <SD_disk_initialize+0x12e>
 8000a04:	2100      	movs	r1, #0
 8000a06:	2069      	movs	r0, #105	; 0x69
 8000a08:	f7ff ff1c 	bl	8000844 <SD_SendCmd>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d801      	bhi.n	8000a16 <SD_disk_initialize+0x12e>
 8000a12:	2302      	movs	r3, #2
 8000a14:	e000      	b.n	8000a18 <SD_disk_initialize+0x130>
 8000a16:	2301      	movs	r3, #1
 8000a18:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8000a1a:	7bbb      	ldrb	r3, [r7, #14]
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d10e      	bne.n	8000a3e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000a20:	2100      	movs	r1, #0
 8000a22:	2077      	movs	r0, #119	; 0x77
 8000a24:	f7ff ff0e 	bl	8000844 <SD_SendCmd>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d80e      	bhi.n	8000a4c <SD_disk_initialize+0x164>
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2069      	movs	r0, #105	; 0x69
 8000a32:	f7ff ff07 	bl	8000844 <SD_SendCmd>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d107      	bne.n	8000a4c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000a3c:	e00d      	b.n	8000a5a <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2041      	movs	r0, #65	; 0x41
 8000a42:	f7ff feff 	bl	8000844 <SD_SendCmd>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d005      	beq.n	8000a58 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000a4c:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <SD_disk_initialize+0x1cc>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d1e1      	bne.n	8000a1a <SD_disk_initialize+0x132>
 8000a56:	e000      	b.n	8000a5a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000a58:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <SD_disk_initialize+0x1cc>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d007      	beq.n	8000a74 <SD_disk_initialize+0x18c>
 8000a64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a68:	2050      	movs	r0, #80	; 0x50
 8000a6a:	f7ff feeb 	bl	8000844 <SD_SendCmd>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8000a78:	4a0f      	ldr	r2, [pc, #60]	; (8000ab8 <SD_disk_initialize+0x1d0>)
 8000a7a:	7bbb      	ldrb	r3, [r7, #14]
 8000a7c:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000a7e:	f7ff fd85 	bl	800058c <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000a82:	f7ff fda9 	bl	80005d8 <SPI_RxByte>

  if (type)
 8000a86:	7bbb      	ldrb	r3, [r7, #14]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d008      	beq.n	8000a9e <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <SD_disk_initialize+0x1c8>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	f023 0301 	bic.w	r3, r3, #1
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <SD_disk_initialize+0x1c8>)
 8000a9a:	701a      	strb	r2, [r3, #0]
 8000a9c:	e001      	b.n	8000aa2 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000a9e:	f7ff fe2f 	bl	8000700 <SD_PowerOff>
  }

  return Stat;
 8000aa2:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <SD_disk_initialize+0x1c8>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	b2db      	uxtb	r3, r3
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd90      	pop	{r4, r7, pc}
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	20001219 	.word	0x20001219
 8000ab8:	200000a4 	.word	0x200000a4

08000abc <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <SD_disk_status+0x14>
    return STA_NOINIT;
 8000acc:	2301      	movs	r3, #1
 8000ace:	e002      	b.n	8000ad6 <SD_disk_status+0x1a>

  return Stat;
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <SD_disk_status+0x28>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	b2db      	uxtb	r3, r3
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000000 	.word	0x20000000

08000ae8 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	4603      	mov	r3, r0
 8000af6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d102      	bne.n	8000b04 <SD_disk_read+0x1c>
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d101      	bne.n	8000b08 <SD_disk_read+0x20>
    return RES_PARERR;
 8000b04:	2304      	movs	r3, #4
 8000b06:	e051      	b.n	8000bac <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8000b08:	4b2a      	ldr	r3, [pc, #168]	; (8000bb4 <SD_disk_read+0xcc>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000b16:	2303      	movs	r3, #3
 8000b18:	e048      	b.n	8000bac <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8000b1a:	4b27      	ldr	r3, [pc, #156]	; (8000bb8 <SD_disk_read+0xd0>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d102      	bne.n	8000b2c <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	025b      	lsls	r3, r3, #9
 8000b2a:	607b      	str	r3, [r7, #4]

  SELECT();
 8000b2c:	f7ff fd22 	bl	8000574 <SELECT>

  if (count == 1)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d111      	bne.n	8000b5a <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	2051      	movs	r0, #81	; 0x51
 8000b3a:	f7ff fe83 	bl	8000844 <SD_SendCmd>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d129      	bne.n	8000b98 <SD_disk_read+0xb0>
 8000b44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b48:	68b8      	ldr	r0, [r7, #8]
 8000b4a:	f7ff fdf1 	bl	8000730 <SD_RxDataBlock>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d021      	beq.n	8000b98 <SD_disk_read+0xb0>
      count = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	e01e      	b.n	8000b98 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	2052      	movs	r0, #82	; 0x52
 8000b5e:	f7ff fe71 	bl	8000844 <SD_SendCmd>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d117      	bne.n	8000b98 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000b68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b6c:	68b8      	ldr	r0, [r7, #8]
 8000b6e:	f7ff fddf 	bl	8000730 <SD_RxDataBlock>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d00a      	beq.n	8000b8e <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b7e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d1ed      	bne.n	8000b68 <SD_disk_read+0x80>
 8000b8c:	e000      	b.n	8000b90 <SD_disk_read+0xa8>
          break;
 8000b8e:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000b90:	2100      	movs	r1, #0
 8000b92:	204c      	movs	r0, #76	; 0x4c
 8000b94:	f7ff fe56 	bl	8000844 <SD_SendCmd>
    }
  }

  DESELECT();
 8000b98:	f7ff fcf8 	bl	800058c <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000b9c:	f7ff fd1c 	bl	80005d8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	bf14      	ite	ne
 8000ba6:	2301      	movne	r3, #1
 8000ba8:	2300      	moveq	r3, #0
 8000baa:	b2db      	uxtb	r3, r3
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000000 	.word	0x20000000
 8000bb8:	200000a4 	.word	0x200000a4

08000bbc <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607a      	str	r2, [r7, #4]
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	4603      	mov	r3, r0
 8000bca:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d102      	bne.n	8000bd8 <SD_disk_write+0x1c>
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d101      	bne.n	8000bdc <SD_disk_write+0x20>
    return RES_PARERR;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	e06b      	b.n	8000cb4 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8000bdc:	4b37      	ldr	r3, [pc, #220]	; (8000cbc <SD_disk_write+0x100>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000bea:	2303      	movs	r3, #3
 8000bec:	e062      	b.n	8000cb4 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8000bee:	4b33      	ldr	r3, [pc, #204]	; (8000cbc <SD_disk_write+0x100>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SD_disk_write+0x44>
    return RES_WRPRT;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	e059      	b.n	8000cb4 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8000c00:	4b2f      	ldr	r3, [pc, #188]	; (8000cc0 <SD_disk_write+0x104>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	f003 0304 	and.w	r3, r3, #4
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	025b      	lsls	r3, r3, #9
 8000c10:	607b      	str	r3, [r7, #4]

  SELECT();
 8000c12:	f7ff fcaf 	bl	8000574 <SELECT>

  if (count == 1)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d110      	bne.n	8000c3e <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c1c:	6879      	ldr	r1, [r7, #4]
 8000c1e:	2058      	movs	r0, #88	; 0x58
 8000c20:	f7ff fe10 	bl	8000844 <SD_SendCmd>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d13a      	bne.n	8000ca0 <SD_disk_write+0xe4>
 8000c2a:	21fe      	movs	r1, #254	; 0xfe
 8000c2c:	68b8      	ldr	r0, [r7, #8]
 8000c2e:	f7ff fdb5 	bl	800079c <SD_TxDataBlock>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d033      	beq.n	8000ca0 <SD_disk_write+0xe4>
      count = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	e030      	b.n	8000ca0 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8000c3e:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <SD_disk_write+0x104>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d007      	beq.n	8000c5a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2077      	movs	r0, #119	; 0x77
 8000c4e:	f7ff fdf9 	bl	8000844 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c52:	6839      	ldr	r1, [r7, #0]
 8000c54:	2057      	movs	r0, #87	; 0x57
 8000c56:	f7ff fdf5 	bl	8000844 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	2059      	movs	r0, #89	; 0x59
 8000c5e:	f7ff fdf1 	bl	8000844 <SD_SendCmd>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d11b      	bne.n	8000ca0 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000c68:	21fc      	movs	r1, #252	; 0xfc
 8000c6a:	68b8      	ldr	r0, [r7, #8]
 8000c6c:	f7ff fd96 	bl	800079c <SD_TxDataBlock>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d00a      	beq.n	8000c8c <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c7c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	3b01      	subs	r3, #1
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d1ee      	bne.n	8000c68 <SD_disk_write+0xac>
 8000c8a:	e000      	b.n	8000c8e <SD_disk_write+0xd2>
          break;
 8000c8c:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8000c8e:	21fd      	movs	r1, #253	; 0xfd
 8000c90:	2000      	movs	r0, #0
 8000c92:	f7ff fd83 	bl	800079c <SD_TxDataBlock>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d101      	bne.n	8000ca0 <SD_disk_write+0xe4>
      {
        count = 1;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8000ca0:	f7ff fc74 	bl	800058c <DESELECT>
  SPI_RxByte();
 8000ca4:	f7ff fc98 	bl	80005d8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	bf14      	ite	ne
 8000cae:	2301      	movne	r3, #1
 8000cb0:	2300      	moveq	r3, #0
 8000cb2:	b2db      	uxtb	r3, r3
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	200000a4 	.word	0x200000a4

08000cc4 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b08b      	sub	sp, #44	; 0x2c
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	603a      	str	r2, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000cde:	2304      	movs	r3, #4
 8000ce0:	e11b      	b.n	8000f1a <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8000ce8:	79bb      	ldrb	r3, [r7, #6]
 8000cea:	2b05      	cmp	r3, #5
 8000cec:	d129      	bne.n	8000d42 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8000cee:	6a3b      	ldr	r3, [r7, #32]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d017      	beq.n	8000d26 <SD_disk_ioctl+0x62>
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	dc1f      	bgt.n	8000d3a <SD_disk_ioctl+0x76>
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d002      	beq.n	8000d04 <SD_disk_ioctl+0x40>
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d00b      	beq.n	8000d1a <SD_disk_ioctl+0x56>
 8000d02:	e01a      	b.n	8000d3a <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8000d04:	f7ff fd08 	bl	8000718 <SD_CheckPower>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8000d0e:	f7ff fcf7 	bl	8000700 <SD_PowerOff>
      res = RES_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d18:	e0fd      	b.n	8000f16 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8000d1a:	f7ff fca5 	bl	8000668 <SD_PowerOn>
      res = RES_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d24:	e0f7      	b.n	8000f16 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000d26:	6a3b      	ldr	r3, [r7, #32]
 8000d28:	1c5c      	adds	r4, r3, #1
 8000d2a:	f7ff fcf5 	bl	8000718 <SD_CheckPower>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000d32:	2300      	movs	r3, #0
 8000d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d38:	e0ed      	b.n	8000f16 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d40:	e0e9      	b.n	8000f16 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8000d42:	4b78      	ldr	r3, [pc, #480]	; (8000f24 <SD_disk_ioctl+0x260>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8000d50:	2303      	movs	r3, #3
 8000d52:	e0e2      	b.n	8000f1a <SD_disk_ioctl+0x256>

    SELECT();
 8000d54:	f7ff fc0e 	bl	8000574 <SELECT>

    switch (ctrl)
 8000d58:	79bb      	ldrb	r3, [r7, #6]
 8000d5a:	2b0d      	cmp	r3, #13
 8000d5c:	f200 80cc 	bhi.w	8000ef8 <SD_disk_ioctl+0x234>
 8000d60:	a201      	add	r2, pc, #4	; (adr r2, 8000d68 <SD_disk_ioctl+0xa4>)
 8000d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d66:	bf00      	nop
 8000d68:	08000e63 	.word	0x08000e63
 8000d6c:	08000da1 	.word	0x08000da1
 8000d70:	08000e53 	.word	0x08000e53
 8000d74:	08000ef9 	.word	0x08000ef9
 8000d78:	08000ef9 	.word	0x08000ef9
 8000d7c:	08000ef9 	.word	0x08000ef9
 8000d80:	08000ef9 	.word	0x08000ef9
 8000d84:	08000ef9 	.word	0x08000ef9
 8000d88:	08000ef9 	.word	0x08000ef9
 8000d8c:	08000ef9 	.word	0x08000ef9
 8000d90:	08000ef9 	.word	0x08000ef9
 8000d94:	08000e75 	.word	0x08000e75
 8000d98:	08000e99 	.word	0x08000e99
 8000d9c:	08000ebd 	.word	0x08000ebd
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000da0:	2100      	movs	r1, #0
 8000da2:	2049      	movs	r0, #73	; 0x49
 8000da4:	f7ff fd4e 	bl	8000844 <SD_SendCmd>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f040 80a8 	bne.w	8000f00 <SD_disk_ioctl+0x23c>
 8000db0:	f107 030c 	add.w	r3, r7, #12
 8000db4:	2110      	movs	r1, #16
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fcba 	bl	8000730 <SD_RxDataBlock>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f000 809e 	beq.w	8000f00 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8000dc4:	7b3b      	ldrb	r3, [r7, #12]
 8000dc6:	099b      	lsrs	r3, r3, #6
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d10e      	bne.n	8000dec <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000dce:	7d7b      	ldrb	r3, [r7, #21]
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	7d3b      	ldrb	r3, [r7, #20]
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	021b      	lsls	r3, r3, #8
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	4413      	add	r3, r2
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	3301      	adds	r3, #1
 8000de0:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000de2:	8bfb      	ldrh	r3, [r7, #30]
 8000de4:	029a      	lsls	r2, r3, #10
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	e02e      	b.n	8000e4a <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000dec:	7c7b      	ldrb	r3, [r7, #17]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	7dbb      	ldrb	r3, [r7, #22]
 8000df6:	09db      	lsrs	r3, r3, #7
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	4413      	add	r3, r2
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	7d7b      	ldrb	r3, [r7, #21]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	f003 0306 	and.w	r3, r3, #6
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	4413      	add	r3, r2
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	3302      	adds	r3, #2
 8000e10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e14:	7d3b      	ldrb	r3, [r7, #20]
 8000e16:	099b      	lsrs	r3, r3, #6
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	7cfb      	ldrb	r3, [r7, #19]
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	4413      	add	r3, r2
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	7cbb      	ldrb	r3, [r7, #18]
 8000e2a:	029b      	lsls	r3, r3, #10
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	4413      	add	r3, r2
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	3301      	adds	r3, #1
 8000e3a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e3c:	8bfa      	ldrh	r2, [r7, #30]
 8000e3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e42:	3b09      	subs	r3, #9
 8000e44:	409a      	lsls	r2, r3
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000e50:	e056      	b.n	8000f00 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e58:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e60:	e055      	b.n	8000f0e <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000e62:	f7ff fbe5 	bl	8000630 <SD_ReadyWait>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2bff      	cmp	r3, #255	; 0xff
 8000e6a:	d14b      	bne.n	8000f04 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e72:	e047      	b.n	8000f04 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000e74:	2100      	movs	r1, #0
 8000e76:	2049      	movs	r0, #73	; 0x49
 8000e78:	f7ff fce4 	bl	8000844 <SD_SendCmd>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d142      	bne.n	8000f08 <SD_disk_ioctl+0x244>
 8000e82:	2110      	movs	r1, #16
 8000e84:	6a38      	ldr	r0, [r7, #32]
 8000e86:	f7ff fc53 	bl	8000730 <SD_RxDataBlock>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d03b      	beq.n	8000f08 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e96:	e037      	b.n	8000f08 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000e98:	2100      	movs	r1, #0
 8000e9a:	204a      	movs	r0, #74	; 0x4a
 8000e9c:	f7ff fcd2 	bl	8000844 <SD_SendCmd>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d132      	bne.n	8000f0c <SD_disk_ioctl+0x248>
 8000ea6:	2110      	movs	r1, #16
 8000ea8:	6a38      	ldr	r0, [r7, #32]
 8000eaa:	f7ff fc41 	bl	8000730 <SD_RxDataBlock>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d02b      	beq.n	8000f0c <SD_disk_ioctl+0x248>
        res = RES_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000eba:	e027      	b.n	8000f0c <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	207a      	movs	r0, #122	; 0x7a
 8000ec0:	f7ff fcc0 	bl	8000844 <SD_SendCmd>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d116      	bne.n	8000ef8 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ed0:	e00b      	b.n	8000eea <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8000ed2:	6a3c      	ldr	r4, [r7, #32]
 8000ed4:	1c63      	adds	r3, r4, #1
 8000ed6:	623b      	str	r3, [r7, #32]
 8000ed8:	f7ff fb7e 	bl	80005d8 <SPI_RxByte>
 8000edc:	4603      	mov	r3, r0
 8000ede:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000ee0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000eea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d9ef      	bls.n	8000ed2 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8000ef8:	2304      	movs	r3, #4
 8000efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000efe:	e006      	b.n	8000f0e <SD_disk_ioctl+0x24a>
      break;
 8000f00:	bf00      	nop
 8000f02:	e004      	b.n	8000f0e <SD_disk_ioctl+0x24a>
      break;
 8000f04:	bf00      	nop
 8000f06:	e002      	b.n	8000f0e <SD_disk_ioctl+0x24a>
      break;
 8000f08:	bf00      	nop
 8000f0a:	e000      	b.n	8000f0e <SD_disk_ioctl+0x24a>
      break;
 8000f0c:	bf00      	nop
    }

    DESELECT();
 8000f0e:	f7ff fb3d 	bl	800058c <DESELECT>
    SPI_RxByte();
 8000f12:	f7ff fb61 	bl	80005d8 <SPI_RxByte>
  }

  return res;
 8000f16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	372c      	adds	r7, #44	; 0x2c
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd90      	pop	{r4, r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000000 	.word	0x20000000

08000f28 <GraphicsInit>:

static int16_t triangleCornersX[3];
static int16_t triangleCornersY[3];

void GraphicsInit(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	ILI9341Reset();
 8000f2c:	f000 f8c8 	bl	80010c0 <ILI9341Reset>
	ILI9341Init();
 8000f30:	f000 f8dc 	bl	80010ec <ILI9341Init>
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <GraphicsClear>:

void GraphicsClear(colour_t colour)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80fb      	strh	r3, [r7, #6]
	filledRectangleClip(0U, 0U, (uint16_t)ILI9341_LCD_WIDTH, (uint16_t)ILI9341_LCD_HEIGHT, colour);
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f4a:	22f0      	movs	r2, #240	; 0xf0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f000 f804 	bl	8000f5c <filledRectangleClip>
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <filledRectangleClip>:
	GraphicsFilledSegment(x + (int16_t)cornerRadius, y + height - (int16_t)cornerRadius - 1, cornerRadius, 180, 270, 15U, colour);
	GraphicsFilledSegment(x + width - (int16_t)cornerRadius - 1, y + height - (int16_t)cornerRadius - 1, cornerRadius, 90, 180, 15U, colour);
}

static void filledRectangleClip(int16_t x, int16_t y, uint16_t width, uint16_t height, colour_t colour)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b087      	sub	sp, #28
 8000f60:	af02      	add	r7, sp, #8
 8000f62:	4604      	mov	r4, r0
 8000f64:	4608      	mov	r0, r1
 8000f66:	4611      	mov	r1, r2
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4623      	mov	r3, r4
 8000f6c:	80fb      	strh	r3, [r7, #6]
 8000f6e:	4603      	mov	r3, r0
 8000f70:	80bb      	strh	r3, [r7, #4]
 8000f72:	460b      	mov	r3, r1
 8000f74:	807b      	strh	r3, [r7, #2]
 8000f76:	4613      	mov	r3, r2
 8000f78:	803b      	strh	r3, [r7, #0]
	int16_t x_end;
	int16_t y_end;

	if (x > (int16_t)ILI9341_LCD_WIDTH - 1 || y > (int16_t)ILI9341_LCD_HEIGHT - 1)
 8000f7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f7e:	2bef      	cmp	r3, #239	; 0xef
 8000f80:	dc58      	bgt.n	8001034 <filledRectangleClip+0xd8>
 8000f82:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f86:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000f8a:	da53      	bge.n	8001034 <filledRectangleClip+0xd8>
	{
		return;
	}

	if (x + (int16_t)width < 0 || y + (int16_t)height < 0)
 8000f8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f90:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000f94:	4413      	add	r3, r2
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	db4e      	blt.n	8001038 <filledRectangleClip+0xdc>
 8000f9a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f9e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db47      	blt.n	8001038 <filledRectangleClip+0xdc>
	{
		return;
	}

	if (x < 0)
 8000fa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	da05      	bge.n	8000fbc <filledRectangleClip+0x60>
	{
		width -= (uint16_t)-x;
 8000fb0:	88fa      	ldrh	r2, [r7, #6]
 8000fb2:	887b      	ldrh	r3, [r7, #2]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	807b      	strh	r3, [r7, #2]
		x = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	80fb      	strh	r3, [r7, #6]
	}

	if (y < 0)
 8000fbc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	da05      	bge.n	8000fd0 <filledRectangleClip+0x74>
	{
		height -= (uint16_t)-y;
 8000fc4:	88ba      	ldrh	r2, [r7, #4]
 8000fc6:	883b      	ldrh	r3, [r7, #0]
 8000fc8:	4413      	add	r3, r2
 8000fca:	803b      	strh	r3, [r7, #0]
		y = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	80bb      	strh	r3, [r7, #4]
	}

	x_end = x + (int16_t)width - 1;
 8000fd0:	88fa      	ldrh	r2, [r7, #6]
 8000fd2:	887b      	ldrh	r3, [r7, #2]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	81fb      	strh	r3, [r7, #14]
	if (x_end >(int16_t)ILI9341_LCD_WIDTH - 1)
 8000fde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fe2:	2bef      	cmp	r3, #239	; 0xef
 8000fe4:	dd01      	ble.n	8000fea <filledRectangleClip+0x8e>
	{
		x_end = (int16_t)ILI9341_LCD_WIDTH - 1;
 8000fe6:	23ef      	movs	r3, #239	; 0xef
 8000fe8:	81fb      	strh	r3, [r7, #14]
	}

	y_end = y + (int16_t)height - 1;
 8000fea:	88ba      	ldrh	r2, [r7, #4]
 8000fec:	883b      	ldrh	r3, [r7, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	81bb      	strh	r3, [r7, #12]
	if (y_end > (int16_t)ILI9341_LCD_HEIGHT - 1)
 8000ff8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ffc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001000:	db02      	blt.n	8001008 <filledRectangleClip+0xac>
	{
		y_end = (int16_t)ILI9341_LCD_HEIGHT - 1;
 8001002:	f240 133f 	movw	r3, #319	; 0x13f
 8001006:	81bb      	strh	r3, [r7, #12]
	}

	// clipped sizes
	width = (uint16_t)(x_end - x + 1);
 8001008:	89fa      	ldrh	r2, [r7, #14]
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	b29b      	uxth	r3, r3
 8001010:	3301      	adds	r3, #1
 8001012:	807b      	strh	r3, [r7, #2]
	height = (uint16_t)(y_end - y + 1);
 8001014:	89ba      	ldrh	r2, [r7, #12]
 8001016:	88bb      	ldrh	r3, [r7, #4]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	b29b      	uxth	r3, r3
 800101c:	3301      	adds	r3, #1
 800101e:	803b      	strh	r3, [r7, #0]

	ILI9341FilledRectangle((uint16_t)x, (uint16_t)y, width, height, colour);
 8001020:	88f8      	ldrh	r0, [r7, #6]
 8001022:	88b9      	ldrh	r1, [r7, #4]
 8001024:	883c      	ldrh	r4, [r7, #0]
 8001026:	887a      	ldrh	r2, [r7, #2]
 8001028:	8c3b      	ldrh	r3, [r7, #32]
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	4623      	mov	r3, r4
 800102e:	f000 f9dd 	bl	80013ec <ILI9341FilledRectangle>
 8001032:	e002      	b.n	800103a <filledRectangleClip+0xde>
		return;
 8001034:	bf00      	nop
 8001036:	e000      	b.n	800103a <filledRectangleClip+0xde>
		return;
 8001038:	bf00      	nop
}
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	bd90      	pop	{r4, r7, pc}

08001040 <WriteCommand>:
static void WaitForDMAWriteComplete(void);
static void WriteCommand(uint8_t command);
static void WriteData(uint8_t data);

static void WriteCommand(uint8_t command)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2120      	movs	r1, #32
 800104e:	4806      	ldr	r0, [pc, #24]	; (8001068 <WriteCommand+0x28>)
 8001050:	f001 fff8 	bl	8003044 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &command, 1U, 100U);
 8001054:	1df9      	adds	r1, r7, #7
 8001056:	2364      	movs	r3, #100	; 0x64
 8001058:	2201      	movs	r2, #1
 800105a:	4804      	ldr	r0, [pc, #16]	; (800106c <WriteCommand+0x2c>)
 800105c:	f002 fcf9 	bl	8003a52 <HAL_SPI_Transmit>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40020800 	.word	0x40020800
 800106c:	200000d0 	.word	0x200000d0

08001070 <WriteData>:

static void WriteData(uint8_t data)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	2120      	movs	r1, #32
 800107e:	4806      	ldr	r0, [pc, #24]	; (8001098 <WriteData+0x28>)
 8001080:	f001 ffe0 	bl	8003044 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1U, 100U);
 8001084:	1df9      	adds	r1, r7, #7
 8001086:	2364      	movs	r3, #100	; 0x64
 8001088:	2201      	movs	r2, #1
 800108a:	4804      	ldr	r0, [pc, #16]	; (800109c <WriteData+0x2c>)
 800108c:	f002 fce1 	bl	8003a52 <HAL_SPI_Transmit>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40020800 	.word	0x40020800
 800109c:	200000d0 	.word	0x200000d0

080010a0 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	txComplete = true;
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <HAL_SPI_TxCpltCallback+0x1c>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	200000a6 	.word	0x200000a6

080010c0 <ILI9341Reset>:

void ILI9341Reset(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_RST_PORT, ILI9341_RST_PIN, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2110      	movs	r1, #16
 80010c8:	4807      	ldr	r0, [pc, #28]	; (80010e8 <ILI9341Reset+0x28>)
 80010ca:	f001 ffbb 	bl	8003044 <HAL_GPIO_WritePin>
	HAL_Delay(200UL);
 80010ce:	20c8      	movs	r0, #200	; 0xc8
 80010d0:	f001 f95e 	bl	8002390 <HAL_Delay>
	HAL_GPIO_WritePin(ILI9341_RST_PORT, ILI9341_RST_PIN, GPIO_PIN_SET);
 80010d4:	2201      	movs	r2, #1
 80010d6:	2110      	movs	r1, #16
 80010d8:	4803      	ldr	r0, [pc, #12]	; (80010e8 <ILI9341Reset+0x28>)
 80010da:	f001 ffb3 	bl	8003044 <HAL_GPIO_WritePin>
	HAL_Delay(200UL);
 80010de:	20c8      	movs	r0, #200	; 0xc8
 80010e0:	f001 f956 	bl	8002390 <HAL_Delay>
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40020800 	.word	0x40020800

080010ec <ILI9341Init>:

void ILI9341Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2110      	movs	r1, #16
 80010f4:	4885      	ldr	r0, [pc, #532]	; (800130c <ILI9341Init+0x220>)
 80010f6:	f001 ffa5 	bl	8003044 <HAL_GPIO_WritePin>

	WriteCommand(0x01U);
 80010fa:	2001      	movs	r0, #1
 80010fc:	f7ff ffa0 	bl	8001040 <WriteCommand>
	HAL_Delay(1000UL);
 8001100:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001104:	f001 f944 	bl	8002390 <HAL_Delay>
	WriteCommand(0xCBU);
 8001108:	20cb      	movs	r0, #203	; 0xcb
 800110a:	f7ff ff99 	bl	8001040 <WriteCommand>
	WriteData(0x39U);
 800110e:	2039      	movs	r0, #57	; 0x39
 8001110:	f7ff ffae 	bl	8001070 <WriteData>
	WriteData(0x2CU);
 8001114:	202c      	movs	r0, #44	; 0x2c
 8001116:	f7ff ffab 	bl	8001070 <WriteData>
	WriteData(0x00U);
 800111a:	2000      	movs	r0, #0
 800111c:	f7ff ffa8 	bl	8001070 <WriteData>
	WriteData(0x34U);
 8001120:	2034      	movs	r0, #52	; 0x34
 8001122:	f7ff ffa5 	bl	8001070 <WriteData>
	WriteData(0x02U);
 8001126:	2002      	movs	r0, #2
 8001128:	f7ff ffa2 	bl	8001070 <WriteData>
	WriteCommand(0xCFU);
 800112c:	20cf      	movs	r0, #207	; 0xcf
 800112e:	f7ff ff87 	bl	8001040 <WriteCommand>
	WriteData(0x00U);
 8001132:	2000      	movs	r0, #0
 8001134:	f7ff ff9c 	bl	8001070 <WriteData>
	WriteData(0xC1U);
 8001138:	20c1      	movs	r0, #193	; 0xc1
 800113a:	f7ff ff99 	bl	8001070 <WriteData>
	WriteData(0x30U);
 800113e:	2030      	movs	r0, #48	; 0x30
 8001140:	f7ff ff96 	bl	8001070 <WriteData>
	WriteCommand(0xE8U);
 8001144:	20e8      	movs	r0, #232	; 0xe8
 8001146:	f7ff ff7b 	bl	8001040 <WriteCommand>
	WriteData(0x85U);
 800114a:	2085      	movs	r0, #133	; 0x85
 800114c:	f7ff ff90 	bl	8001070 <WriteData>
	WriteData(0x00U);
 8001150:	2000      	movs	r0, #0
 8001152:	f7ff ff8d 	bl	8001070 <WriteData>
	WriteData(0x78U);
 8001156:	2078      	movs	r0, #120	; 0x78
 8001158:	f7ff ff8a 	bl	8001070 <WriteData>
	WriteCommand(0xEAU);
 800115c:	20ea      	movs	r0, #234	; 0xea
 800115e:	f7ff ff6f 	bl	8001040 <WriteCommand>
	WriteData(0x00U);
 8001162:	2000      	movs	r0, #0
 8001164:	f7ff ff84 	bl	8001070 <WriteData>
	WriteData(0x00U);
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff ff81 	bl	8001070 <WriteData>
	WriteCommand(0xEDU);
 800116e:	20ed      	movs	r0, #237	; 0xed
 8001170:	f7ff ff66 	bl	8001040 <WriteCommand>
	WriteData(0x64U);
 8001174:	2064      	movs	r0, #100	; 0x64
 8001176:	f7ff ff7b 	bl	8001070 <WriteData>
	WriteData(0x03U);
 800117a:	2003      	movs	r0, #3
 800117c:	f7ff ff78 	bl	8001070 <WriteData>
	WriteData(0x12U);
 8001180:	2012      	movs	r0, #18
 8001182:	f7ff ff75 	bl	8001070 <WriteData>
	WriteData(0x81U);
 8001186:	2081      	movs	r0, #129	; 0x81
 8001188:	f7ff ff72 	bl	8001070 <WriteData>
	WriteCommand(0xF7U);
 800118c:	20f7      	movs	r0, #247	; 0xf7
 800118e:	f7ff ff57 	bl	8001040 <WriteCommand>
	WriteData(0x20U);
 8001192:	2020      	movs	r0, #32
 8001194:	f7ff ff6c 	bl	8001070 <WriteData>
	WriteCommand(0xC0U);
 8001198:	20c0      	movs	r0, #192	; 0xc0
 800119a:	f7ff ff51 	bl	8001040 <WriteCommand>
	WriteData(0x23U);
 800119e:	2023      	movs	r0, #35	; 0x23
 80011a0:	f7ff ff66 	bl	8001070 <WriteData>
	WriteCommand(0xC1U);
 80011a4:	20c1      	movs	r0, #193	; 0xc1
 80011a6:	f7ff ff4b 	bl	8001040 <WriteCommand>
	WriteData(0x10U);
 80011aa:	2010      	movs	r0, #16
 80011ac:	f7ff ff60 	bl	8001070 <WriteData>
	WriteCommand(0xC5U);
 80011b0:	20c5      	movs	r0, #197	; 0xc5
 80011b2:	f7ff ff45 	bl	8001040 <WriteCommand>
	WriteData(0x3EU);
 80011b6:	203e      	movs	r0, #62	; 0x3e
 80011b8:	f7ff ff5a 	bl	8001070 <WriteData>
	WriteData(0x28U);
 80011bc:	2028      	movs	r0, #40	; 0x28
 80011be:	f7ff ff57 	bl	8001070 <WriteData>
	WriteCommand(0xC7U);
 80011c2:	20c7      	movs	r0, #199	; 0xc7
 80011c4:	f7ff ff3c 	bl	8001040 <WriteCommand>
	WriteData(0x86U);
 80011c8:	2086      	movs	r0, #134	; 0x86
 80011ca:	f7ff ff51 	bl	8001070 <WriteData>
	WriteCommand(0x36U);
 80011ce:	2036      	movs	r0, #54	; 0x36
 80011d0:	f7ff ff36 	bl	8001040 <WriteCommand>
	WriteData(0x48U);
 80011d4:	2048      	movs	r0, #72	; 0x48
 80011d6:	f7ff ff4b 	bl	8001070 <WriteData>
	WriteCommand(0x3AU);
 80011da:	203a      	movs	r0, #58	; 0x3a
 80011dc:	f7ff ff30 	bl	8001040 <WriteCommand>
	WriteData(0x55U);
 80011e0:	2055      	movs	r0, #85	; 0x55
 80011e2:	f7ff ff45 	bl	8001070 <WriteData>
	WriteCommand(0xB1U);
 80011e6:	20b1      	movs	r0, #177	; 0xb1
 80011e8:	f7ff ff2a 	bl	8001040 <WriteCommand>
	WriteData(0x00U);
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff ff3f 	bl	8001070 <WriteData>
	WriteData(0x18U);
 80011f2:	2018      	movs	r0, #24
 80011f4:	f7ff ff3c 	bl	8001070 <WriteData>
	WriteCommand(0xB6U);
 80011f8:	20b6      	movs	r0, #182	; 0xb6
 80011fa:	f7ff ff21 	bl	8001040 <WriteCommand>
	WriteData(0x08U);
 80011fe:	2008      	movs	r0, #8
 8001200:	f7ff ff36 	bl	8001070 <WriteData>
	WriteData(0x82U);
 8001204:	2082      	movs	r0, #130	; 0x82
 8001206:	f7ff ff33 	bl	8001070 <WriteData>
	WriteData(0x27U);
 800120a:	2027      	movs	r0, #39	; 0x27
 800120c:	f7ff ff30 	bl	8001070 <WriteData>
	WriteCommand(0xF2U);
 8001210:	20f2      	movs	r0, #242	; 0xf2
 8001212:	f7ff ff15 	bl	8001040 <WriteCommand>
	WriteData(0x00U);
 8001216:	2000      	movs	r0, #0
 8001218:	f7ff ff2a 	bl	8001070 <WriteData>
	WriteCommand(0x26U);
 800121c:	2026      	movs	r0, #38	; 0x26
 800121e:	f7ff ff0f 	bl	8001040 <WriteCommand>
	WriteData(0x01U);
 8001222:	2001      	movs	r0, #1
 8001224:	f7ff ff24 	bl	8001070 <WriteData>
	WriteCommand(0xE0U);
 8001228:	20e0      	movs	r0, #224	; 0xe0
 800122a:	f7ff ff09 	bl	8001040 <WriteCommand>
	WriteData(0x0FU);
 800122e:	200f      	movs	r0, #15
 8001230:	f7ff ff1e 	bl	8001070 <WriteData>
	WriteData(0x31U);
 8001234:	2031      	movs	r0, #49	; 0x31
 8001236:	f7ff ff1b 	bl	8001070 <WriteData>
	WriteData(0x2BU);
 800123a:	202b      	movs	r0, #43	; 0x2b
 800123c:	f7ff ff18 	bl	8001070 <WriteData>
	WriteData(0x0CU);
 8001240:	200c      	movs	r0, #12
 8001242:	f7ff ff15 	bl	8001070 <WriteData>
	WriteData(0x0EU);
 8001246:	200e      	movs	r0, #14
 8001248:	f7ff ff12 	bl	8001070 <WriteData>
	WriteData(0x08U);
 800124c:	2008      	movs	r0, #8
 800124e:	f7ff ff0f 	bl	8001070 <WriteData>
	WriteData(0x4EU);
 8001252:	204e      	movs	r0, #78	; 0x4e
 8001254:	f7ff ff0c 	bl	8001070 <WriteData>
	WriteData(0xF1U);
 8001258:	20f1      	movs	r0, #241	; 0xf1
 800125a:	f7ff ff09 	bl	8001070 <WriteData>
	WriteData(0x37U);
 800125e:	2037      	movs	r0, #55	; 0x37
 8001260:	f7ff ff06 	bl	8001070 <WriteData>
	WriteData(0x07U);
 8001264:	2007      	movs	r0, #7
 8001266:	f7ff ff03 	bl	8001070 <WriteData>
	WriteData(0x10U);
 800126a:	2010      	movs	r0, #16
 800126c:	f7ff ff00 	bl	8001070 <WriteData>
	WriteData(0x03U);
 8001270:	2003      	movs	r0, #3
 8001272:	f7ff fefd 	bl	8001070 <WriteData>
	WriteData(0x0EU);
 8001276:	200e      	movs	r0, #14
 8001278:	f7ff fefa 	bl	8001070 <WriteData>
	WriteData(0x09U);
 800127c:	2009      	movs	r0, #9
 800127e:	f7ff fef7 	bl	8001070 <WriteData>
	WriteData(0x00U);
 8001282:	2000      	movs	r0, #0
 8001284:	f7ff fef4 	bl	8001070 <WriteData>
	WriteCommand(0xE1U);
 8001288:	20e1      	movs	r0, #225	; 0xe1
 800128a:	f7ff fed9 	bl	8001040 <WriteCommand>
	WriteData(0x00U);
 800128e:	2000      	movs	r0, #0
 8001290:	f7ff feee 	bl	8001070 <WriteData>
	WriteData(0x0EU);
 8001294:	200e      	movs	r0, #14
 8001296:	f7ff feeb 	bl	8001070 <WriteData>
	WriteData(0x14U);
 800129a:	2014      	movs	r0, #20
 800129c:	f7ff fee8 	bl	8001070 <WriteData>
	WriteData(0x03U);
 80012a0:	2003      	movs	r0, #3
 80012a2:	f7ff fee5 	bl	8001070 <WriteData>
	WriteData(0x11U);
 80012a6:	2011      	movs	r0, #17
 80012a8:	f7ff fee2 	bl	8001070 <WriteData>
	WriteData(0x07U);
 80012ac:	2007      	movs	r0, #7
 80012ae:	f7ff fedf 	bl	8001070 <WriteData>
	WriteData(0x31U);
 80012b2:	2031      	movs	r0, #49	; 0x31
 80012b4:	f7ff fedc 	bl	8001070 <WriteData>
	WriteData(0xC1U);
 80012b8:	20c1      	movs	r0, #193	; 0xc1
 80012ba:	f7ff fed9 	bl	8001070 <WriteData>
	WriteData(0x48U);
 80012be:	2048      	movs	r0, #72	; 0x48
 80012c0:	f7ff fed6 	bl	8001070 <WriteData>
	WriteData(0x08U);
 80012c4:	2008      	movs	r0, #8
 80012c6:	f7ff fed3 	bl	8001070 <WriteData>
	WriteData(0x0FU);
 80012ca:	200f      	movs	r0, #15
 80012cc:	f7ff fed0 	bl	8001070 <WriteData>
	WriteData(0x0CU);
 80012d0:	200c      	movs	r0, #12
 80012d2:	f7ff fecd 	bl	8001070 <WriteData>
	WriteData(0x31U);
 80012d6:	2031      	movs	r0, #49	; 0x31
 80012d8:	f7ff feca 	bl	8001070 <WriteData>
	WriteData(0x36U);
 80012dc:	2036      	movs	r0, #54	; 0x36
 80012de:	f7ff fec7 	bl	8001070 <WriteData>
	WriteData(0x0FU);
 80012e2:	200f      	movs	r0, #15
 80012e4:	f7ff fec4 	bl	8001070 <WriteData>
	WriteCommand(0x11U);
 80012e8:	2011      	movs	r0, #17
 80012ea:	f7ff fea9 	bl	8001040 <WriteCommand>
	HAL_Delay(120UL);
 80012ee:	2078      	movs	r0, #120	; 0x78
 80012f0:	f001 f84e 	bl	8002390 <HAL_Delay>
	WriteCommand(0x29U);
 80012f4:	2029      	movs	r0, #41	; 0x29
 80012f6:	f7ff fea3 	bl	8001040 <WriteCommand>
	WriteCommand(0x36U);
 80012fa:	2036      	movs	r0, #54	; 0x36
 80012fc:	f7ff fea0 	bl	8001040 <WriteCommand>
	WriteData(0x48U);
 8001300:	2048      	movs	r0, #72	; 0x48
 8001302:	f7ff feb5 	bl	8001070 <WriteData>
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40020000 	.word	0x40020000

08001310 <SetWindow>:

static void SetWindow(uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t yEnd)
{
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4604      	mov	r4, r0
 8001318:	4608      	mov	r0, r1
 800131a:	4611      	mov	r1, r2
 800131c:	461a      	mov	r2, r3
 800131e:	4623      	mov	r3, r4
 8001320:	80fb      	strh	r3, [r7, #6]
 8001322:	4603      	mov	r3, r0
 8001324:	80bb      	strh	r3, [r7, #4]
 8001326:	460b      	mov	r3, r1
 8001328:	807b      	strh	r3, [r7, #2]
 800132a:	4613      	mov	r3, r2
 800132c:	803b      	strh	r3, [r7, #0]
	WriteCommand(0x2AU);
 800132e:	202a      	movs	r0, #42	; 0x2a
 8001330:	f7ff fe86 	bl	8001040 <WriteCommand>
	WriteData(xStart >> 8);
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	0a1b      	lsrs	r3, r3, #8
 8001338:	b29b      	uxth	r3, r3
 800133a:	b2db      	uxtb	r3, r3
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fe97 	bl	8001070 <WriteData>
	WriteData(xStart);
 8001342:	88fb      	ldrh	r3, [r7, #6]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fe92 	bl	8001070 <WriteData>
	WriteData(xEnd >> 8);
 800134c:	887b      	ldrh	r3, [r7, #2]
 800134e:	0a1b      	lsrs	r3, r3, #8
 8001350:	b29b      	uxth	r3, r3
 8001352:	b2db      	uxtb	r3, r3
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fe8b 	bl	8001070 <WriteData>
	WriteData(xEnd);
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fe86 	bl	8001070 <WriteData>

	WriteCommand(0x2BU);
 8001364:	202b      	movs	r0, #43	; 0x2b
 8001366:	f7ff fe6b 	bl	8001040 <WriteCommand>
	WriteData(yStart >> 8);
 800136a:	88bb      	ldrh	r3, [r7, #4]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	b29b      	uxth	r3, r3
 8001370:	b2db      	uxtb	r3, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fe7c 	bl	8001070 <WriteData>
	WriteData(yStart);
 8001378:	88bb      	ldrh	r3, [r7, #4]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fe77 	bl	8001070 <WriteData>
	WriteData(yEnd >> 8);
 8001382:	883b      	ldrh	r3, [r7, #0]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	b29b      	uxth	r3, r3
 8001388:	b2db      	uxtb	r3, r3
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fe70 	bl	8001070 <WriteData>
	WriteData(yEnd);
 8001390:	883b      	ldrh	r3, [r7, #0]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fe6b 	bl	8001070 <WriteData>

	WriteCommand(0x2CU);
 800139a:	202c      	movs	r0, #44	; 0x2c
 800139c:	f7ff fe50 	bl	8001040 <WriteCommand>

	HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_SET);
 80013a0:	2201      	movs	r2, #1
 80013a2:	2120      	movs	r1, #32
 80013a4:	4803      	ldr	r0, [pc, #12]	; (80013b4 <SetWindow+0xa4>)
 80013a6:	f001 fe4d 	bl	8003044 <HAL_GPIO_WritePin>
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd90      	pop	{r4, r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40020800 	.word	0x40020800

080013b8 <ILI9341Pixel>:

void ILI9341Pixel(uint16_t x, uint16_t y, colour_t colour)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	80fb      	strh	r3, [r7, #6]
 80013c2:	460b      	mov	r3, r1
 80013c4:	80bb      	strh	r3, [r7, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	807b      	strh	r3, [r7, #2]
	colour_t beColour = __builtin_bswap16(colour);
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	ba5b      	rev16	r3, r3
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	81fb      	strh	r3, [r7, #14]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&beColour, 2U, 100UL);
 80013d2:	f107 010e 	add.w	r1, r7, #14
 80013d6:	2364      	movs	r3, #100	; 0x64
 80013d8:	2202      	movs	r2, #2
 80013da:	4803      	ldr	r0, [pc, #12]	; (80013e8 <ILI9341Pixel+0x30>)
 80013dc:	f002 fb39 	bl	8003a52 <HAL_SPI_Transmit>
}
 80013e0:	bf00      	nop
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	200000d0 	.word	0x200000d0

080013ec <ILI9341FilledRectangle>:
		WaitForDMAWriteComplete();
	}
}

void ILI9341FilledRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, colour_t colour)
{
 80013ec:	b590      	push	{r4, r7, lr}
 80013ee:	b0a7      	sub	sp, #156	; 0x9c
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4604      	mov	r4, r0
 80013f4:	4608      	mov	r0, r1
 80013f6:	4611      	mov	r1, r2
 80013f8:	461a      	mov	r2, r3
 80013fa:	4623      	mov	r3, r4
 80013fc:	80fb      	strh	r3, [r7, #6]
 80013fe:	4603      	mov	r3, r0
 8001400:	80bb      	strh	r3, [r7, #4]
 8001402:	460b      	mov	r3, r1
 8001404:	807b      	strh	r3, [r7, #2]
 8001406:	4613      	mov	r3, r2
 8001408:	803b      	strh	r3, [r7, #0]
	colour_t dmaBuffer[DMA_BUFFER_SIZE];
	uint8_t i;
	uint32_t totalBytesToWrite;
	uint32_t bytesToWriteThisTime;

	for (i = 0U; i < DMA_BUFFER_SIZE; i++)
 800140a:	2300      	movs	r3, #0
 800140c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001410:	e00f      	b.n	8001432 <ILI9341FilledRectangle+0x46>
	{
		dmaBuffer[i] = __builtin_bswap16(colour);
 8001412:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001416:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 800141a:	ba52      	rev16	r2, r2
 800141c:	b292      	uxth	r2, r2
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	3398      	adds	r3, #152	; 0x98
 8001422:	443b      	add	r3, r7
 8001424:	f823 2c8c 	strh.w	r2, [r3, #-140]
	for (i = 0U; i < DMA_BUFFER_SIZE; i++)
 8001428:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800142c:	3301      	adds	r3, #1
 800142e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001432:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001436:	2b3f      	cmp	r3, #63	; 0x3f
 8001438:	d9eb      	bls.n	8001412 <ILI9341FilledRectangle+0x26>
	}

	SetWindow(x, y, x + width - 1U, y + height - 1U);
 800143a:	88fa      	ldrh	r2, [r7, #6]
 800143c:	887b      	ldrh	r3, [r7, #2]
 800143e:	4413      	add	r3, r2
 8001440:	b29b      	uxth	r3, r3
 8001442:	3b01      	subs	r3, #1
 8001444:	b29c      	uxth	r4, r3
 8001446:	88ba      	ldrh	r2, [r7, #4]
 8001448:	883b      	ldrh	r3, [r7, #0]
 800144a:	4413      	add	r3, r2
 800144c:	b29b      	uxth	r3, r3
 800144e:	3b01      	subs	r3, #1
 8001450:	b29b      	uxth	r3, r3
 8001452:	88b9      	ldrh	r1, [r7, #4]
 8001454:	88f8      	ldrh	r0, [r7, #6]
 8001456:	4622      	mov	r2, r4
 8001458:	f7ff ff5a 	bl	8001310 <SetWindow>
	totalBytesToWrite = (uint32_t)width * (uint32_t)height * (uint32_t)sizeof(colour_t);
 800145c:	887b      	ldrh	r3, [r7, #2]
 800145e:	883a      	ldrh	r2, [r7, #0]
 8001460:	fb02 f303 	mul.w	r3, r2, r3
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	bytesToWriteThisTime = DMA_BUFFER_SIZE * (uint16_t)sizeof(colour_t);
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	while (totalBytesToWrite > 0UL)
 8001470:	e01b      	b.n	80014aa <ILI9341FilledRectangle+0xbe>
	{
		if (totalBytesToWrite < bytesToWriteThisTime)
 8001472:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001476:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800147a:	429a      	cmp	r2, r3
 800147c:	d203      	bcs.n	8001486 <ILI9341FilledRectangle+0x9a>
		{
			bytesToWriteThisTime = totalBytesToWrite;
 800147e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001482:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		}
		totalBytesToWrite -= bytesToWriteThisTime;
 8001486:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800148a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

		WriteDataDMA(&dmaBuffer, bytesToWriteThisTime);
 8001494:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001498:	b29a      	uxth	r2, r3
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 f80b 	bl	80014bc <WriteDataDMA>
		WaitForDMAWriteComplete();
 80014a6:	f000 f821 	bl	80014ec <WaitForDMAWriteComplete>
	while (totalBytesToWrite > 0UL)
 80014aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1df      	bne.n	8001472 <ILI9341FilledRectangle+0x86>
	}
}
 80014b2:	bf00      	nop
 80014b4:	bf00      	nop
 80014b6:	379c      	adds	r7, #156	; 0x9c
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd90      	pop	{r4, r7, pc}

080014bc <WriteDataDMA>:

static void WriteDataDMA(const void *data, uint16_t length)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	807b      	strh	r3, [r7, #2]
	txComplete = false;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <WriteDataDMA+0x28>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *)data, length);
 80014ce:	887b      	ldrh	r3, [r7, #2]
 80014d0:	461a      	mov	r2, r3
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	4804      	ldr	r0, [pc, #16]	; (80014e8 <WriteDataDMA+0x2c>)
 80014d6:	f002 fd9b 	bl	8004010 <HAL_SPI_Transmit_DMA>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200000a6 	.word	0x200000a6
 80014e8:	200000d0 	.word	0x200000d0

080014ec <WaitForDMAWriteComplete>:

static void WaitForDMAWriteComplete(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
	while (txComplete == false)
 80014f0:	bf00      	nop
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <WaitForDMAWriteComplete+0x24>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	f083 0301 	eor.w	r3, r3, #1
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f7      	bne.n	80014f2 <WaitForDMAWriteComplete+0x6>
	{
	}
}
 8001502:	bf00      	nop
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	200000a6 	.word	0x200000a6

08001514 <displayImage>:
/**** capacity related *****/
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

int displayImage(const char* fname) {
 8001514:	b580      	push	{r7, lr}
 8001516:	f5ad 5d9b 	sub.w	sp, sp, #4960	; 0x1360
 800151a:	b082      	sub	sp, #8
 800151c:	af02      	add	r7, sp, #8
 800151e:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8001522:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8001526:	6018      	str	r0, [r3, #0]
//    UART_Printf("Openning %s...\r\n", fname);
    FIL file;
    FRESULT res = f_open(&file, fname, FA_READ);
 8001528:	f507 7358 	add.w	r3, r7, #864	; 0x360
 800152c:	f5a3 7157 	sub.w	r1, r3, #860	; 0x35c
 8001530:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001534:	3b1c      	subs	r3, #28
 8001536:	2201      	movs	r2, #1
 8001538:	6809      	ldr	r1, [r1, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f005 fa30 	bl	80069a0 <f_open>
 8001540:	4603      	mov	r3, r0
 8001542:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8001546:	f102 0213 	add.w	r2, r2, #19
 800154a:	7013      	strb	r3, [r2, #0]
    if(res != FR_OK) {
 800154c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001550:	f103 0313 	add.w	r3, r3, #19
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d002      	beq.n	8001560 <displayImage+0x4c>
    	//	ST7735_DrawString(0, 10, "f_open() failed, res = %d\r\n", Font_7x10, ST7735_RED, ST7735_BLACK);
        return -1;
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	e282      	b.n	8001a66 <displayImage+0x552>

    //  ST7735_DrawString(0, 20, "File opened, reading...\r\n", Font_7x10, ST7735_RED, ST7735_BLACK);

    unsigned int bytesRead;
    uint8_t header[34];
    res = f_read(&file, header, sizeof(header), &bytesRead);
 8001560:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8001564:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 8001568:	3904      	subs	r1, #4
 800156a:	f507 7048 	add.w	r0, r7, #800	; 0x320
 800156e:	381c      	subs	r0, #28
 8001570:	2222      	movs	r2, #34	; 0x22
 8001572:	f005 fbe1 	bl	8006d38 <f_read>
 8001576:	4603      	mov	r3, r0
 8001578:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800157c:	f102 0213 	add.w	r2, r2, #19
 8001580:	7013      	strb	r3, [r2, #0]
    if(res != FR_OK) {
 8001582:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001586:	f103 0313 	add.w	r3, r3, #19
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d008      	beq.n	80015a2 <displayImage+0x8e>
    	// 	ST7735_DrawString(0, 30, "f_read() failed, res = %d\r\n", Font_7x10, ST7735_RED, ST7735_BLACK);
        f_close(&file);
 8001590:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001594:	3b1c      	subs	r3, #28
 8001596:	4618      	mov	r0, r3
 8001598:	f005 fdab 	bl	80070f2 <f_close>
        return -2;
 800159c:	f06f 0301 	mvn.w	r3, #1
 80015a0:	e261      	b.n	8001a66 <displayImage+0x552>
    }

    if((header[0] != 0x42) || (header[1] != 0x4D)) {
 80015a2:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80015a6:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 80015aa:	2b42      	cmp	r3, #66	; 0x42
 80015ac:	d105      	bne.n	80015ba <displayImage+0xa6>
 80015ae:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80015b2:	f813 3c83 	ldrb.w	r3, [r3, #-131]
 80015b6:	2b4d      	cmp	r3, #77	; 0x4d
 80015b8:	d008      	beq.n	80015cc <displayImage+0xb8>
    	// 	ST7735_DrawString(0, 40, "Wrong BMP signature: 0x%02X 0x%02X\r\n", Font_7x10, ST7735_RED, ST7735_BLACK);
        f_close(&file);
 80015ba:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80015be:	3b1c      	subs	r3, #28
 80015c0:	4618      	mov	r0, r3
 80015c2:	f005 fd96 	bl	80070f2 <f_close>
        return -3;
 80015c6:	f06f 0302 	mvn.w	r3, #2
 80015ca:	e24c      	b.n	8001a66 <displayImage+0x552>
    }

    uint32_t imageOffset = header[10] | (header[11] << 8) | (header[12] << 16) | (header[13] << 24);
 80015cc:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80015d0:	f813 3c7a 	ldrb.w	r3, [r3, #-122]
 80015d4:	461a      	mov	r2, r3
 80015d6:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80015da:	f813 3c79 	ldrb.w	r3, [r3, #-121]
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	431a      	orrs	r2, r3
 80015e2:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80015e6:	f813 3c78 	ldrb.w	r3, [r3, #-120]
 80015ea:	041b      	lsls	r3, r3, #16
 80015ec:	431a      	orrs	r2, r3
 80015ee:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80015f2:	f813 3c77 	ldrb.w	r3, [r3, #-119]
 80015f6:	061b      	lsls	r3, r3, #24
 80015f8:	4313      	orrs	r3, r2
 80015fa:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80015fe:	f102 020c 	add.w	r2, r2, #12
 8001602:	6013      	str	r3, [r2, #0]
    uint32_t imageWidth = header[18] | (header[19] << 8) | (header[20] << 16) | (header[21] << 24);
 8001604:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8001608:	f813 3c72 	ldrb.w	r3, [r3, #-114]
 800160c:	461a      	mov	r2, r3
 800160e:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8001612:	f813 3c71 	ldrb.w	r3, [r3, #-113]
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	431a      	orrs	r2, r3
 800161a:	f507 7358 	add.w	r3, r7, #864	; 0x360
 800161e:	f813 3c70 	ldrb.w	r3, [r3, #-112]
 8001622:	041b      	lsls	r3, r3, #16
 8001624:	431a      	orrs	r2, r3
 8001626:	f507 7358 	add.w	r3, r7, #864	; 0x360
 800162a:	f813 3c6f 	ldrb.w	r3, [r3, #-111]
 800162e:	061b      	lsls	r3, r3, #24
 8001630:	4313      	orrs	r3, r2
 8001632:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8001636:	f102 0208 	add.w	r2, r2, #8
 800163a:	6013      	str	r3, [r2, #0]
    uint32_t imageHeight = header[22] | (header[23] << 8) | (header[24] << 16) | (header[25] << 24);
 800163c:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8001640:	f813 3c6e 	ldrb.w	r3, [r3, #-110]
 8001644:	461a      	mov	r2, r3
 8001646:	f507 7358 	add.w	r3, r7, #864	; 0x360
 800164a:	f813 3c6d 	ldrb.w	r3, [r3, #-109]
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	431a      	orrs	r2, r3
 8001652:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8001656:	f813 3c6c 	ldrb.w	r3, [r3, #-108]
 800165a:	041b      	lsls	r3, r3, #16
 800165c:	431a      	orrs	r2, r3
 800165e:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8001662:	f813 3c6b 	ldrb.w	r3, [r3, #-107]
 8001666:	061b      	lsls	r3, r3, #24
 8001668:	4313      	orrs	r3, r2
 800166a:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800166e:	f102 0204 	add.w	r2, r2, #4
 8001672:	6013      	str	r3, [r2, #0]
    uint16_t imagePlanes = header[26] | (header[27] << 8);
 8001674:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8001678:	f813 3c6a 	ldrb.w	r3, [r3, #-106]
 800167c:	b21a      	sxth	r2, r3
 800167e:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8001682:	f813 3c69 	ldrb.w	r3, [r3, #-105]
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	b21b      	sxth	r3, r3
 800168a:	4313      	orrs	r3, r2
 800168c:	b21b      	sxth	r3, r3
 800168e:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8001692:	f102 0202 	add.w	r2, r2, #2
 8001696:	8013      	strh	r3, [r2, #0]
    uint16_t imageBitsPerPixel = header[28] | (header[29] << 8);
 8001698:	f507 7358 	add.w	r3, r7, #864	; 0x360
 800169c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80016a6:	f813 3c67 	ldrb.w	r3, [r3, #-103]
 80016aa:	021b      	lsls	r3, r3, #8
 80016ac:	b21b      	sxth	r3, r3
 80016ae:	4313      	orrs	r3, r2
 80016b0:	b21b      	sxth	r3, r3
 80016b2:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80016b6:	8013      	strh	r3, [r2, #0]
    uint32_t imageCompression = header[30] | (header[31] << 8) | (header[32] << 16) | (header[33] << 24);
 80016b8:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80016bc:	f813 3c66 	ldrb.w	r3, [r3, #-102]
 80016c0:	461a      	mov	r2, r3
 80016c2:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80016c6:	f813 3c65 	ldrb.w	r3, [r3, #-101]
 80016ca:	021b      	lsls	r3, r3, #8
 80016cc:	431a      	orrs	r2, r3
 80016ce:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80016d2:	f813 3c64 	ldrb.w	r3, [r3, #-100]
 80016d6:	041b      	lsls	r3, r3, #16
 80016d8:	431a      	orrs	r2, r3
 80016da:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80016de:	f813 3c63 	ldrb.w	r3, [r3, #-99]
 80016e2:	061b      	lsls	r3, r3, #24
 80016e4:	4313      	orrs	r3, r2
 80016e6:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80016ea:	f102 021c 	add.w	r2, r2, #28
 80016ee:	6013      	str	r3, [r2, #0]

    snprintf(buff, sizeof(buff), "Pixels offset: %lu\r\n ", imageOffset);
 80016f0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80016f4:	f103 030c 	add.w	r3, r3, #12
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a68      	ldr	r2, [pc, #416]	; (800189c <displayImage+0x388>)
 80016fc:	2128      	movs	r1, #40	; 0x28
 80016fe:	4868      	ldr	r0, [pc, #416]	; (80018a0 <displayImage+0x38c>)
 8001700:	f006 f89a 	bl	8007838 <sniprintf>
    //   ST7735_DrawString(0, 50, buff, Font_7x10, ST7735_RED, ST7735_BLACK);
    snprintf(buff, sizeof(buff), "WxH: %lux%lu\r\n ", imageWidth, imageHeight);
 8001704:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001708:	f103 0304 	add.w	r3, r3, #4
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001714:	f103 0308 	add.w	r3, r3, #8
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a62      	ldr	r2, [pc, #392]	; (80018a4 <displayImage+0x390>)
 800171c:	2128      	movs	r1, #40	; 0x28
 800171e:	4860      	ldr	r0, [pc, #384]	; (80018a0 <displayImage+0x38c>)
 8001720:	f006 f88a 	bl	8007838 <sniprintf>
    //   ST7735_DrawString(0, 60, buff, Font_7x10, ST7735_RED, ST7735_BLACK);
    snprintf(buff, sizeof(buff), "Planes: %d\r\n ", imagePlanes);
 8001724:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001728:	f103 0302 	add.w	r3, r3, #2
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	4a5e      	ldr	r2, [pc, #376]	; (80018a8 <displayImage+0x394>)
 8001730:	2128      	movs	r1, #40	; 0x28
 8001732:	485b      	ldr	r0, [pc, #364]	; (80018a0 <displayImage+0x38c>)
 8001734:	f006 f880 	bl	8007838 <sniprintf>
    //    ST7735_DrawString(0, 70, buff, Font_7x10, ST7735_RED, ST7735_BLACK);
    snprintf(buff, sizeof(buff), "Bits per pixel: %d\r\n ", imageBitsPerPixel);
 8001738:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	4a5b      	ldr	r2, [pc, #364]	; (80018ac <displayImage+0x398>)
 8001740:	2128      	movs	r1, #40	; 0x28
 8001742:	4857      	ldr	r0, [pc, #348]	; (80018a0 <displayImage+0x38c>)
 8001744:	f006 f878 	bl	8007838 <sniprintf>
    //  ST7735_DrawString(0, 80, buff, Font_7x10, ST7735_RED, ST7735_BLACK);
    snprintf(buff, sizeof(buff), "Compression: %ld\r\n ", imageCompression);
 8001748:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 800174c:	f103 031c 	add.w	r3, r3, #28
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a57      	ldr	r2, [pc, #348]	; (80018b0 <displayImage+0x39c>)
 8001754:	2128      	movs	r1, #40	; 0x28
 8001756:	4852      	ldr	r0, [pc, #328]	; (80018a0 <displayImage+0x38c>)
 8001758:	f006 f86e 	bl	8007838 <sniprintf>
    //    ST7735_DrawString(0, 90, buff, Font_7x10, ST7735_RED, ST7735_BLACK);

    if((imageWidth != ILI9341_LCD_WIDTH) || (imageHeight != ILI9341_LCD_HEIGHT)) {
 800175c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001760:	f103 0308 	add.w	r3, r3, #8
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2bf0      	cmp	r3, #240	; 0xf0
 8001768:	d107      	bne.n	800177a <displayImage+0x266>
 800176a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800176e:	f103 0304 	add.w	r3, r3, #4
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001778:	d008      	beq.n	800178c <displayImage+0x278>
//        UART_Printf("Wrong BMP size, %dx%d expected\r\n", ST7735_WIDTH, ST7735_HEIGHT);
    	//	ST7735_DrawString(0, 100, "Wrong BMP size, %dx%d expected\r\n", Font_7x10, ST7735_RED, ST7735_BLACK);
        f_close(&file);
 800177a:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800177e:	3b1c      	subs	r3, #28
 8001780:	4618      	mov	r0, r3
 8001782:	f005 fcb6 	bl	80070f2 <f_close>
        return -4;
 8001786:	f06f 0303 	mvn.w	r3, #3
 800178a:	e16c      	b.n	8001a66 <displayImage+0x552>
    }
//
    if((imagePlanes != 1) || (imageBitsPerPixel != 24) || (imageCompression != 0)) {
 800178c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001790:	f103 0302 	add.w	r3, r3, #2
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d10b      	bne.n	80017b2 <displayImage+0x29e>
 800179a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	2b18      	cmp	r3, #24
 80017a2:	d106      	bne.n	80017b2 <displayImage+0x29e>
 80017a4:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80017a8:	f103 031c 	add.w	r3, r3, #28
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d008      	beq.n	80017c4 <displayImage+0x2b0>
    	//	ST7735_DrawString(0, 110, "Unsupported image format\r\n", Font_7x10, ST7735_RED, ST7735_BLACK);
        f_close(&file);
 80017b2:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80017b6:	3b1c      	subs	r3, #28
 80017b8:	4618      	mov	r0, r3
 80017ba:	f005 fc9a 	bl	80070f2 <f_close>
        return -5;
 80017be:	f06f 0304 	mvn.w	r3, #4
 80017c2:	e150      	b.n	8001a66 <displayImage+0x552>
    }

    res = f_lseek(&file, imageOffset);
 80017c4:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80017c8:	3b1c      	subs	r3, #28
 80017ca:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80017ce:	f102 020c 	add.w	r2, r2, #12
 80017d2:	6811      	ldr	r1, [r2, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f005 fcb6 	bl	8007146 <f_lseek>
 80017da:	4603      	mov	r3, r0
 80017dc:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80017e0:	f102 0213 	add.w	r2, r2, #19
 80017e4:	7013      	strb	r3, [r2, #0]
    if(res != FR_OK) {
 80017e6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80017ea:	f103 0313 	add.w	r3, r3, #19
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d012      	beq.n	800181a <displayImage+0x306>

        snprintf(buff, sizeof(buff), "f_lseek() failed, res = %d\r\n ", res);
 80017f4:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80017f8:	f103 0313 	add.w	r3, r3, #19
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	4a2d      	ldr	r2, [pc, #180]	; (80018b4 <displayImage+0x3a0>)
 8001800:	2128      	movs	r1, #40	; 0x28
 8001802:	4827      	ldr	r0, [pc, #156]	; (80018a0 <displayImage+0x38c>)
 8001804:	f006 f818 	bl	8007838 <sniprintf>
        //   ST7735_DrawString(0, 120, buff, Font_7x10, ST7735_RED, ST7735_BLACK);
        f_close(&file);
 8001808:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800180c:	3b1c      	subs	r3, #28
 800180e:	4618      	mov	r0, r3
 8001810:	f005 fc6f 	bl	80070f2 <f_close>
        return -6;
 8001814:	f06f 0305 	mvn.w	r3, #5
 8001818:	e125      	b.n	8001a66 <displayImage+0x552>
    }

    // row size is aligned to 4 bytes
    uint8_t imageRow[(ILI9341_LCD_WIDTH * 3 + 3) & ~3];
    for(uint32_t y = 0; y < imageHeight; y++) {
 800181a:	2300      	movs	r3, #0
 800181c:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8001820:	f102 021c 	add.w	r2, r2, #28
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e0f0      	b.n	8001a0a <displayImage+0x4f6>
        uint32_t rowIdx = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800182e:	f102 0218 	add.w	r2, r2, #24
 8001832:	6013      	str	r3, [r2, #0]
        res = f_read(&file, imageRow, sizeof(imageRow), &bytesRead);
 8001834:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8001838:	f107 0120 	add.w	r1, r7, #32
 800183c:	3914      	subs	r1, #20
 800183e:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8001842:	381c      	subs	r0, #28
 8001844:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001848:	f005 fa76 	bl	8006d38 <f_read>
 800184c:	4603      	mov	r3, r0
 800184e:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8001852:	f102 0213 	add.w	r2, r2, #19
 8001856:	7013      	strb	r3, [r2, #0]
        if(res != FR_OK) {
 8001858:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800185c:	f103 0313 	add.w	r3, r3, #19
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d012      	beq.n	800188c <displayImage+0x378>
            snprintf(buff, sizeof(buff), "f_read() failed, res = %d\r\n", res);
 8001866:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800186a:	f103 0313 	add.w	r3, r3, #19
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4a11      	ldr	r2, [pc, #68]	; (80018b8 <displayImage+0x3a4>)
 8001872:	2128      	movs	r1, #40	; 0x28
 8001874:	480a      	ldr	r0, [pc, #40]	; (80018a0 <displayImage+0x38c>)
 8001876:	f005 ffdf 	bl	8007838 <sniprintf>
            //        ST7735_DrawString(0, 130, buff, Font_7x10, ST7735_RED, ST7735_BLACK);
            f_close(&file);
 800187a:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800187e:	3b1c      	subs	r3, #28
 8001880:	4618      	mov	r0, r3
 8001882:	f005 fc36 	bl	80070f2 <f_close>
            return -7;
 8001886:	f06f 0306 	mvn.w	r3, #6
 800188a:	e0ec      	b.n	8001a66 <displayImage+0x552>
        }

        for(uint32_t x = 0; x < imageWidth; x++) {
 800188c:	2300      	movs	r3, #0
 800188e:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8001892:	f102 0214 	add.w	r2, r2, #20
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	e09f      	b.n	80019da <displayImage+0x4c6>
 800189a:	bf00      	nop
 800189c:	08008154 	.word	0x08008154
 80018a0:	200000a8 	.word	0x200000a8
 80018a4:	0800816c 	.word	0x0800816c
 80018a8:	0800817c 	.word	0x0800817c
 80018ac:	0800818c 	.word	0x0800818c
 80018b0:	080081a4 	.word	0x080081a4
 80018b4:	080081b8 	.word	0x080081b8
 80018b8:	080081d8 	.word	0x080081d8
            uint8_t b = imageRow[rowIdx++];
 80018bc:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80018c0:	f103 0318 	add.w	r3, r3, #24
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	f507 519a 	add.w	r1, r7, #4928	; 0x1340
 80018cc:	f101 0118 	add.w	r1, r1, #24
 80018d0:	600a      	str	r2, [r1, #0]
 80018d2:	f507 7258 	add.w	r2, r7, #864	; 0x360
 80018d6:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 80018da:	5cd3      	ldrb	r3, [r2, r3]
 80018dc:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80018e0:	f102 021b 	add.w	r2, r2, #27
 80018e4:	7013      	strb	r3, [r2, #0]
            uint8_t g = imageRow[rowIdx++];
 80018e6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80018ea:	f103 0318 	add.w	r3, r3, #24
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	f507 519a 	add.w	r1, r7, #4928	; 0x1340
 80018f6:	f101 0118 	add.w	r1, r1, #24
 80018fa:	600a      	str	r2, [r1, #0]
 80018fc:	f507 7258 	add.w	r2, r7, #864	; 0x360
 8001900:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 8001904:	5cd3      	ldrb	r3, [r2, r3]
 8001906:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 800190a:	f102 021a 	add.w	r2, r2, #26
 800190e:	7013      	strb	r3, [r2, #0]
            uint8_t r = imageRow[rowIdx++];
 8001910:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001914:	f103 0318 	add.w	r3, r3, #24
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	f507 519a 	add.w	r1, r7, #4928	; 0x1340
 8001920:	f101 0118 	add.w	r1, r1, #24
 8001924:	600a      	str	r2, [r1, #0]
 8001926:	f507 7258 	add.w	r2, r7, #864	; 0x360
 800192a:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 800192e:	5cd3      	ldrb	r3, [r2, r3]
 8001930:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8001934:	f102 0219 	add.w	r2, r2, #25
 8001938:	7013      	strb	r3, [r2, #0]
            uint16_t color565 = COLOR565(r, g, b);
 800193a:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 800193e:	f103 0319 	add.w	r3, r3, #25
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	b21b      	sxth	r3, r3
 8001948:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800194c:	f023 0307 	bic.w	r3, r3, #7
 8001950:	b21a      	sxth	r2, r3
 8001952:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8001956:	f103 031a 	add.w	r3, r3, #26
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	b21b      	sxth	r3, r3
 8001960:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001964:	b21b      	sxth	r3, r3
 8001966:	4313      	orrs	r3, r2
 8001968:	b21a      	sxth	r2, r3
 800196a:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 800196e:	f103 031b 	add.w	r3, r3, #27
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	08db      	lsrs	r3, r3, #3
 8001976:	b2db      	uxtb	r3, r3
 8001978:	b21b      	sxth	r3, r3
 800197a:	4313      	orrs	r3, r2
 800197c:	b21b      	sxth	r3, r3
 800197e:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8001982:	f102 0216 	add.w	r2, r2, #22
 8001986:	8013      	strh	r3, [r2, #0]
            ILI9341Pixel(x, imageHeight - y - 1, color565);
 8001988:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800198c:	f103 0314 	add.w	r3, r3, #20
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	b298      	uxth	r0, r3
 8001994:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001998:	f103 0304 	add.w	r3, r3, #4
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	b29a      	uxth	r2, r3
 80019a0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80019a4:	f103 031c 	add.w	r3, r3, #28
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	3b01      	subs	r3, #1
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80019b8:	f102 0216 	add.w	r2, r2, #22
 80019bc:	8812      	ldrh	r2, [r2, #0]
 80019be:	4619      	mov	r1, r3
 80019c0:	f7ff fcfa 	bl	80013b8 <ILI9341Pixel>
        for(uint32_t x = 0; x < imageWidth; x++) {
 80019c4:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80019c8:	f103 0314 	add.w	r3, r3, #20
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	3301      	adds	r3, #1
 80019d0:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80019d4:	f102 0214 	add.w	r2, r2, #20
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80019de:	f103 0314 	add.w	r3, r3, #20
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80019e8:	f103 0308 	add.w	r3, r3, #8
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	f4ff af64 	bcc.w	80018bc <displayImage+0x3a8>
    for(uint32_t y = 0; y < imageHeight; y++) {
 80019f4:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80019f8:	f103 031c 	add.w	r3, r3, #28
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	3301      	adds	r3, #1
 8001a00:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8001a04:	f102 021c 	add.w	r2, r2, #28
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001a0e:	f103 031c 	add.w	r3, r3, #28
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001a18:	f103 0304 	add.w	r3, r3, #4
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	f4ff af02 	bcc.w	8001828 <displayImage+0x314>
        }
    }

    res = f_close(&file);
 8001a24:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8001a28:	3b1c      	subs	r3, #28
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f005 fb61 	bl	80070f2 <f_close>
 8001a30:	4603      	mov	r3, r0
 8001a32:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8001a36:	f102 0213 	add.w	r2, r2, #19
 8001a3a:	7013      	strb	r3, [r2, #0]
    if(res != FR_OK) {
 8001a3c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001a40:	f103 0313 	add.w	r3, r3, #19
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00c      	beq.n	8001a64 <displayImage+0x550>
//        UART_Printf("f_close() failed, res = %d\r\n", res);
        snprintf(buff, sizeof(buff), "f_close() failed, res = %d\r\n", res);
 8001a4a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001a4e:	f103 0313 	add.w	r3, r3, #19
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	4a06      	ldr	r2, [pc, #24]	; (8001a70 <displayImage+0x55c>)
 8001a56:	2128      	movs	r1, #40	; 0x28
 8001a58:	4806      	ldr	r0, [pc, #24]	; (8001a74 <displayImage+0x560>)
 8001a5a:	f005 feed 	bl	8007838 <sniprintf>
        //     ST7735_DrawString(0, 140, buff, Font_7x10, ST7735_RED, ST7735_BLACK);
        return -8;
 8001a5e:	f06f 0307 	mvn.w	r3, #7
 8001a62:	e000      	b.n	8001a66 <displayImage+0x552>
    }

    return 0;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	f507 579b 	add.w	r7, r7, #4960	; 0x1360
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	080081f4 	.word	0x080081f4
 8001a74:	200000a8 	.word	0x200000a8

08001a78 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a7e:	f000 fc15 	bl	80022ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a82:	f000 f8a3 	bl	8001bcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a86:	f000 f995 	bl	8001db4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a8a:	f000 f973 	bl	8001d74 <MX_DMA_Init>
  MX_SPI1_Init();
 8001a8e:	f000 f905 	bl	8001c9c <MX_SPI1_Init>
  MX_SPI2_Init();
 8001a92:	f000 f939 	bl	8001d08 <MX_SPI2_Init>
  MX_FATFS_Init();
 8001a96:	f002 fcdf 	bl	8004458 <MX_FATFS_Init>
  GraphicsInit();
 8001a9a:	f7ff fa45 	bl	8000f28 <GraphicsInit>
   //  TouchCalibrate();
     GraphicsClear(BLUE);
 8001a9e:	201f      	movs	r0, #31
 8001aa0:	f7ff fa4a 	bl	8000f38 <GraphicsClear>
     FRESULT res = f_mount(&fs, "", 0);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	4941      	ldr	r1, [pc, #260]	; (8001bac <main+0x134>)
 8001aa8:	4841      	ldr	r0, [pc, #260]	; (8001bb0 <main+0x138>)
 8001aaa:	f004 ff33 	bl	8006914 <f_mount>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	70fb      	strb	r3, [r7, #3]
     if(res != FR_OK) {
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d008      	beq.n	8001aca <main+0x52>
     //      UART_Printf("f_mount() failed, res = %d\r\n", res);
         snprintf(buff, sizeof(buff), "f_mount() failed, res = %d\r\n", res);
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	4a3e      	ldr	r2, [pc, #248]	; (8001bb4 <main+0x13c>)
 8001abc:	2128      	movs	r1, #40	; 0x28
 8001abe:	483e      	ldr	r0, [pc, #248]	; (8001bb8 <main+0x140>)
 8001ac0:	f005 feba 	bl	8007838 <sniprintf>
         //      ST7735_DrawString(0, 150, buff, Font_7x10, ST7735_RED, ST7735_BLACK);
         return -2;
 8001ac4:	f06f 0301 	mvn.w	r3, #1
 8001ac8:	e06b      	b.n	8001ba2 <main+0x12a>
     }
     /* USER CODE END 2 */

    int i = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
    int flag=0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
    int flag1=0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
      while (1)
      {
    		 if( HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7 )== GPIO_PIN_SET)
 8001ad6:	2180      	movs	r1, #128	; 0x80
 8001ad8:	4838      	ldr	r0, [pc, #224]	; (8001bbc <main+0x144>)
 8001ada:	f001 fa9b 	bl	8003014 <HAL_GPIO_ReadPin>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d109      	bne.n	8001af8 <main+0x80>
    		 {

    /* USER CODE END WHILE */
    			 if(flag==0)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d106      	bne.n	8001af8 <main+0x80>
    			 {
i++;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	3301      	adds	r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
flag=1;
 8001af0:	2301      	movs	r3, #1
 8001af2:	60bb      	str	r3, [r7, #8]
flag1=0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	607b      	str	r3, [r7, #4]
    /* USER CODE BEGIN 3 */
    	  	  }
    		 }

    		 if( HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7 )== GPIO_PIN_SET)
 8001af8:	2180      	movs	r1, #128	; 0x80
 8001afa:	4830      	ldr	r0, [pc, #192]	; (8001bbc <main+0x144>)
 8001afc:	f001 fa8a 	bl	8003014 <HAL_GPIO_ReadPin>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d109      	bne.n	8001b1a <main+0xa2>
    		  {
    		 	    /* USER CODE END WHILE */
    			 if(flag==0)
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d106      	bne.n	8001b1a <main+0xa2>
    			 {
    		 			 i--;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	60fb      	str	r3, [r7, #12]
    		 			 flag=1;
 8001b12:	2301      	movs	r3, #1
 8001b14:	60bb      	str	r3, [r7, #8]
    		 			 flag1=0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	607b      	str	r3, [r7, #4]
//    		 {
//    		  displayImage("2.bmp");
//    		  HAL_Delay(1000);
//    		 }

    		 if(i == 1)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d10d      	bne.n	8001b3c <main+0xc4>
    		 {
                if(flag1==0)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10a      	bne.n	8001b3c <main+0xc4>
                {
    		  displayImage("3.bmp");
 8001b26:	4826      	ldr	r0, [pc, #152]	; (8001bc0 <main+0x148>)
 8001b28:	f7ff fcf4 	bl	8001514 <displayImage>
    		  HAL_Delay(1000);
 8001b2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b30:	f000 fc2e 	bl	8002390 <HAL_Delay>
    		  flag=0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60bb      	str	r3, [r7, #8]
    		  flag1=1;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	607b      	str	r3, [r7, #4]
//    		 if(i == 4)
//    		 {
//    		  displayImage("4.bmp");
//    		  HAL_Delay(1000);
//    		 }
    		 if(i == 2)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d10d      	bne.n	8001b5e <main+0xe6>
    		 {
    			 if(flag1==0)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10a      	bne.n	8001b5e <main+0xe6>
    			 {
    		  displayImage("22.bmp");
 8001b48:	481e      	ldr	r0, [pc, #120]	; (8001bc4 <main+0x14c>)
 8001b4a:	f7ff fce3 	bl	8001514 <displayImage>
    		  HAL_Delay(1000);
 8001b4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b52:	f000 fc1d 	bl	8002390 <HAL_Delay>
    		  flag=0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
    		  flag1=1;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	607b      	str	r3, [r7, #4]
//    		  HAL_Delay(1000);
//    		  flag=0;
//           flag1=1;
//    		 }
//    		 }
    		 if(i == 3)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d10f      	bne.n	8001b84 <main+0x10c>
    		 {
    			 if(flag1==0)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10c      	bne.n	8001b84 <main+0x10c>
    			{
    		  displayImage("gokucorrect.bmp");
 8001b6a:	4817      	ldr	r0, [pc, #92]	; (8001bc8 <main+0x150>)
 8001b6c:	f7ff fcd2 	bl	8001514 <displayImage>
    		  HAL_Delay(1000);
 8001b70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b74:	f000 fc0c 	bl	8002390 <HAL_Delay>
    		  flag=0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
    		  flag1=1;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	607b      	str	r3, [r7, #4]
    		i=0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
    		 }
    		 }
    		 if(i<=0)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	dc03      	bgt.n	8001b92 <main+0x11a>
    		 {
    			 i=0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
    			 flag=0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]

    		 }
    		 if(i>=5)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	dd9e      	ble.n	8001ad6 <main+0x5e>
    		 {
    			 i=0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]
    			 flag=0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60bb      	str	r3, [r7, #8]
    		 if( HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7 )== GPIO_PIN_SET)
 8001ba0:	e799      	b.n	8001ad6 <main+0x5e>
    		 }
  /* USER CODE END 3 */
}
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	08008214 	.word	0x08008214
 8001bb0:	200001e0 	.word	0x200001e0
 8001bb4:	08008218 	.word	0x08008218
 8001bb8:	200000a8 	.word	0x200000a8
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	08008238 	.word	0x08008238
 8001bc4:	08008240 	.word	0x08008240
 8001bc8:	08008248 	.word	0x08008248

08001bcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b094      	sub	sp, #80	; 0x50
 8001bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bd2:	f107 0320 	add.w	r3, r7, #32
 8001bd6:	2230      	movs	r2, #48	; 0x30
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f005 fe24 	bl	8007828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001be0:	f107 030c 	add.w	r3, r7, #12
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	4b27      	ldr	r3, [pc, #156]	; (8001c94 <SystemClock_Config+0xc8>)
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	4a26      	ldr	r2, [pc, #152]	; (8001c94 <SystemClock_Config+0xc8>)
 8001bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	6413      	str	r3, [r2, #64]	; 0x40
 8001c00:	4b24      	ldr	r3, [pc, #144]	; (8001c94 <SystemClock_Config+0xc8>)
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	607b      	str	r3, [r7, #4]
 8001c10:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <SystemClock_Config+0xcc>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a20      	ldr	r2, [pc, #128]	; (8001c98 <SystemClock_Config+0xcc>)
 8001c16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <SystemClock_Config+0xcc>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c32:	2302      	movs	r3, #2
 8001c34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c3c:	2304      	movs	r3, #4
 8001c3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001c40:	2390      	movs	r3, #144	; 0x90
 8001c42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c44:	2304      	movs	r3, #4
 8001c46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c48:	2304      	movs	r3, #4
 8001c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c4c:	f107 0320 	add.w	r3, r7, #32
 8001c50:	4618      	mov	r0, r3
 8001c52:	f001 fa11 	bl	8003078 <HAL_RCC_OscConfig>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c5c:	f000 f948 	bl	8001ef0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c60:	230f      	movs	r3, #15
 8001c62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c64:	2302      	movs	r3, #2
 8001c66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c76:	f107 030c 	add.w	r3, r7, #12
 8001c7a:	2102      	movs	r1, #2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f001 fc73 	bl	8003568 <HAL_RCC_ClockConfig>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c88:	f000 f932 	bl	8001ef0 <Error_Handler>
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	3750      	adds	r7, #80	; 0x50
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40007000 	.word	0x40007000

08001c9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ca0:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <MX_SPI1_Init+0x64>)
 8001ca2:	4a18      	ldr	r2, [pc, #96]	; (8001d04 <MX_SPI1_Init+0x68>)
 8001ca4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ca6:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <MX_SPI1_Init+0x64>)
 8001ca8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cae:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <MX_SPI1_Init+0x64>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cb4:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <MX_SPI1_Init+0x64>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cba:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <MX_SPI1_Init+0x64>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cc0:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <MX_SPI1_Init+0x64>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <MX_SPI1_Init+0x64>)
 8001cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ccc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <MX_SPI1_Init+0x64>)
 8001cd0:	2208      	movs	r2, #8
 8001cd2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cd4:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <MX_SPI1_Init+0x64>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cda:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <MX_SPI1_Init+0x64>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ce0:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <MX_SPI1_Init+0x64>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <MX_SPI1_Init+0x64>)
 8001ce8:	220a      	movs	r2, #10
 8001cea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cec:	4804      	ldr	r0, [pc, #16]	; (8001d00 <MX_SPI1_Init+0x64>)
 8001cee:	f001 fe27 	bl	8003940 <HAL_SPI_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001cf8:	f000 f8fa 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	200000d0 	.word	0x200000d0
 8001d04:	40013000 	.word	0x40013000

08001d08 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d0c:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <MX_SPI2_Init+0x64>)
 8001d0e:	4a18      	ldr	r2, [pc, #96]	; (8001d70 <MX_SPI2_Init+0x68>)
 8001d10:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d12:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <MX_SPI2_Init+0x64>)
 8001d14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d18:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d1a:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <MX_SPI2_Init+0x64>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <MX_SPI2_Init+0x64>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <MX_SPI2_Init+0x64>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <MX_SPI2_Init+0x64>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <MX_SPI2_Init+0x64>)
 8001d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d38:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <MX_SPI2_Init+0x64>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d40:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <MX_SPI2_Init+0x64>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <MX_SPI2_Init+0x64>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d4c:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <MX_SPI2_Init+0x64>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <MX_SPI2_Init+0x64>)
 8001d54:	220a      	movs	r2, #10
 8001d56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d58:	4804      	ldr	r0, [pc, #16]	; (8001d6c <MX_SPI2_Init+0x64>)
 8001d5a:	f001 fdf1 	bl	8003940 <HAL_SPI_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d64:	f000 f8c4 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d68:	bf00      	nop
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000128 	.word	0x20000128
 8001d70:	40003800 	.word	0x40003800

08001d74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <MX_DMA_Init+0x3c>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a0b      	ldr	r2, [pc, #44]	; (8001db0 <MX_DMA_Init+0x3c>)
 8001d84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <MX_DMA_Init+0x3c>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2100      	movs	r1, #0
 8001d9a:	203b      	movs	r0, #59	; 0x3b
 8001d9c:	f000 fbf7 	bl	800258e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001da0:	203b      	movs	r0, #59	; 0x3b
 8001da2:	f000 fc10 	bl	80025c6 <HAL_NVIC_EnableIRQ>

}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800

08001db4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	; 0x28
 8001db8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dba:	f107 0314 	add.w	r3, r7, #20
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	60da      	str	r2, [r3, #12]
 8001dc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	4b43      	ldr	r3, [pc, #268]	; (8001edc <MX_GPIO_Init+0x128>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a42      	ldr	r2, [pc, #264]	; (8001edc <MX_GPIO_Init+0x128>)
 8001dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b40      	ldr	r3, [pc, #256]	; (8001edc <MX_GPIO_Init+0x128>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	4b3c      	ldr	r3, [pc, #240]	; (8001edc <MX_GPIO_Init+0x128>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a3b      	ldr	r2, [pc, #236]	; (8001edc <MX_GPIO_Init+0x128>)
 8001df0:	f043 0304 	orr.w	r3, r3, #4
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b39      	ldr	r3, [pc, #228]	; (8001edc <MX_GPIO_Init+0x128>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	4b35      	ldr	r3, [pc, #212]	; (8001edc <MX_GPIO_Init+0x128>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a34      	ldr	r2, [pc, #208]	; (8001edc <MX_GPIO_Init+0x128>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b32      	ldr	r3, [pc, #200]	; (8001edc <MX_GPIO_Init+0x128>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	607b      	str	r3, [r7, #4]
 8001e22:	4b2e      	ldr	r3, [pc, #184]	; (8001edc <MX_GPIO_Init+0x128>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a2d      	ldr	r2, [pc, #180]	; (8001edc <MX_GPIO_Init+0x128>)
 8001e28:	f043 0302 	orr.w	r3, r3, #2
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b2b      	ldr	r3, [pc, #172]	; (8001edc <MX_GPIO_Init+0x128>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	603b      	str	r3, [r7, #0]
 8001e3e:	4b27      	ldr	r3, [pc, #156]	; (8001edc <MX_GPIO_Init+0x128>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a26      	ldr	r2, [pc, #152]	; (8001edc <MX_GPIO_Init+0x128>)
 8001e44:	f043 0310 	orr.w	r3, r3, #16
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b24      	ldr	r3, [pc, #144]	; (8001edc <MX_GPIO_Init+0x128>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0310 	and.w	r3, r3, #16
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_CS_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2132      	movs	r1, #50	; 0x32
 8001e5a:	4821      	ldr	r0, [pc, #132]	; (8001ee0 <MX_GPIO_Init+0x12c>)
 8001e5c:	f001 f8f2 	bl	8003044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001e60:	2200      	movs	r2, #0
 8001e62:	2110      	movs	r1, #16
 8001e64:	481f      	ldr	r0, [pc, #124]	; (8001ee4 <MX_GPIO_Init+0x130>)
 8001e66:	f001 f8ed 	bl	8003044 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SD_CS_Pin PC4 PC5 */
  GPIO_InitStruct.Pin = SD_CS_Pin|GPIO_PIN_4|GPIO_PIN_5;
 8001e6a:	2332      	movs	r3, #50	; 0x32
 8001e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e76:	2300      	movs	r3, #0
 8001e78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4817      	ldr	r0, [pc, #92]	; (8001ee0 <MX_GPIO_Init+0x12c>)
 8001e82:	f000 ff2b 	bl	8002cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e86:	2310      	movs	r3, #16
 8001e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e96:	f107 0314 	add.w	r3, r7, #20
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4811      	ldr	r0, [pc, #68]	; (8001ee4 <MX_GPIO_Init+0x130>)
 8001e9e:	f000 ff1d 	bl	8002cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480c      	ldr	r0, [pc, #48]	; (8001ee8 <MX_GPIO_Init+0x134>)
 8001eb6:	f000 ff11 	bl	8002cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ec6:	f107 0314 	add.w	r3, r7, #20
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4807      	ldr	r0, [pc, #28]	; (8001eec <MX_GPIO_Init+0x138>)
 8001ece:	f000 ff05 	bl	8002cdc <HAL_GPIO_Init>

}
 8001ed2:	bf00      	nop
 8001ed4:	3728      	adds	r7, #40	; 0x28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020800 	.word	0x40020800
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	40020400 	.word	0x40020400
 8001eec:	40021000 	.word	0x40021000

08001ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef4:	b672      	cpsid	i
}
 8001ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <Error_Handler+0x8>
	...

08001efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	607b      	str	r3, [r7, #4]
 8001f06:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <HAL_MspInit+0x4c>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	4a0f      	ldr	r2, [pc, #60]	; (8001f48 <HAL_MspInit+0x4c>)
 8001f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f10:	6453      	str	r3, [r2, #68]	; 0x44
 8001f12:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <HAL_MspInit+0x4c>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	603b      	str	r3, [r7, #0]
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <HAL_MspInit+0x4c>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	4a08      	ldr	r2, [pc, #32]	; (8001f48 <HAL_MspInit+0x4c>)
 8001f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_MspInit+0x4c>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40023800 	.word	0x40023800

08001f4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08c      	sub	sp, #48	; 0x30
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f54:	f107 031c 	add.w	r3, r7, #28
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a59      	ldr	r2, [pc, #356]	; (80020d0 <HAL_SPI_MspInit+0x184>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d15b      	bne.n	8002026 <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61bb      	str	r3, [r7, #24]
 8001f72:	4b58      	ldr	r3, [pc, #352]	; (80020d4 <HAL_SPI_MspInit+0x188>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	4a57      	ldr	r2, [pc, #348]	; (80020d4 <HAL_SPI_MspInit+0x188>)
 8001f78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7e:	4b55      	ldr	r3, [pc, #340]	; (80020d4 <HAL_SPI_MspInit+0x188>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f86:	61bb      	str	r3, [r7, #24]
 8001f88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	4b51      	ldr	r3, [pc, #324]	; (80020d4 <HAL_SPI_MspInit+0x188>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4a50      	ldr	r2, [pc, #320]	; (80020d4 <HAL_SPI_MspInit+0x188>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4b4e      	ldr	r3, [pc, #312]	; (80020d4 <HAL_SPI_MspInit+0x188>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001fa6:	23e0      	movs	r3, #224	; 0xe0
 8001fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001faa:	2302      	movs	r3, #2
 8001fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fb6:	2305      	movs	r3, #5
 8001fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fba:	f107 031c 	add.w	r3, r7, #28
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4845      	ldr	r0, [pc, #276]	; (80020d8 <HAL_SPI_MspInit+0x18c>)
 8001fc2:	f000 fe8b 	bl	8002cdc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001fc6:	4b45      	ldr	r3, [pc, #276]	; (80020dc <HAL_SPI_MspInit+0x190>)
 8001fc8:	4a45      	ldr	r2, [pc, #276]	; (80020e0 <HAL_SPI_MspInit+0x194>)
 8001fca:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001fcc:	4b43      	ldr	r3, [pc, #268]	; (80020dc <HAL_SPI_MspInit+0x190>)
 8001fce:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001fd2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fd4:	4b41      	ldr	r3, [pc, #260]	; (80020dc <HAL_SPI_MspInit+0x190>)
 8001fd6:	2240      	movs	r2, #64	; 0x40
 8001fd8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fda:	4b40      	ldr	r3, [pc, #256]	; (80020dc <HAL_SPI_MspInit+0x190>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fe0:	4b3e      	ldr	r3, [pc, #248]	; (80020dc <HAL_SPI_MspInit+0x190>)
 8001fe2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fe6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fe8:	4b3c      	ldr	r3, [pc, #240]	; (80020dc <HAL_SPI_MspInit+0x190>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fee:	4b3b      	ldr	r3, [pc, #236]	; (80020dc <HAL_SPI_MspInit+0x190>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001ff4:	4b39      	ldr	r3, [pc, #228]	; (80020dc <HAL_SPI_MspInit+0x190>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ffa:	4b38      	ldr	r3, [pc, #224]	; (80020dc <HAL_SPI_MspInit+0x190>)
 8001ffc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002000:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002002:	4b36      	ldr	r3, [pc, #216]	; (80020dc <HAL_SPI_MspInit+0x190>)
 8002004:	2200      	movs	r2, #0
 8002006:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002008:	4834      	ldr	r0, [pc, #208]	; (80020dc <HAL_SPI_MspInit+0x190>)
 800200a:	f000 faf7 	bl	80025fc <HAL_DMA_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002014:	f7ff ff6c 	bl	8001ef0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a30      	ldr	r2, [pc, #192]	; (80020dc <HAL_SPI_MspInit+0x190>)
 800201c:	649a      	str	r2, [r3, #72]	; 0x48
 800201e:	4a2f      	ldr	r2, [pc, #188]	; (80020dc <HAL_SPI_MspInit+0x190>)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002024:	e04f      	b.n	80020c6 <HAL_SPI_MspInit+0x17a>
  else if(hspi->Instance==SPI2)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a2e      	ldr	r2, [pc, #184]	; (80020e4 <HAL_SPI_MspInit+0x198>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d14a      	bne.n	80020c6 <HAL_SPI_MspInit+0x17a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002030:	2300      	movs	r3, #0
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	4b27      	ldr	r3, [pc, #156]	; (80020d4 <HAL_SPI_MspInit+0x188>)
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	4a26      	ldr	r2, [pc, #152]	; (80020d4 <HAL_SPI_MspInit+0x188>)
 800203a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800203e:	6413      	str	r3, [r2, #64]	; 0x40
 8002040:	4b24      	ldr	r3, [pc, #144]	; (80020d4 <HAL_SPI_MspInit+0x188>)
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	4b20      	ldr	r3, [pc, #128]	; (80020d4 <HAL_SPI_MspInit+0x188>)
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	4a1f      	ldr	r2, [pc, #124]	; (80020d4 <HAL_SPI_MspInit+0x188>)
 8002056:	f043 0304 	orr.w	r3, r3, #4
 800205a:	6313      	str	r3, [r2, #48]	; 0x30
 800205c:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <HAL_SPI_MspInit+0x188>)
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002068:	2300      	movs	r3, #0
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <HAL_SPI_MspInit+0x188>)
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	4a18      	ldr	r2, [pc, #96]	; (80020d4 <HAL_SPI_MspInit+0x188>)
 8002072:	f043 0302 	orr.w	r3, r3, #2
 8002076:	6313      	str	r3, [r2, #48]	; 0x30
 8002078:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <HAL_SPI_MspInit+0x188>)
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002084:	230c      	movs	r3, #12
 8002086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002088:	2302      	movs	r3, #2
 800208a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002090:	2303      	movs	r3, #3
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002094:	2305      	movs	r3, #5
 8002096:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002098:	f107 031c 	add.w	r3, r7, #28
 800209c:	4619      	mov	r1, r3
 800209e:	4812      	ldr	r0, [pc, #72]	; (80020e8 <HAL_SPI_MspInit+0x19c>)
 80020a0:	f000 fe1c 	bl	8002cdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2302      	movs	r3, #2
 80020ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b2:	2303      	movs	r3, #3
 80020b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020b6:	2305      	movs	r3, #5
 80020b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ba:	f107 031c 	add.w	r3, r7, #28
 80020be:	4619      	mov	r1, r3
 80020c0:	480a      	ldr	r0, [pc, #40]	; (80020ec <HAL_SPI_MspInit+0x1a0>)
 80020c2:	f000 fe0b 	bl	8002cdc <HAL_GPIO_Init>
}
 80020c6:	bf00      	nop
 80020c8:	3730      	adds	r7, #48	; 0x30
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40013000 	.word	0x40013000
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40020000 	.word	0x40020000
 80020dc:	20000180 	.word	0x20000180
 80020e0:	40026458 	.word	0x40026458
 80020e4:	40003800 	.word	0x40003800
 80020e8:	40020800 	.word	0x40020800
 80020ec:	40020400 	.word	0x40020400

080020f0 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;
void SDTimer_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80020f4:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <SDTimer_Handler+0x40>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d006      	beq.n	800210c <SDTimer_Handler+0x1c>
    Timer1--;
 80020fe:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <SDTimer_Handler+0x40>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	3b01      	subs	r3, #1
 8002106:	b2da      	uxtb	r2, r3
 8002108:	4b09      	ldr	r3, [pc, #36]	; (8002130 <SDTimer_Handler+0x40>)
 800210a:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 800210c:	4b09      	ldr	r3, [pc, #36]	; (8002134 <SDTimer_Handler+0x44>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d006      	beq.n	8002124 <SDTimer_Handler+0x34>
	  Timer2--;
 8002116:	4b07      	ldr	r3, [pc, #28]	; (8002134 <SDTimer_Handler+0x44>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	3b01      	subs	r3, #1
 800211e:	b2da      	uxtb	r2, r3
 8002120:	4b04      	ldr	r3, [pc, #16]	; (8002134 <SDTimer_Handler+0x44>)
 8002122:	701a      	strb	r2, [r3, #0]
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	20001219 	.word	0x20001219
 8002134:	2000121a 	.word	0x2000121a

08002138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800213c:	e7fe      	b.n	800213c <NMI_Handler+0x4>

0800213e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002142:	e7fe      	b.n	8002142 <HardFault_Handler+0x4>

08002144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002148:	e7fe      	b.n	8002148 <MemManage_Handler+0x4>

0800214a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800214e:	e7fe      	b.n	800214e <BusFault_Handler+0x4>

08002150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002154:	e7fe      	b.n	8002154 <UsageFault_Handler+0x4>

08002156 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002184:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <SysTick_Handler+0x30>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	3301      	adds	r3, #1
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <SysTick_Handler+0x30>)
 8002190:	701a      	strb	r2, [r3, #0]
		  if(FatFsCnt >= 10)
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <SysTick_Handler+0x30>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b09      	cmp	r3, #9
 800219a:	d904      	bls.n	80021a6 <SysTick_Handler+0x26>
		  {
		    FatFsCnt = 0;
 800219c:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <SysTick_Handler+0x30>)
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]
		    SDTimer_Handler();
 80021a2:	f7ff ffa5 	bl	80020f0 <SDTimer_Handler>
		  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a6:	f000 f8d3 	bl	8002350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20001218 	.word	0x20001218

080021b4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80021b8:	4802      	ldr	r0, [pc, #8]	; (80021c4 <DMA2_Stream3_IRQHandler+0x10>)
 80021ba:	f000 fb25 	bl	8002808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000180 	.word	0x20000180

080021c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d0:	4a14      	ldr	r2, [pc, #80]	; (8002224 <_sbrk+0x5c>)
 80021d2:	4b15      	ldr	r3, [pc, #84]	; (8002228 <_sbrk+0x60>)
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021dc:	4b13      	ldr	r3, [pc, #76]	; (800222c <_sbrk+0x64>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d102      	bne.n	80021ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <_sbrk+0x64>)
 80021e6:	4a12      	ldr	r2, [pc, #72]	; (8002230 <_sbrk+0x68>)
 80021e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ea:	4b10      	ldr	r3, [pc, #64]	; (800222c <_sbrk+0x64>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d207      	bcs.n	8002208 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021f8:	f005 faec 	bl	80077d4 <__errno>
 80021fc:	4603      	mov	r3, r0
 80021fe:	220c      	movs	r2, #12
 8002200:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002202:	f04f 33ff 	mov.w	r3, #4294967295
 8002206:	e009      	b.n	800221c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <_sbrk+0x64>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800220e:	4b07      	ldr	r3, [pc, #28]	; (800222c <_sbrk+0x64>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	4a05      	ldr	r2, [pc, #20]	; (800222c <_sbrk+0x64>)
 8002218:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800221a:	68fb      	ldr	r3, [r7, #12]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20020000 	.word	0x20020000
 8002228:	00000400 	.word	0x00000400
 800222c:	2000121c 	.word	0x2000121c
 8002230:	20001470 	.word	0x20001470

08002234 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <SystemInit+0x20>)
 800223a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223e:	4a05      	ldr	r2, [pc, #20]	; (8002254 <SystemInit+0x20>)
 8002240:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002244:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002258:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002290 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800225c:	480d      	ldr	r0, [pc, #52]	; (8002294 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800225e:	490e      	ldr	r1, [pc, #56]	; (8002298 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002260:	4a0e      	ldr	r2, [pc, #56]	; (800229c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002264:	e002      	b.n	800226c <LoopCopyDataInit>

08002266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800226a:	3304      	adds	r3, #4

0800226c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800226c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800226e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002270:	d3f9      	bcc.n	8002266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002272:	4a0b      	ldr	r2, [pc, #44]	; (80022a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002274:	4c0b      	ldr	r4, [pc, #44]	; (80022a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002278:	e001      	b.n	800227e <LoopFillZerobss>

0800227a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800227a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800227c:	3204      	adds	r2, #4

0800227e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800227e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002280:	d3fb      	bcc.n	800227a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002282:	f7ff ffd7 	bl	8002234 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002286:	f005 faab 	bl	80077e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800228a:	f7ff fbf5 	bl	8001a78 <main>
  bx  lr    
 800228e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002290:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002298:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800229c:	0800873c 	.word	0x0800873c
  ldr r2, =_sbss
 80022a0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80022a4:	20001470 	.word	0x20001470

080022a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022a8:	e7fe      	b.n	80022a8 <ADC_IRQHandler>
	...

080022ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022b0:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <HAL_Init+0x40>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a0d      	ldr	r2, [pc, #52]	; (80022ec <HAL_Init+0x40>)
 80022b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <HAL_Init+0x40>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <HAL_Init+0x40>)
 80022c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022c8:	4b08      	ldr	r3, [pc, #32]	; (80022ec <HAL_Init+0x40>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a07      	ldr	r2, [pc, #28]	; (80022ec <HAL_Init+0x40>)
 80022ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d4:	2003      	movs	r0, #3
 80022d6:	f000 f94f 	bl	8002578 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022da:	200f      	movs	r0, #15
 80022dc:	f000 f808 	bl	80022f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022e0:	f7ff fe0c 	bl	8001efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40023c00 	.word	0x40023c00

080022f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022f8:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_InitTick+0x54>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b12      	ldr	r3, [pc, #72]	; (8002348 <HAL_InitTick+0x58>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	4619      	mov	r1, r3
 8002302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002306:	fbb3 f3f1 	udiv	r3, r3, r1
 800230a:	fbb2 f3f3 	udiv	r3, r2, r3
 800230e:	4618      	mov	r0, r3
 8002310:	f000 f967 	bl	80025e2 <HAL_SYSTICK_Config>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e00e      	b.n	800233c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b0f      	cmp	r3, #15
 8002322:	d80a      	bhi.n	800233a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002324:	2200      	movs	r2, #0
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	f04f 30ff 	mov.w	r0, #4294967295
 800232c:	f000 f92f 	bl	800258e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002330:	4a06      	ldr	r2, [pc, #24]	; (800234c <HAL_InitTick+0x5c>)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	e000      	b.n	800233c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20000004 	.word	0x20000004
 8002348:	2000000c 	.word	0x2000000c
 800234c:	20000008 	.word	0x20000008

08002350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_IncTick+0x20>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	461a      	mov	r2, r3
 800235a:	4b06      	ldr	r3, [pc, #24]	; (8002374 <HAL_IncTick+0x24>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4413      	add	r3, r2
 8002360:	4a04      	ldr	r2, [pc, #16]	; (8002374 <HAL_IncTick+0x24>)
 8002362:	6013      	str	r3, [r2, #0]
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	2000000c 	.word	0x2000000c
 8002374:	20001220 	.word	0x20001220

08002378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return uwTick;
 800237c:	4b03      	ldr	r3, [pc, #12]	; (800238c <HAL_GetTick+0x14>)
 800237e:	681b      	ldr	r3, [r3, #0]
}
 8002380:	4618      	mov	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20001220 	.word	0x20001220

08002390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002398:	f7ff ffee 	bl	8002378 <HAL_GetTick>
 800239c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a8:	d005      	beq.n	80023b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023aa:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <HAL_Delay+0x44>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4413      	add	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023b6:	bf00      	nop
 80023b8:	f7ff ffde 	bl	8002378 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d8f7      	bhi.n	80023b8 <HAL_Delay+0x28>
  {
  }
}
 80023c8:	bf00      	nop
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	2000000c 	.word	0x2000000c

080023d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <__NVIC_SetPriorityGrouping+0x44>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023f4:	4013      	ands	r3, r2
 80023f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800240a:	4a04      	ldr	r2, [pc, #16]	; (800241c <__NVIC_SetPriorityGrouping+0x44>)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	60d3      	str	r3, [r2, #12]
}
 8002410:	bf00      	nop
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002424:	4b04      	ldr	r3, [pc, #16]	; (8002438 <__NVIC_GetPriorityGrouping+0x18>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	0a1b      	lsrs	r3, r3, #8
 800242a:	f003 0307 	and.w	r3, r3, #7
}
 800242e:	4618      	mov	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	2b00      	cmp	r3, #0
 800244c:	db0b      	blt.n	8002466 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	f003 021f 	and.w	r2, r3, #31
 8002454:	4907      	ldr	r1, [pc, #28]	; (8002474 <__NVIC_EnableIRQ+0x38>)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	095b      	lsrs	r3, r3, #5
 800245c:	2001      	movs	r0, #1
 800245e:	fa00 f202 	lsl.w	r2, r0, r2
 8002462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	e000e100 	.word	0xe000e100

08002478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	6039      	str	r1, [r7, #0]
 8002482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002488:	2b00      	cmp	r3, #0
 800248a:	db0a      	blt.n	80024a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	b2da      	uxtb	r2, r3
 8002490:	490c      	ldr	r1, [pc, #48]	; (80024c4 <__NVIC_SetPriority+0x4c>)
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	0112      	lsls	r2, r2, #4
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	440b      	add	r3, r1
 800249c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024a0:	e00a      	b.n	80024b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4908      	ldr	r1, [pc, #32]	; (80024c8 <__NVIC_SetPriority+0x50>)
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	3b04      	subs	r3, #4
 80024b0:	0112      	lsls	r2, r2, #4
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	440b      	add	r3, r1
 80024b6:	761a      	strb	r2, [r3, #24]
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	e000e100 	.word	0xe000e100
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b089      	sub	sp, #36	; 0x24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f1c3 0307 	rsb	r3, r3, #7
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	bf28      	it	cs
 80024ea:	2304      	movcs	r3, #4
 80024ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	3304      	adds	r3, #4
 80024f2:	2b06      	cmp	r3, #6
 80024f4:	d902      	bls.n	80024fc <NVIC_EncodePriority+0x30>
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3b03      	subs	r3, #3
 80024fa:	e000      	b.n	80024fe <NVIC_EncodePriority+0x32>
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002500:	f04f 32ff 	mov.w	r2, #4294967295
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43da      	mvns	r2, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	401a      	ands	r2, r3
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002514:	f04f 31ff 	mov.w	r1, #4294967295
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	fa01 f303 	lsl.w	r3, r1, r3
 800251e:	43d9      	mvns	r1, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002524:	4313      	orrs	r3, r2
         );
}
 8002526:	4618      	mov	r0, r3
 8002528:	3724      	adds	r7, #36	; 0x24
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
	...

08002534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3b01      	subs	r3, #1
 8002540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002544:	d301      	bcc.n	800254a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002546:	2301      	movs	r3, #1
 8002548:	e00f      	b.n	800256a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800254a:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <SysTick_Config+0x40>)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3b01      	subs	r3, #1
 8002550:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002552:	210f      	movs	r1, #15
 8002554:	f04f 30ff 	mov.w	r0, #4294967295
 8002558:	f7ff ff8e 	bl	8002478 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <SysTick_Config+0x40>)
 800255e:	2200      	movs	r2, #0
 8002560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002562:	4b04      	ldr	r3, [pc, #16]	; (8002574 <SysTick_Config+0x40>)
 8002564:	2207      	movs	r2, #7
 8002566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	e000e010 	.word	0xe000e010

08002578 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff ff29 	bl	80023d8 <__NVIC_SetPriorityGrouping>
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800258e:	b580      	push	{r7, lr}
 8002590:	b086      	sub	sp, #24
 8002592:	af00      	add	r7, sp, #0
 8002594:	4603      	mov	r3, r0
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025a0:	f7ff ff3e 	bl	8002420 <__NVIC_GetPriorityGrouping>
 80025a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	68b9      	ldr	r1, [r7, #8]
 80025aa:	6978      	ldr	r0, [r7, #20]
 80025ac:	f7ff ff8e 	bl	80024cc <NVIC_EncodePriority>
 80025b0:	4602      	mov	r2, r0
 80025b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b6:	4611      	mov	r1, r2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ff5d 	bl	8002478 <__NVIC_SetPriority>
}
 80025be:	bf00      	nop
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	4603      	mov	r3, r0
 80025ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ff31 	bl	800243c <__NVIC_EnableIRQ>
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff ffa2 	bl	8002534 <SysTick_Config>
 80025f0:	4603      	mov	r3, r0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002608:	f7ff feb6 	bl	8002378 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e099      	b.n	800274c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2202      	movs	r2, #2
 800261c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0201 	bic.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002638:	e00f      	b.n	800265a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800263a:	f7ff fe9d 	bl	8002378 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b05      	cmp	r3, #5
 8002646:	d908      	bls.n	800265a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2220      	movs	r2, #32
 800264c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2203      	movs	r2, #3
 8002652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e078      	b.n	800274c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1e8      	bne.n	800263a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	4b38      	ldr	r3, [pc, #224]	; (8002754 <HAL_DMA_Init+0x158>)
 8002674:	4013      	ands	r3, r2
 8002676:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002686:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002692:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800269e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d107      	bne.n	80026c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	4313      	orrs	r3, r2
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f023 0307 	bic.w	r3, r3, #7
 80026da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d117      	bne.n	800271e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00e      	beq.n	800271e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 fa6f 	bl	8002be4 <DMA_CheckFifoParam>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d008      	beq.n	800271e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2240      	movs	r2, #64	; 0x40
 8002710:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800271a:	2301      	movs	r3, #1
 800271c:	e016      	b.n	800274c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fa26 	bl	8002b78 <DMA_CalcBaseAndBitshift>
 800272c:	4603      	mov	r3, r0
 800272e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002734:	223f      	movs	r2, #63	; 0x3f
 8002736:	409a      	lsls	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	f010803f 	.word	0xf010803f

08002758 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
 8002764:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_DMA_Start_IT+0x26>
 800277a:	2302      	movs	r3, #2
 800277c:	e040      	b.n	8002800 <HAL_DMA_Start_IT+0xa8>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b01      	cmp	r3, #1
 8002790:	d12f      	bne.n	80027f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2202      	movs	r2, #2
 8002796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 f9b8 	bl	8002b1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b0:	223f      	movs	r2, #63	; 0x3f
 80027b2:	409a      	lsls	r2, r3
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0216 	orr.w	r2, r2, #22
 80027c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d007      	beq.n	80027e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0208 	orr.w	r2, r2, #8
 80027de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	e005      	b.n	80027fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027fa:	2302      	movs	r3, #2
 80027fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002814:	4b8e      	ldr	r3, [pc, #568]	; (8002a50 <HAL_DMA_IRQHandler+0x248>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a8e      	ldr	r2, [pc, #568]	; (8002a54 <HAL_DMA_IRQHandler+0x24c>)
 800281a:	fba2 2303 	umull	r2, r3, r2, r3
 800281e:	0a9b      	lsrs	r3, r3, #10
 8002820:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002826:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002832:	2208      	movs	r2, #8
 8002834:	409a      	lsls	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4013      	ands	r3, r2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d01a      	beq.n	8002874 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d013      	beq.n	8002874 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0204 	bic.w	r2, r2, #4
 800285a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002860:	2208      	movs	r2, #8
 8002862:	409a      	lsls	r2, r3
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286c:	f043 0201 	orr.w	r2, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002878:	2201      	movs	r2, #1
 800287a:	409a      	lsls	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4013      	ands	r3, r2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d012      	beq.n	80028aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00b      	beq.n	80028aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002896:	2201      	movs	r2, #1
 8002898:	409a      	lsls	r2, r3
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a2:	f043 0202 	orr.w	r2, r3, #2
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ae:	2204      	movs	r2, #4
 80028b0:	409a      	lsls	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d012      	beq.n	80028e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00b      	beq.n	80028e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028cc:	2204      	movs	r2, #4
 80028ce:	409a      	lsls	r2, r3
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d8:	f043 0204 	orr.w	r2, r3, #4
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e4:	2210      	movs	r2, #16
 80028e6:	409a      	lsls	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d043      	beq.n	8002978 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d03c      	beq.n	8002978 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002902:	2210      	movs	r2, #16
 8002904:	409a      	lsls	r2, r3
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d018      	beq.n	800294a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d108      	bne.n	8002938 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	2b00      	cmp	r3, #0
 800292c:	d024      	beq.n	8002978 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	4798      	blx	r3
 8002936:	e01f      	b.n	8002978 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800293c:	2b00      	cmp	r3, #0
 800293e:	d01b      	beq.n	8002978 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	4798      	blx	r3
 8002948:	e016      	b.n	8002978 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d107      	bne.n	8002968 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0208 	bic.w	r2, r2, #8
 8002966:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297c:	2220      	movs	r2, #32
 800297e:	409a      	lsls	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4013      	ands	r3, r2
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 808f 	beq.w	8002aa8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0310 	and.w	r3, r3, #16
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 8087 	beq.w	8002aa8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299e:	2220      	movs	r2, #32
 80029a0:	409a      	lsls	r2, r3
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b05      	cmp	r3, #5
 80029b0:	d136      	bne.n	8002a20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0216 	bic.w	r2, r2, #22
 80029c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695a      	ldr	r2, [r3, #20]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d103      	bne.n	80029e2 <HAL_DMA_IRQHandler+0x1da>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d007      	beq.n	80029f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0208 	bic.w	r2, r2, #8
 80029f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f6:	223f      	movs	r2, #63	; 0x3f
 80029f8:	409a      	lsls	r2, r3
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d07e      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	4798      	blx	r3
        }
        return;
 8002a1e:	e079      	b.n	8002b14 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d01d      	beq.n	8002a6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10d      	bne.n	8002a58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d031      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	4798      	blx	r3
 8002a4c:	e02c      	b.n	8002aa8 <HAL_DMA_IRQHandler+0x2a0>
 8002a4e:	bf00      	nop
 8002a50:	20000004 	.word	0x20000004
 8002a54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d023      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	4798      	blx	r3
 8002a68:	e01e      	b.n	8002aa8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10f      	bne.n	8002a98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0210 	bic.w	r2, r2, #16
 8002a86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d032      	beq.n	8002b16 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d022      	beq.n	8002b02 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2205      	movs	r2, #5
 8002ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0201 	bic.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d307      	bcc.n	8002af0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f2      	bne.n	8002ad4 <HAL_DMA_IRQHandler+0x2cc>
 8002aee:	e000      	b.n	8002af2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002af0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d005      	beq.n	8002b16 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	4798      	blx	r3
 8002b12:	e000      	b.n	8002b16 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b14:	bf00      	nop
    }
  }
}
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
 8002b28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2b40      	cmp	r3, #64	; 0x40
 8002b48:	d108      	bne.n	8002b5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b5a:	e007      	b.n	8002b6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	60da      	str	r2, [r3, #12]
}
 8002b6c:	bf00      	nop
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	3b10      	subs	r3, #16
 8002b88:	4a14      	ldr	r2, [pc, #80]	; (8002bdc <DMA_CalcBaseAndBitshift+0x64>)
 8002b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8e:	091b      	lsrs	r3, r3, #4
 8002b90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b92:	4a13      	ldr	r2, [pc, #76]	; (8002be0 <DMA_CalcBaseAndBitshift+0x68>)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4413      	add	r3, r2
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d909      	bls.n	8002bba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bae:	f023 0303 	bic.w	r3, r3, #3
 8002bb2:	1d1a      	adds	r2, r3, #4
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	659a      	str	r2, [r3, #88]	; 0x58
 8002bb8:	e007      	b.n	8002bca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bc2:	f023 0303 	bic.w	r3, r3, #3
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	aaaaaaab 	.word	0xaaaaaaab
 8002be0:	080082b0 	.word	0x080082b0

08002be4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d11f      	bne.n	8002c3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d856      	bhi.n	8002cb2 <DMA_CheckFifoParam+0xce>
 8002c04:	a201      	add	r2, pc, #4	; (adr r2, 8002c0c <DMA_CheckFifoParam+0x28>)
 8002c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0a:	bf00      	nop
 8002c0c:	08002c1d 	.word	0x08002c1d
 8002c10:	08002c2f 	.word	0x08002c2f
 8002c14:	08002c1d 	.word	0x08002c1d
 8002c18:	08002cb3 	.word	0x08002cb3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d046      	beq.n	8002cb6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c2c:	e043      	b.n	8002cb6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c36:	d140      	bne.n	8002cba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c3c:	e03d      	b.n	8002cba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c46:	d121      	bne.n	8002c8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d837      	bhi.n	8002cbe <DMA_CheckFifoParam+0xda>
 8002c4e:	a201      	add	r2, pc, #4	; (adr r2, 8002c54 <DMA_CheckFifoParam+0x70>)
 8002c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c54:	08002c65 	.word	0x08002c65
 8002c58:	08002c6b 	.word	0x08002c6b
 8002c5c:	08002c65 	.word	0x08002c65
 8002c60:	08002c7d 	.word	0x08002c7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	73fb      	strb	r3, [r7, #15]
      break;
 8002c68:	e030      	b.n	8002ccc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d025      	beq.n	8002cc2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c7a:	e022      	b.n	8002cc2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c84:	d11f      	bne.n	8002cc6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c8a:	e01c      	b.n	8002cc6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d903      	bls.n	8002c9a <DMA_CheckFifoParam+0xb6>
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	d003      	beq.n	8002ca0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c98:	e018      	b.n	8002ccc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c9e:	e015      	b.n	8002ccc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00e      	beq.n	8002cca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	73fb      	strb	r3, [r7, #15]
      break;
 8002cb0:	e00b      	b.n	8002cca <DMA_CheckFifoParam+0xe6>
      break;
 8002cb2:	bf00      	nop
 8002cb4:	e00a      	b.n	8002ccc <DMA_CheckFifoParam+0xe8>
      break;
 8002cb6:	bf00      	nop
 8002cb8:	e008      	b.n	8002ccc <DMA_CheckFifoParam+0xe8>
      break;
 8002cba:	bf00      	nop
 8002cbc:	e006      	b.n	8002ccc <DMA_CheckFifoParam+0xe8>
      break;
 8002cbe:	bf00      	nop
 8002cc0:	e004      	b.n	8002ccc <DMA_CheckFifoParam+0xe8>
      break;
 8002cc2:	bf00      	nop
 8002cc4:	e002      	b.n	8002ccc <DMA_CheckFifoParam+0xe8>
      break;   
 8002cc6:	bf00      	nop
 8002cc8:	e000      	b.n	8002ccc <DMA_CheckFifoParam+0xe8>
      break;
 8002cca:	bf00      	nop
    }
  } 
  
  return status; 
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop

08002cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b089      	sub	sp, #36	; 0x24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61fb      	str	r3, [r7, #28]
 8002cf6:	e16b      	b.n	8002fd0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	f040 815a 	bne.w	8002fca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d005      	beq.n	8002d2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d130      	bne.n	8002d90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	2203      	movs	r2, #3
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d64:	2201      	movs	r2, #1
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	091b      	lsrs	r3, r3, #4
 8002d7a:	f003 0201 	and.w	r2, r3, #1
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d017      	beq.n	8002dcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	2203      	movs	r2, #3
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d123      	bne.n	8002e20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	08da      	lsrs	r2, r3, #3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3208      	adds	r2, #8
 8002de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	220f      	movs	r2, #15
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	08da      	lsrs	r2, r3, #3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	3208      	adds	r2, #8
 8002e1a:	69b9      	ldr	r1, [r7, #24]
 8002e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 0203 	and.w	r2, r3, #3
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 80b4 	beq.w	8002fca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	4b60      	ldr	r3, [pc, #384]	; (8002fe8 <HAL_GPIO_Init+0x30c>)
 8002e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6a:	4a5f      	ldr	r2, [pc, #380]	; (8002fe8 <HAL_GPIO_Init+0x30c>)
 8002e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e70:	6453      	str	r3, [r2, #68]	; 0x44
 8002e72:	4b5d      	ldr	r3, [pc, #372]	; (8002fe8 <HAL_GPIO_Init+0x30c>)
 8002e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e7e:	4a5b      	ldr	r2, [pc, #364]	; (8002fec <HAL_GPIO_Init+0x310>)
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	089b      	lsrs	r3, r3, #2
 8002e84:	3302      	adds	r3, #2
 8002e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	220f      	movs	r2, #15
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a52      	ldr	r2, [pc, #328]	; (8002ff0 <HAL_GPIO_Init+0x314>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d02b      	beq.n	8002f02 <HAL_GPIO_Init+0x226>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a51      	ldr	r2, [pc, #324]	; (8002ff4 <HAL_GPIO_Init+0x318>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d025      	beq.n	8002efe <HAL_GPIO_Init+0x222>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a50      	ldr	r2, [pc, #320]	; (8002ff8 <HAL_GPIO_Init+0x31c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d01f      	beq.n	8002efa <HAL_GPIO_Init+0x21e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a4f      	ldr	r2, [pc, #316]	; (8002ffc <HAL_GPIO_Init+0x320>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d019      	beq.n	8002ef6 <HAL_GPIO_Init+0x21a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a4e      	ldr	r2, [pc, #312]	; (8003000 <HAL_GPIO_Init+0x324>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d013      	beq.n	8002ef2 <HAL_GPIO_Init+0x216>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a4d      	ldr	r2, [pc, #308]	; (8003004 <HAL_GPIO_Init+0x328>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00d      	beq.n	8002eee <HAL_GPIO_Init+0x212>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a4c      	ldr	r2, [pc, #304]	; (8003008 <HAL_GPIO_Init+0x32c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d007      	beq.n	8002eea <HAL_GPIO_Init+0x20e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a4b      	ldr	r2, [pc, #300]	; (800300c <HAL_GPIO_Init+0x330>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d101      	bne.n	8002ee6 <HAL_GPIO_Init+0x20a>
 8002ee2:	2307      	movs	r3, #7
 8002ee4:	e00e      	b.n	8002f04 <HAL_GPIO_Init+0x228>
 8002ee6:	2308      	movs	r3, #8
 8002ee8:	e00c      	b.n	8002f04 <HAL_GPIO_Init+0x228>
 8002eea:	2306      	movs	r3, #6
 8002eec:	e00a      	b.n	8002f04 <HAL_GPIO_Init+0x228>
 8002eee:	2305      	movs	r3, #5
 8002ef0:	e008      	b.n	8002f04 <HAL_GPIO_Init+0x228>
 8002ef2:	2304      	movs	r3, #4
 8002ef4:	e006      	b.n	8002f04 <HAL_GPIO_Init+0x228>
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e004      	b.n	8002f04 <HAL_GPIO_Init+0x228>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e002      	b.n	8002f04 <HAL_GPIO_Init+0x228>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <HAL_GPIO_Init+0x228>
 8002f02:	2300      	movs	r3, #0
 8002f04:	69fa      	ldr	r2, [r7, #28]
 8002f06:	f002 0203 	and.w	r2, r2, #3
 8002f0a:	0092      	lsls	r2, r2, #2
 8002f0c:	4093      	lsls	r3, r2
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f14:	4935      	ldr	r1, [pc, #212]	; (8002fec <HAL_GPIO_Init+0x310>)
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	089b      	lsrs	r3, r3, #2
 8002f1a:	3302      	adds	r3, #2
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f22:	4b3b      	ldr	r3, [pc, #236]	; (8003010 <HAL_GPIO_Init+0x334>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f46:	4a32      	ldr	r2, [pc, #200]	; (8003010 <HAL_GPIO_Init+0x334>)
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f4c:	4b30      	ldr	r3, [pc, #192]	; (8003010 <HAL_GPIO_Init+0x334>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f70:	4a27      	ldr	r2, [pc, #156]	; (8003010 <HAL_GPIO_Init+0x334>)
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f76:	4b26      	ldr	r3, [pc, #152]	; (8003010 <HAL_GPIO_Init+0x334>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4013      	ands	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f9a:	4a1d      	ldr	r2, [pc, #116]	; (8003010 <HAL_GPIO_Init+0x334>)
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fa0:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <HAL_GPIO_Init+0x334>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fc4:	4a12      	ldr	r2, [pc, #72]	; (8003010 <HAL_GPIO_Init+0x334>)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	61fb      	str	r3, [r7, #28]
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	2b0f      	cmp	r3, #15
 8002fd4:	f67f ae90 	bls.w	8002cf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fd8:	bf00      	nop
 8002fda:	bf00      	nop
 8002fdc:	3724      	adds	r7, #36	; 0x24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	40013800 	.word	0x40013800
 8002ff0:	40020000 	.word	0x40020000
 8002ff4:	40020400 	.word	0x40020400
 8002ff8:	40020800 	.word	0x40020800
 8002ffc:	40020c00 	.word	0x40020c00
 8003000:	40021000 	.word	0x40021000
 8003004:	40021400 	.word	0x40021400
 8003008:	40021800 	.word	0x40021800
 800300c:	40021c00 	.word	0x40021c00
 8003010:	40013c00 	.word	0x40013c00

08003014 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	887b      	ldrh	r3, [r7, #2]
 8003026:	4013      	ands	r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800302c:	2301      	movs	r3, #1
 800302e:	73fb      	strb	r3, [r7, #15]
 8003030:	e001      	b.n	8003036 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003032:	2300      	movs	r3, #0
 8003034:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003036:	7bfb      	ldrb	r3, [r7, #15]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	807b      	strh	r3, [r7, #2]
 8003050:	4613      	mov	r3, r2
 8003052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003054:	787b      	ldrb	r3, [r7, #1]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800305a:	887a      	ldrh	r2, [r7, #2]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003060:	e003      	b.n	800306a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003062:	887b      	ldrh	r3, [r7, #2]
 8003064:	041a      	lsls	r2, r3, #16
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	619a      	str	r2, [r3, #24]
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
	...

08003078 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e267      	b.n	800355a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d075      	beq.n	8003182 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003096:	4b88      	ldr	r3, [pc, #544]	; (80032b8 <HAL_RCC_OscConfig+0x240>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 030c 	and.w	r3, r3, #12
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d00c      	beq.n	80030bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030a2:	4b85      	ldr	r3, [pc, #532]	; (80032b8 <HAL_RCC_OscConfig+0x240>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d112      	bne.n	80030d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ae:	4b82      	ldr	r3, [pc, #520]	; (80032b8 <HAL_RCC_OscConfig+0x240>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030ba:	d10b      	bne.n	80030d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030bc:	4b7e      	ldr	r3, [pc, #504]	; (80032b8 <HAL_RCC_OscConfig+0x240>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d05b      	beq.n	8003180 <HAL_RCC_OscConfig+0x108>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d157      	bne.n	8003180 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e242      	b.n	800355a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030dc:	d106      	bne.n	80030ec <HAL_RCC_OscConfig+0x74>
 80030de:	4b76      	ldr	r3, [pc, #472]	; (80032b8 <HAL_RCC_OscConfig+0x240>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a75      	ldr	r2, [pc, #468]	; (80032b8 <HAL_RCC_OscConfig+0x240>)
 80030e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	e01d      	b.n	8003128 <HAL_RCC_OscConfig+0xb0>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030f4:	d10c      	bne.n	8003110 <HAL_RCC_OscConfig+0x98>
 80030f6:	4b70      	ldr	r3, [pc, #448]	; (80032b8 <HAL_RCC_OscConfig+0x240>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a6f      	ldr	r2, [pc, #444]	; (80032b8 <HAL_RCC_OscConfig+0x240>)
 80030fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	4b6d      	ldr	r3, [pc, #436]	; (80032b8 <HAL_RCC_OscConfig+0x240>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a6c      	ldr	r2, [pc, #432]	; (80032b8 <HAL_RCC_OscConfig+0x240>)
 8003108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	e00b      	b.n	8003128 <HAL_RCC_OscConfig+0xb0>
 8003110:	4b69      	ldr	r3, [pc, #420]	; (80032b8 <HAL_RCC_OscConfig+0x240>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a68      	ldr	r2, [pc, #416]	; (80032b8 <HAL_RCC_OscConfig+0x240>)
 8003116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	4b66      	ldr	r3, [pc, #408]	; (80032b8 <HAL_RCC_OscConfig+0x240>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a65      	ldr	r2, [pc, #404]	; (80032b8 <HAL_RCC_OscConfig+0x240>)
 8003122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003126:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d013      	beq.n	8003158 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7ff f922 	bl	8002378 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003138:	f7ff f91e 	bl	8002378 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	; 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e207      	b.n	800355a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314a:	4b5b      	ldr	r3, [pc, #364]	; (80032b8 <HAL_RCC_OscConfig+0x240>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0xc0>
 8003156:	e014      	b.n	8003182 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003158:	f7ff f90e 	bl	8002378 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003160:	f7ff f90a 	bl	8002378 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e1f3      	b.n	800355a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003172:	4b51      	ldr	r3, [pc, #324]	; (80032b8 <HAL_RCC_OscConfig+0x240>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0xe8>
 800317e:	e000      	b.n	8003182 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d063      	beq.n	8003256 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800318e:	4b4a      	ldr	r3, [pc, #296]	; (80032b8 <HAL_RCC_OscConfig+0x240>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 030c 	and.w	r3, r3, #12
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00b      	beq.n	80031b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800319a:	4b47      	ldr	r3, [pc, #284]	; (80032b8 <HAL_RCC_OscConfig+0x240>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d11c      	bne.n	80031e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031a6:	4b44      	ldr	r3, [pc, #272]	; (80032b8 <HAL_RCC_OscConfig+0x240>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d116      	bne.n	80031e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b2:	4b41      	ldr	r3, [pc, #260]	; (80032b8 <HAL_RCC_OscConfig+0x240>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d005      	beq.n	80031ca <HAL_RCC_OscConfig+0x152>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d001      	beq.n	80031ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e1c7      	b.n	800355a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ca:	4b3b      	ldr	r3, [pc, #236]	; (80032b8 <HAL_RCC_OscConfig+0x240>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	4937      	ldr	r1, [pc, #220]	; (80032b8 <HAL_RCC_OscConfig+0x240>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031de:	e03a      	b.n	8003256 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d020      	beq.n	800322a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031e8:	4b34      	ldr	r3, [pc, #208]	; (80032bc <HAL_RCC_OscConfig+0x244>)
 80031ea:	2201      	movs	r2, #1
 80031ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ee:	f7ff f8c3 	bl	8002378 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031f6:	f7ff f8bf 	bl	8002378 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e1a8      	b.n	800355a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003208:	4b2b      	ldr	r3, [pc, #172]	; (80032b8 <HAL_RCC_OscConfig+0x240>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0f0      	beq.n	80031f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003214:	4b28      	ldr	r3, [pc, #160]	; (80032b8 <HAL_RCC_OscConfig+0x240>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	4925      	ldr	r1, [pc, #148]	; (80032b8 <HAL_RCC_OscConfig+0x240>)
 8003224:	4313      	orrs	r3, r2
 8003226:	600b      	str	r3, [r1, #0]
 8003228:	e015      	b.n	8003256 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800322a:	4b24      	ldr	r3, [pc, #144]	; (80032bc <HAL_RCC_OscConfig+0x244>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7ff f8a2 	bl	8002378 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003238:	f7ff f89e 	bl	8002378 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e187      	b.n	800355a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800324a:	4b1b      	ldr	r3, [pc, #108]	; (80032b8 <HAL_RCC_OscConfig+0x240>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d036      	beq.n	80032d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d016      	beq.n	8003298 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800326a:	4b15      	ldr	r3, [pc, #84]	; (80032c0 <HAL_RCC_OscConfig+0x248>)
 800326c:	2201      	movs	r2, #1
 800326e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003270:	f7ff f882 	bl	8002378 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003278:	f7ff f87e 	bl	8002378 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e167      	b.n	800355a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800328a:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <HAL_RCC_OscConfig+0x240>)
 800328c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0f0      	beq.n	8003278 <HAL_RCC_OscConfig+0x200>
 8003296:	e01b      	b.n	80032d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003298:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <HAL_RCC_OscConfig+0x248>)
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800329e:	f7ff f86b 	bl	8002378 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a4:	e00e      	b.n	80032c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032a6:	f7ff f867 	bl	8002378 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d907      	bls.n	80032c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e150      	b.n	800355a <HAL_RCC_OscConfig+0x4e2>
 80032b8:	40023800 	.word	0x40023800
 80032bc:	42470000 	.word	0x42470000
 80032c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c4:	4b88      	ldr	r3, [pc, #544]	; (80034e8 <HAL_RCC_OscConfig+0x470>)
 80032c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1ea      	bne.n	80032a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 8097 	beq.w	800340c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032de:	2300      	movs	r3, #0
 80032e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032e2:	4b81      	ldr	r3, [pc, #516]	; (80034e8 <HAL_RCC_OscConfig+0x470>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10f      	bne.n	800330e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	4b7d      	ldr	r3, [pc, #500]	; (80034e8 <HAL_RCC_OscConfig+0x470>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	4a7c      	ldr	r2, [pc, #496]	; (80034e8 <HAL_RCC_OscConfig+0x470>)
 80032f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032fc:	6413      	str	r3, [r2, #64]	; 0x40
 80032fe:	4b7a      	ldr	r3, [pc, #488]	; (80034e8 <HAL_RCC_OscConfig+0x470>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003306:	60bb      	str	r3, [r7, #8]
 8003308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800330a:	2301      	movs	r3, #1
 800330c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330e:	4b77      	ldr	r3, [pc, #476]	; (80034ec <HAL_RCC_OscConfig+0x474>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003316:	2b00      	cmp	r3, #0
 8003318:	d118      	bne.n	800334c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800331a:	4b74      	ldr	r3, [pc, #464]	; (80034ec <HAL_RCC_OscConfig+0x474>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a73      	ldr	r2, [pc, #460]	; (80034ec <HAL_RCC_OscConfig+0x474>)
 8003320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003326:	f7ff f827 	bl	8002378 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800332e:	f7ff f823 	bl	8002378 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e10c      	b.n	800355a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003340:	4b6a      	ldr	r3, [pc, #424]	; (80034ec <HAL_RCC_OscConfig+0x474>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0f0      	beq.n	800332e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d106      	bne.n	8003362 <HAL_RCC_OscConfig+0x2ea>
 8003354:	4b64      	ldr	r3, [pc, #400]	; (80034e8 <HAL_RCC_OscConfig+0x470>)
 8003356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003358:	4a63      	ldr	r2, [pc, #396]	; (80034e8 <HAL_RCC_OscConfig+0x470>)
 800335a:	f043 0301 	orr.w	r3, r3, #1
 800335e:	6713      	str	r3, [r2, #112]	; 0x70
 8003360:	e01c      	b.n	800339c <HAL_RCC_OscConfig+0x324>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	2b05      	cmp	r3, #5
 8003368:	d10c      	bne.n	8003384 <HAL_RCC_OscConfig+0x30c>
 800336a:	4b5f      	ldr	r3, [pc, #380]	; (80034e8 <HAL_RCC_OscConfig+0x470>)
 800336c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336e:	4a5e      	ldr	r2, [pc, #376]	; (80034e8 <HAL_RCC_OscConfig+0x470>)
 8003370:	f043 0304 	orr.w	r3, r3, #4
 8003374:	6713      	str	r3, [r2, #112]	; 0x70
 8003376:	4b5c      	ldr	r3, [pc, #368]	; (80034e8 <HAL_RCC_OscConfig+0x470>)
 8003378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337a:	4a5b      	ldr	r2, [pc, #364]	; (80034e8 <HAL_RCC_OscConfig+0x470>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	6713      	str	r3, [r2, #112]	; 0x70
 8003382:	e00b      	b.n	800339c <HAL_RCC_OscConfig+0x324>
 8003384:	4b58      	ldr	r3, [pc, #352]	; (80034e8 <HAL_RCC_OscConfig+0x470>)
 8003386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003388:	4a57      	ldr	r2, [pc, #348]	; (80034e8 <HAL_RCC_OscConfig+0x470>)
 800338a:	f023 0301 	bic.w	r3, r3, #1
 800338e:	6713      	str	r3, [r2, #112]	; 0x70
 8003390:	4b55      	ldr	r3, [pc, #340]	; (80034e8 <HAL_RCC_OscConfig+0x470>)
 8003392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003394:	4a54      	ldr	r2, [pc, #336]	; (80034e8 <HAL_RCC_OscConfig+0x470>)
 8003396:	f023 0304 	bic.w	r3, r3, #4
 800339a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d015      	beq.n	80033d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a4:	f7fe ffe8 	bl	8002378 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033aa:	e00a      	b.n	80033c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ac:	f7fe ffe4 	bl	8002378 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e0cb      	b.n	800355a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c2:	4b49      	ldr	r3, [pc, #292]	; (80034e8 <HAL_RCC_OscConfig+0x470>)
 80033c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0ee      	beq.n	80033ac <HAL_RCC_OscConfig+0x334>
 80033ce:	e014      	b.n	80033fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d0:	f7fe ffd2 	bl	8002378 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d6:	e00a      	b.n	80033ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d8:	f7fe ffce 	bl	8002378 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e0b5      	b.n	800355a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ee:	4b3e      	ldr	r3, [pc, #248]	; (80034e8 <HAL_RCC_OscConfig+0x470>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1ee      	bne.n	80033d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033fa:	7dfb      	ldrb	r3, [r7, #23]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d105      	bne.n	800340c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003400:	4b39      	ldr	r3, [pc, #228]	; (80034e8 <HAL_RCC_OscConfig+0x470>)
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	4a38      	ldr	r2, [pc, #224]	; (80034e8 <HAL_RCC_OscConfig+0x470>)
 8003406:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800340a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 80a1 	beq.w	8003558 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003416:	4b34      	ldr	r3, [pc, #208]	; (80034e8 <HAL_RCC_OscConfig+0x470>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 030c 	and.w	r3, r3, #12
 800341e:	2b08      	cmp	r3, #8
 8003420:	d05c      	beq.n	80034dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d141      	bne.n	80034ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342a:	4b31      	ldr	r3, [pc, #196]	; (80034f0 <HAL_RCC_OscConfig+0x478>)
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7fe ffa2 	bl	8002378 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003438:	f7fe ff9e 	bl	8002378 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e087      	b.n	800355a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344a:	4b27      	ldr	r3, [pc, #156]	; (80034e8 <HAL_RCC_OscConfig+0x470>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69da      	ldr	r2, [r3, #28]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	019b      	lsls	r3, r3, #6
 8003466:	431a      	orrs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346c:	085b      	lsrs	r3, r3, #1
 800346e:	3b01      	subs	r3, #1
 8003470:	041b      	lsls	r3, r3, #16
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003478:	061b      	lsls	r3, r3, #24
 800347a:	491b      	ldr	r1, [pc, #108]	; (80034e8 <HAL_RCC_OscConfig+0x470>)
 800347c:	4313      	orrs	r3, r2
 800347e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003480:	4b1b      	ldr	r3, [pc, #108]	; (80034f0 <HAL_RCC_OscConfig+0x478>)
 8003482:	2201      	movs	r2, #1
 8003484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003486:	f7fe ff77 	bl	8002378 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800348e:	f7fe ff73 	bl	8002378 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e05c      	b.n	800355a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a0:	4b11      	ldr	r3, [pc, #68]	; (80034e8 <HAL_RCC_OscConfig+0x470>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f0      	beq.n	800348e <HAL_RCC_OscConfig+0x416>
 80034ac:	e054      	b.n	8003558 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ae:	4b10      	ldr	r3, [pc, #64]	; (80034f0 <HAL_RCC_OscConfig+0x478>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b4:	f7fe ff60 	bl	8002378 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034bc:	f7fe ff5c 	bl	8002378 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e045      	b.n	800355a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ce:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <HAL_RCC_OscConfig+0x470>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0x444>
 80034da:	e03d      	b.n	8003558 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d107      	bne.n	80034f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e038      	b.n	800355a <HAL_RCC_OscConfig+0x4e2>
 80034e8:	40023800 	.word	0x40023800
 80034ec:	40007000 	.word	0x40007000
 80034f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034f4:	4b1b      	ldr	r3, [pc, #108]	; (8003564 <HAL_RCC_OscConfig+0x4ec>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d028      	beq.n	8003554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800350c:	429a      	cmp	r2, r3
 800350e:	d121      	bne.n	8003554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351a:	429a      	cmp	r2, r3
 800351c:	d11a      	bne.n	8003554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003524:	4013      	ands	r3, r2
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800352a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800352c:	4293      	cmp	r3, r2
 800352e:	d111      	bne.n	8003554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353a:	085b      	lsrs	r3, r3, #1
 800353c:	3b01      	subs	r3, #1
 800353e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003540:	429a      	cmp	r2, r3
 8003542:	d107      	bne.n	8003554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003550:	429a      	cmp	r2, r3
 8003552:	d001      	beq.n	8003558 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e000      	b.n	800355a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40023800 	.word	0x40023800

08003568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0cc      	b.n	8003716 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800357c:	4b68      	ldr	r3, [pc, #416]	; (8003720 <HAL_RCC_ClockConfig+0x1b8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d90c      	bls.n	80035a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358a:	4b65      	ldr	r3, [pc, #404]	; (8003720 <HAL_RCC_ClockConfig+0x1b8>)
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003592:	4b63      	ldr	r3, [pc, #396]	; (8003720 <HAL_RCC_ClockConfig+0x1b8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d001      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e0b8      	b.n	8003716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d020      	beq.n	80035f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035bc:	4b59      	ldr	r3, [pc, #356]	; (8003724 <HAL_RCC_ClockConfig+0x1bc>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	4a58      	ldr	r2, [pc, #352]	; (8003724 <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035d4:	4b53      	ldr	r3, [pc, #332]	; (8003724 <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	4a52      	ldr	r2, [pc, #328]	; (8003724 <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e0:	4b50      	ldr	r3, [pc, #320]	; (8003724 <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	494d      	ldr	r1, [pc, #308]	; (8003724 <HAL_RCC_ClockConfig+0x1bc>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d044      	beq.n	8003688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d107      	bne.n	8003616 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003606:	4b47      	ldr	r3, [pc, #284]	; (8003724 <HAL_RCC_ClockConfig+0x1bc>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d119      	bne.n	8003646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e07f      	b.n	8003716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d003      	beq.n	8003626 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003622:	2b03      	cmp	r3, #3
 8003624:	d107      	bne.n	8003636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003626:	4b3f      	ldr	r3, [pc, #252]	; (8003724 <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d109      	bne.n	8003646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e06f      	b.n	8003716 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003636:	4b3b      	ldr	r3, [pc, #236]	; (8003724 <HAL_RCC_ClockConfig+0x1bc>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e067      	b.n	8003716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003646:	4b37      	ldr	r3, [pc, #220]	; (8003724 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f023 0203 	bic.w	r2, r3, #3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	4934      	ldr	r1, [pc, #208]	; (8003724 <HAL_RCC_ClockConfig+0x1bc>)
 8003654:	4313      	orrs	r3, r2
 8003656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003658:	f7fe fe8e 	bl	8002378 <HAL_GetTick>
 800365c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365e:	e00a      	b.n	8003676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003660:	f7fe fe8a 	bl	8002378 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	f241 3288 	movw	r2, #5000	; 0x1388
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e04f      	b.n	8003716 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003676:	4b2b      	ldr	r3, [pc, #172]	; (8003724 <HAL_RCC_ClockConfig+0x1bc>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 020c 	and.w	r2, r3, #12
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	429a      	cmp	r2, r3
 8003686:	d1eb      	bne.n	8003660 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003688:	4b25      	ldr	r3, [pc, #148]	; (8003720 <HAL_RCC_ClockConfig+0x1b8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d20c      	bcs.n	80036b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003696:	4b22      	ldr	r3, [pc, #136]	; (8003720 <HAL_RCC_ClockConfig+0x1b8>)
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800369e:	4b20      	ldr	r3, [pc, #128]	; (8003720 <HAL_RCC_ClockConfig+0x1b8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d001      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e032      	b.n	8003716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036bc:	4b19      	ldr	r3, [pc, #100]	; (8003724 <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	4916      	ldr	r1, [pc, #88]	; (8003724 <HAL_RCC_ClockConfig+0x1bc>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d009      	beq.n	80036ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036da:	4b12      	ldr	r3, [pc, #72]	; (8003724 <HAL_RCC_ClockConfig+0x1bc>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	490e      	ldr	r1, [pc, #56]	; (8003724 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036ee:	f000 f821 	bl	8003734 <HAL_RCC_GetSysClockFreq>
 80036f2:	4602      	mov	r2, r0
 80036f4:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	091b      	lsrs	r3, r3, #4
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	490a      	ldr	r1, [pc, #40]	; (8003728 <HAL_RCC_ClockConfig+0x1c0>)
 8003700:	5ccb      	ldrb	r3, [r1, r3]
 8003702:	fa22 f303 	lsr.w	r3, r2, r3
 8003706:	4a09      	ldr	r2, [pc, #36]	; (800372c <HAL_RCC_ClockConfig+0x1c4>)
 8003708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800370a:	4b09      	ldr	r3, [pc, #36]	; (8003730 <HAL_RCC_ClockConfig+0x1c8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f7fe fdee 	bl	80022f0 <HAL_InitTick>

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40023c00 	.word	0x40023c00
 8003724:	40023800 	.word	0x40023800
 8003728:	080082a0 	.word	0x080082a0
 800372c:	20000004 	.word	0x20000004
 8003730:	20000008 	.word	0x20000008

08003734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003738:	b094      	sub	sp, #80	; 0x50
 800373a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800373c:	2300      	movs	r3, #0
 800373e:	647b      	str	r3, [r7, #68]	; 0x44
 8003740:	2300      	movs	r3, #0
 8003742:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003744:	2300      	movs	r3, #0
 8003746:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003748:	2300      	movs	r3, #0
 800374a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800374c:	4b79      	ldr	r3, [pc, #484]	; (8003934 <HAL_RCC_GetSysClockFreq+0x200>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 030c 	and.w	r3, r3, #12
 8003754:	2b08      	cmp	r3, #8
 8003756:	d00d      	beq.n	8003774 <HAL_RCC_GetSysClockFreq+0x40>
 8003758:	2b08      	cmp	r3, #8
 800375a:	f200 80e1 	bhi.w	8003920 <HAL_RCC_GetSysClockFreq+0x1ec>
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <HAL_RCC_GetSysClockFreq+0x34>
 8003762:	2b04      	cmp	r3, #4
 8003764:	d003      	beq.n	800376e <HAL_RCC_GetSysClockFreq+0x3a>
 8003766:	e0db      	b.n	8003920 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003768:	4b73      	ldr	r3, [pc, #460]	; (8003938 <HAL_RCC_GetSysClockFreq+0x204>)
 800376a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800376c:	e0db      	b.n	8003926 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800376e:	4b73      	ldr	r3, [pc, #460]	; (800393c <HAL_RCC_GetSysClockFreq+0x208>)
 8003770:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003772:	e0d8      	b.n	8003926 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003774:	4b6f      	ldr	r3, [pc, #444]	; (8003934 <HAL_RCC_GetSysClockFreq+0x200>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800377c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800377e:	4b6d      	ldr	r3, [pc, #436]	; (8003934 <HAL_RCC_GetSysClockFreq+0x200>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d063      	beq.n	8003852 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800378a:	4b6a      	ldr	r3, [pc, #424]	; (8003934 <HAL_RCC_GetSysClockFreq+0x200>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	099b      	lsrs	r3, r3, #6
 8003790:	2200      	movs	r2, #0
 8003792:	63bb      	str	r3, [r7, #56]	; 0x38
 8003794:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800379c:	633b      	str	r3, [r7, #48]	; 0x30
 800379e:	2300      	movs	r3, #0
 80037a0:	637b      	str	r3, [r7, #52]	; 0x34
 80037a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037a6:	4622      	mov	r2, r4
 80037a8:	462b      	mov	r3, r5
 80037aa:	f04f 0000 	mov.w	r0, #0
 80037ae:	f04f 0100 	mov.w	r1, #0
 80037b2:	0159      	lsls	r1, r3, #5
 80037b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037b8:	0150      	lsls	r0, r2, #5
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	4621      	mov	r1, r4
 80037c0:	1a51      	subs	r1, r2, r1
 80037c2:	6139      	str	r1, [r7, #16]
 80037c4:	4629      	mov	r1, r5
 80037c6:	eb63 0301 	sbc.w	r3, r3, r1
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037d8:	4659      	mov	r1, fp
 80037da:	018b      	lsls	r3, r1, #6
 80037dc:	4651      	mov	r1, sl
 80037de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037e2:	4651      	mov	r1, sl
 80037e4:	018a      	lsls	r2, r1, #6
 80037e6:	4651      	mov	r1, sl
 80037e8:	ebb2 0801 	subs.w	r8, r2, r1
 80037ec:	4659      	mov	r1, fp
 80037ee:	eb63 0901 	sbc.w	r9, r3, r1
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	f04f 0300 	mov.w	r3, #0
 80037fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003802:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003806:	4690      	mov	r8, r2
 8003808:	4699      	mov	r9, r3
 800380a:	4623      	mov	r3, r4
 800380c:	eb18 0303 	adds.w	r3, r8, r3
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	462b      	mov	r3, r5
 8003814:	eb49 0303 	adc.w	r3, r9, r3
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003826:	4629      	mov	r1, r5
 8003828:	024b      	lsls	r3, r1, #9
 800382a:	4621      	mov	r1, r4
 800382c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003830:	4621      	mov	r1, r4
 8003832:	024a      	lsls	r2, r1, #9
 8003834:	4610      	mov	r0, r2
 8003836:	4619      	mov	r1, r3
 8003838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800383a:	2200      	movs	r2, #0
 800383c:	62bb      	str	r3, [r7, #40]	; 0x28
 800383e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003840:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003844:	f7fc fd14 	bl	8000270 <__aeabi_uldivmod>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4613      	mov	r3, r2
 800384e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003850:	e058      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003852:	4b38      	ldr	r3, [pc, #224]	; (8003934 <HAL_RCC_GetSysClockFreq+0x200>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	099b      	lsrs	r3, r3, #6
 8003858:	2200      	movs	r2, #0
 800385a:	4618      	mov	r0, r3
 800385c:	4611      	mov	r1, r2
 800385e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003862:	623b      	str	r3, [r7, #32]
 8003864:	2300      	movs	r3, #0
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
 8003868:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800386c:	4642      	mov	r2, r8
 800386e:	464b      	mov	r3, r9
 8003870:	f04f 0000 	mov.w	r0, #0
 8003874:	f04f 0100 	mov.w	r1, #0
 8003878:	0159      	lsls	r1, r3, #5
 800387a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800387e:	0150      	lsls	r0, r2, #5
 8003880:	4602      	mov	r2, r0
 8003882:	460b      	mov	r3, r1
 8003884:	4641      	mov	r1, r8
 8003886:	ebb2 0a01 	subs.w	sl, r2, r1
 800388a:	4649      	mov	r1, r9
 800388c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800389c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038a4:	ebb2 040a 	subs.w	r4, r2, sl
 80038a8:	eb63 050b 	sbc.w	r5, r3, fp
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	00eb      	lsls	r3, r5, #3
 80038b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038ba:	00e2      	lsls	r2, r4, #3
 80038bc:	4614      	mov	r4, r2
 80038be:	461d      	mov	r5, r3
 80038c0:	4643      	mov	r3, r8
 80038c2:	18e3      	adds	r3, r4, r3
 80038c4:	603b      	str	r3, [r7, #0]
 80038c6:	464b      	mov	r3, r9
 80038c8:	eb45 0303 	adc.w	r3, r5, r3
 80038cc:	607b      	str	r3, [r7, #4]
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038da:	4629      	mov	r1, r5
 80038dc:	028b      	lsls	r3, r1, #10
 80038de:	4621      	mov	r1, r4
 80038e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038e4:	4621      	mov	r1, r4
 80038e6:	028a      	lsls	r2, r1, #10
 80038e8:	4610      	mov	r0, r2
 80038ea:	4619      	mov	r1, r3
 80038ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038ee:	2200      	movs	r2, #0
 80038f0:	61bb      	str	r3, [r7, #24]
 80038f2:	61fa      	str	r2, [r7, #28]
 80038f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038f8:	f7fc fcba 	bl	8000270 <__aeabi_uldivmod>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	4613      	mov	r3, r2
 8003902:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003904:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <HAL_RCC_GetSysClockFreq+0x200>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	0c1b      	lsrs	r3, r3, #16
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	3301      	adds	r3, #1
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003914:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003918:	fbb2 f3f3 	udiv	r3, r2, r3
 800391c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800391e:	e002      	b.n	8003926 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003920:	4b05      	ldr	r3, [pc, #20]	; (8003938 <HAL_RCC_GetSysClockFreq+0x204>)
 8003922:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003924:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003928:	4618      	mov	r0, r3
 800392a:	3750      	adds	r7, #80	; 0x50
 800392c:	46bd      	mov	sp, r7
 800392e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003932:	bf00      	nop
 8003934:	40023800 	.word	0x40023800
 8003938:	00f42400 	.word	0x00f42400
 800393c:	007a1200 	.word	0x007a1200

08003940 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e07b      	b.n	8003a4a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	2b00      	cmp	r3, #0
 8003958:	d108      	bne.n	800396c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003962:	d009      	beq.n	8003978 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	61da      	str	r2, [r3, #28]
 800396a:	e005      	b.n	8003978 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fe fada 	bl	8001f4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039c0:	431a      	orrs	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fc:	ea42 0103 	orr.w	r1, r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	0c1b      	lsrs	r3, r3, #16
 8003a16:	f003 0104 	and.w	r1, r3, #4
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	f003 0210 	and.w	r2, r3, #16
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	69da      	ldr	r2, [r3, #28]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b088      	sub	sp, #32
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	60f8      	str	r0, [r7, #12]
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	603b      	str	r3, [r7, #0]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_SPI_Transmit+0x22>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e126      	b.n	8003cc2 <HAL_SPI_Transmit+0x270>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a7c:	f7fe fc7c 	bl	8002378 <HAL_GetTick>
 8003a80:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a82:	88fb      	ldrh	r3, [r7, #6]
 8003a84:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d002      	beq.n	8003a98 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a92:	2302      	movs	r3, #2
 8003a94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a96:	e10b      	b.n	8003cb0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <HAL_SPI_Transmit+0x52>
 8003a9e:	88fb      	ldrh	r3, [r7, #6]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d102      	bne.n	8003aaa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003aa8:	e102      	b.n	8003cb0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2203      	movs	r2, #3
 8003aae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	88fa      	ldrh	r2, [r7, #6]
 8003ac2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	88fa      	ldrh	r2, [r7, #6]
 8003ac8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003af0:	d10f      	bne.n	8003b12 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1c:	2b40      	cmp	r3, #64	; 0x40
 8003b1e:	d007      	beq.n	8003b30 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b38:	d14b      	bne.n	8003bd2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <HAL_SPI_Transmit+0xf6>
 8003b42:	8afb      	ldrh	r3, [r7, #22]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d13e      	bne.n	8003bc6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	881a      	ldrh	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	1c9a      	adds	r2, r3, #2
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b6c:	e02b      	b.n	8003bc6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d112      	bne.n	8003ba2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b80:	881a      	ldrh	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8c:	1c9a      	adds	r2, r3, #2
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ba0:	e011      	b.n	8003bc6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ba2:	f7fe fbe9 	bl	8002378 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d803      	bhi.n	8003bba <HAL_SPI_Transmit+0x168>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb8:	d102      	bne.n	8003bc0 <HAL_SPI_Transmit+0x16e>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d102      	bne.n	8003bc6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003bc4:	e074      	b.n	8003cb0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1ce      	bne.n	8003b6e <HAL_SPI_Transmit+0x11c>
 8003bd0:	e04c      	b.n	8003c6c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <HAL_SPI_Transmit+0x18e>
 8003bda:	8afb      	ldrh	r3, [r7, #22]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d140      	bne.n	8003c62 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	330c      	adds	r3, #12
 8003bea:	7812      	ldrb	r2, [r2, #0]
 8003bec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	1c5a      	adds	r2, r3, #1
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c06:	e02c      	b.n	8003c62 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d113      	bne.n	8003c3e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	330c      	adds	r3, #12
 8003c20:	7812      	ldrb	r2, [r2, #0]
 8003c22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c3c:	e011      	b.n	8003c62 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c3e:	f7fe fb9b 	bl	8002378 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d803      	bhi.n	8003c56 <HAL_SPI_Transmit+0x204>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c54:	d102      	bne.n	8003c5c <HAL_SPI_Transmit+0x20a>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d102      	bne.n	8003c62 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c60:	e026      	b.n	8003cb0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1cd      	bne.n	8003c08 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	6839      	ldr	r1, [r7, #0]
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 fbaf 	bl	80043d4 <SPI_EndRxTxTransaction>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10a      	bne.n	8003ca0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	77fb      	strb	r3, [r7, #31]
 8003cac:	e000      	b.n	8003cb0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003cae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3720      	adds	r7, #32
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b08c      	sub	sp, #48	; 0x30
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	607a      	str	r2, [r7, #4]
 8003cd6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_SPI_TransmitReceive+0x26>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e18a      	b.n	8004006 <HAL_SPI_TransmitReceive+0x33c>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cf8:	f7fe fb3e 	bl	8002378 <HAL_GetTick>
 8003cfc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003d0e:	887b      	ldrh	r3, [r7, #2]
 8003d10:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d00f      	beq.n	8003d3a <HAL_SPI_TransmitReceive+0x70>
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d20:	d107      	bne.n	8003d32 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d103      	bne.n	8003d32 <HAL_SPI_TransmitReceive+0x68>
 8003d2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d003      	beq.n	8003d3a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003d32:	2302      	movs	r3, #2
 8003d34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d38:	e15b      	b.n	8003ff2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <HAL_SPI_TransmitReceive+0x82>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <HAL_SPI_TransmitReceive+0x82>
 8003d46:	887b      	ldrh	r3, [r7, #2]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d103      	bne.n	8003d54 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d52:	e14e      	b.n	8003ff2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b04      	cmp	r3, #4
 8003d5e:	d003      	beq.n	8003d68 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2205      	movs	r2, #5
 8003d64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	887a      	ldrh	r2, [r7, #2]
 8003d78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	887a      	ldrh	r2, [r7, #2]
 8003d7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	887a      	ldrh	r2, [r7, #2]
 8003d8a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	887a      	ldrh	r2, [r7, #2]
 8003d90:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da8:	2b40      	cmp	r3, #64	; 0x40
 8003daa:	d007      	beq.n	8003dbc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc4:	d178      	bne.n	8003eb8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <HAL_SPI_TransmitReceive+0x10a>
 8003dce:	8b7b      	ldrh	r3, [r7, #26]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d166      	bne.n	8003ea2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	881a      	ldrh	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de4:	1c9a      	adds	r2, r3, #2
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003df8:	e053      	b.n	8003ea2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d11b      	bne.n	8003e40 <HAL_SPI_TransmitReceive+0x176>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d016      	beq.n	8003e40 <HAL_SPI_TransmitReceive+0x176>
 8003e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d113      	bne.n	8003e40 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	881a      	ldrh	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e28:	1c9a      	adds	r2, r3, #2
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d119      	bne.n	8003e82 <HAL_SPI_TransmitReceive+0x1b8>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d014      	beq.n	8003e82 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68da      	ldr	r2, [r3, #12]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e62:	b292      	uxth	r2, r2
 8003e64:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6a:	1c9a      	adds	r2, r3, #2
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e82:	f7fe fa79 	bl	8002378 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d807      	bhi.n	8003ea2 <HAL_SPI_TransmitReceive+0x1d8>
 8003e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e98:	d003      	beq.n	8003ea2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ea0:	e0a7      	b.n	8003ff2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1a6      	bne.n	8003dfa <HAL_SPI_TransmitReceive+0x130>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1a1      	bne.n	8003dfa <HAL_SPI_TransmitReceive+0x130>
 8003eb6:	e07c      	b.n	8003fb2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <HAL_SPI_TransmitReceive+0x1fc>
 8003ec0:	8b7b      	ldrh	r3, [r7, #26]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d16b      	bne.n	8003f9e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	330c      	adds	r3, #12
 8003ed0:	7812      	ldrb	r2, [r2, #0]
 8003ed2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eec:	e057      	b.n	8003f9e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d11c      	bne.n	8003f36 <HAL_SPI_TransmitReceive+0x26c>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d017      	beq.n	8003f36 <HAL_SPI_TransmitReceive+0x26c>
 8003f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d114      	bne.n	8003f36 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	330c      	adds	r3, #12
 8003f16:	7812      	ldrb	r2, [r2, #0]
 8003f18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d119      	bne.n	8003f78 <HAL_SPI_TransmitReceive+0x2ae>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d014      	beq.n	8003f78 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f74:	2301      	movs	r3, #1
 8003f76:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f78:	f7fe f9fe 	bl	8002378 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d803      	bhi.n	8003f90 <HAL_SPI_TransmitReceive+0x2c6>
 8003f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8e:	d102      	bne.n	8003f96 <HAL_SPI_TransmitReceive+0x2cc>
 8003f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d103      	bne.n	8003f9e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f9c:	e029      	b.n	8003ff2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1a2      	bne.n	8003eee <HAL_SPI_TransmitReceive+0x224>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d19d      	bne.n	8003eee <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 fa0c 	bl	80043d4 <SPI_EndRxTxTransaction>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d006      	beq.n	8003fd0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003fce:	e010      	b.n	8003ff2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10b      	bne.n	8003ff0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fd8:	2300      	movs	r3, #0
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	e000      	b.n	8003ff2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003ff0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004002:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004006:	4618      	mov	r0, r3
 8004008:	3730      	adds	r7, #48	; 0x30
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	4613      	mov	r3, r2
 800401c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_SPI_Transmit_DMA+0x20>
 800402c:	2302      	movs	r3, #2
 800402e:	e09b      	b.n	8004168 <HAL_SPI_Transmit_DMA+0x158>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b01      	cmp	r3, #1
 8004042:	d002      	beq.n	800404a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004044:	2302      	movs	r3, #2
 8004046:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004048:	e089      	b.n	800415e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <HAL_SPI_Transmit_DMA+0x46>
 8004050:	88fb      	ldrh	r3, [r7, #6]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d102      	bne.n	800405c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	75fb      	strb	r3, [r7, #23]
    goto error;
 800405a:	e080      	b.n	800415e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2203      	movs	r2, #3
 8004060:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	88fa      	ldrh	r2, [r7, #6]
 8004074:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	88fa      	ldrh	r2, [r7, #6]
 800407a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040a2:	d10f      	bne.n	80040c4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c8:	4a29      	ldr	r2, [pc, #164]	; (8004170 <HAL_SPI_Transmit_DMA+0x160>)
 80040ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d0:	4a28      	ldr	r2, [pc, #160]	; (8004174 <HAL_SPI_Transmit_DMA+0x164>)
 80040d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d8:	4a27      	ldr	r2, [pc, #156]	; (8004178 <HAL_SPI_Transmit_DMA+0x168>)
 80040da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e0:	2200      	movs	r2, #0
 80040e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ec:	4619      	mov	r1, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	330c      	adds	r3, #12
 80040f4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040fa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80040fc:	f7fe fb2c 	bl	8002758 <HAL_DMA_Start_IT>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00c      	beq.n	8004120 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410a:	f043 0210 	orr.w	r2, r3, #16
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800411e:	e01e      	b.n	800415e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412a:	2b40      	cmp	r3, #64	; 0x40
 800412c:	d007      	beq.n	800413e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800413c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f042 0220 	orr.w	r2, r2, #32
 800414c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f042 0202 	orr.w	r2, r2, #2
 800415c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004166:	7dfb      	ldrb	r3, [r7, #23]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	08004269 	.word	0x08004269
 8004174:	080041c1 	.word	0x080041c1
 8004178:	08004285 	.word	0x08004285

0800417c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041b2:	b2db      	uxtb	r3, r3
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041cc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041ce:	f7fe f8d3 	bl	8002378 <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041e2:	d03b      	beq.n	800425c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0220 	bic.w	r2, r2, #32
 80041f2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0202 	bic.w	r2, r2, #2
 8004202:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	2164      	movs	r1, #100	; 0x64
 8004208:	6978      	ldr	r0, [r7, #20]
 800420a:	f000 f8e3 	bl	80043d4 <SPI_EndRxTxTransaction>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d005      	beq.n	8004220 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004218:	f043 0220 	orr.w	r2, r3, #32
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10a      	bne.n	800423e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004228:	2300      	movs	r3, #0
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2200      	movs	r2, #0
 8004242:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004254:	6978      	ldr	r0, [r7, #20]
 8004256:	f7ff ff9b 	bl	8004190 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800425a:	e002      	b.n	8004262 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800425c:	6978      	ldr	r0, [r7, #20]
 800425e:	f7fc ff1f 	bl	80010a0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004262:	3718      	adds	r7, #24
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004274:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f7ff ff80 	bl	800417c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800427c:	bf00      	nop
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004290:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0203 	bic.w	r2, r2, #3
 80042a0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a6:	f043 0210 	orr.w	r2, r3, #16
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f7ff ff6a 	bl	8004190 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80042bc:	bf00      	nop
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b088      	sub	sp, #32
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	4613      	mov	r3, r2
 80042d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042d4:	f7fe f850 	bl	8002378 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042dc:	1a9b      	subs	r3, r3, r2
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	4413      	add	r3, r2
 80042e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042e4:	f7fe f848 	bl	8002378 <HAL_GetTick>
 80042e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042ea:	4b39      	ldr	r3, [pc, #228]	; (80043d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	015b      	lsls	r3, r3, #5
 80042f0:	0d1b      	lsrs	r3, r3, #20
 80042f2:	69fa      	ldr	r2, [r7, #28]
 80042f4:	fb02 f303 	mul.w	r3, r2, r3
 80042f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042fa:	e054      	b.n	80043a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004302:	d050      	beq.n	80043a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004304:	f7fe f838 	bl	8002378 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	69fa      	ldr	r2, [r7, #28]
 8004310:	429a      	cmp	r2, r3
 8004312:	d902      	bls.n	800431a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d13d      	bne.n	8004396 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004328:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004332:	d111      	bne.n	8004358 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800433c:	d004      	beq.n	8004348 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004346:	d107      	bne.n	8004358 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004356:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004360:	d10f      	bne.n	8004382 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004380:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e017      	b.n	80043c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800439c:	2300      	movs	r3, #0
 800439e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4013      	ands	r3, r2
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	bf0c      	ite	eq
 80043b6:	2301      	moveq	r3, #1
 80043b8:	2300      	movne	r3, #0
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	461a      	mov	r2, r3
 80043be:	79fb      	ldrb	r3, [r7, #7]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d19b      	bne.n	80042fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3720      	adds	r7, #32
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	20000004 	.word	0x20000004

080043d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af02      	add	r7, sp, #8
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043e0:	4b1b      	ldr	r3, [pc, #108]	; (8004450 <SPI_EndRxTxTransaction+0x7c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a1b      	ldr	r2, [pc, #108]	; (8004454 <SPI_EndRxTxTransaction+0x80>)
 80043e6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ea:	0d5b      	lsrs	r3, r3, #21
 80043ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043f0:	fb02 f303 	mul.w	r3, r2, r3
 80043f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043fe:	d112      	bne.n	8004426 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2200      	movs	r2, #0
 8004408:	2180      	movs	r1, #128	; 0x80
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f7ff ff5a 	bl	80042c4 <SPI_WaitFlagStateUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d016      	beq.n	8004444 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441a:	f043 0220 	orr.w	r2, r3, #32
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e00f      	b.n	8004446 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	3b01      	subs	r3, #1
 8004430:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443c:	2b80      	cmp	r3, #128	; 0x80
 800443e:	d0f2      	beq.n	8004426 <SPI_EndRxTxTransaction+0x52>
 8004440:	e000      	b.n	8004444 <SPI_EndRxTxTransaction+0x70>
        break;
 8004442:	bf00      	nop
  }

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	20000004 	.word	0x20000004
 8004454:	165e9f81 	.word	0x165e9f81

08004458 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800445c:	4904      	ldr	r1, [pc, #16]	; (8004470 <MX_FATFS_Init+0x18>)
 800445e:	4805      	ldr	r0, [pc, #20]	; (8004474 <MX_FATFS_Init+0x1c>)
 8004460:	f003 f8e2 	bl	8007628 <FATFS_LinkDriver>
 8004464:	4603      	mov	r3, r0
 8004466:	461a      	mov	r2, r3
 8004468:	4b03      	ldr	r3, [pc, #12]	; (8004478 <MX_FATFS_Init+0x20>)
 800446a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800446c:	bf00      	nop
 800446e:	bd80      	pop	{r7, pc}
 8004470:	20001228 	.word	0x20001228
 8004474:	20000010 	.word	0x20000010
 8004478:	20001224 	.word	0x20001224

0800447c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004480:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004482:	4618      	mov	r0, r3
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	Stat = SD_disk_initialize(pdrv);
 8004496:	79fb      	ldrb	r3, [r7, #7]
 8004498:	4618      	mov	r0, r3
 800449a:	f7fc fa25 	bl	80008e8 <SD_disk_initialize>
 800449e:	4603      	mov	r3, r0
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	4b04      	ldr	r3, [pc, #16]	; (80044b4 <USER_initialize+0x28>)
 80044a4:	701a      	strb	r2, [r3, #0]
		    return Stat;
 80044a6:	4b03      	ldr	r3, [pc, #12]	; (80044b4 <USER_initialize+0x28>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	2000000d 	.word	0x2000000d

080044b8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	4603      	mov	r3, r0
 80044c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	 Stat = SD_disk_status (pdrv);
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fc faf9 	bl	8000abc <SD_disk_status>
 80044ca:	4603      	mov	r3, r0
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	4b04      	ldr	r3, [pc, #16]	; (80044e0 <USER_status+0x28>)
 80044d0:	701a      	strb	r2, [r3, #0]
	    return Stat;
 80044d2:	4b03      	ldr	r3, [pc, #12]	; (80044e0 <USER_status+0x28>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	2000000d 	.word	0x2000000d

080044e4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60b9      	str	r1, [r7, #8]
 80044ec:	607a      	str	r2, [r7, #4]
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	4603      	mov	r3, r0
 80044f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff, sector, count);
 80044f4:	7bf8      	ldrb	r0, [r7, #15]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	68b9      	ldr	r1, [r7, #8]
 80044fc:	f7fc faf4 	bl	8000ae8 <SD_disk_read>
 8004500:	4603      	mov	r3, r0
 8004502:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004504:	4618      	mov	r0, r3
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	607a      	str	r2, [r7, #4]
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	4603      	mov	r3, r0
 800451a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write (pdrv, buff, sector, count);
 800451c:	7bf8      	ldrb	r0, [r7, #15]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	68b9      	ldr	r1, [r7, #8]
 8004524:	f7fc fb4a 	bl	8000bbc <SD_disk_write>
 8004528:	4603      	mov	r3, r0
 800452a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	4603      	mov	r3, r0
 800453c:	603a      	str	r2, [r7, #0]
 800453e:	71fb      	strb	r3, [r7, #7]
 8004540:	460b      	mov	r3, r1
 8004542:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = SD_disk_ioctl (pdrv, cmd, buff);
 8004544:	79fb      	ldrb	r3, [r7, #7]
 8004546:	79b9      	ldrb	r1, [r7, #6]
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f7fc fbba 	bl	8000cc4 <SD_disk_ioctl>
 8004550:	4603      	mov	r3, r0
 8004552:	73fb      	strb	r3, [r7, #15]
    return res;
 8004554:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	4603      	mov	r3, r0
 8004568:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800456a:	79fb      	ldrb	r3, [r7, #7]
 800456c:	4a08      	ldr	r2, [pc, #32]	; (8004590 <disk_status+0x30>)
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	79fa      	ldrb	r2, [r7, #7]
 8004578:	4905      	ldr	r1, [pc, #20]	; (8004590 <disk_status+0x30>)
 800457a:	440a      	add	r2, r1
 800457c:	7a12      	ldrb	r2, [r2, #8]
 800457e:	4610      	mov	r0, r2
 8004580:	4798      	blx	r3
 8004582:	4603      	mov	r3, r0
 8004584:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004586:	7bfb      	ldrb	r3, [r7, #15]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	20001454 	.word	0x20001454

08004594 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	4603      	mov	r3, r0
 800459c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80045a2:	79fb      	ldrb	r3, [r7, #7]
 80045a4:	4a0d      	ldr	r2, [pc, #52]	; (80045dc <disk_initialize+0x48>)
 80045a6:	5cd3      	ldrb	r3, [r2, r3]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d111      	bne.n	80045d0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80045ac:	79fb      	ldrb	r3, [r7, #7]
 80045ae:	4a0b      	ldr	r2, [pc, #44]	; (80045dc <disk_initialize+0x48>)
 80045b0:	2101      	movs	r1, #1
 80045b2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80045b4:	79fb      	ldrb	r3, [r7, #7]
 80045b6:	4a09      	ldr	r2, [pc, #36]	; (80045dc <disk_initialize+0x48>)
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	79fa      	ldrb	r2, [r7, #7]
 80045c2:	4906      	ldr	r1, [pc, #24]	; (80045dc <disk_initialize+0x48>)
 80045c4:	440a      	add	r2, r1
 80045c6:	7a12      	ldrb	r2, [r2, #8]
 80045c8:	4610      	mov	r0, r2
 80045ca:	4798      	blx	r3
 80045cc:	4603      	mov	r3, r0
 80045ce:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20001454 	.word	0x20001454

080045e0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80045e0:	b590      	push	{r4, r7, lr}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60b9      	str	r1, [r7, #8]
 80045e8:	607a      	str	r2, [r7, #4]
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	4603      	mov	r3, r0
 80045ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
 80045f2:	4a0a      	ldr	r2, [pc, #40]	; (800461c <disk_read+0x3c>)
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	689c      	ldr	r4, [r3, #8]
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	4a07      	ldr	r2, [pc, #28]	; (800461c <disk_read+0x3c>)
 8004600:	4413      	add	r3, r2
 8004602:	7a18      	ldrb	r0, [r3, #8]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	68b9      	ldr	r1, [r7, #8]
 800460a:	47a0      	blx	r4
 800460c:	4603      	mov	r3, r0
 800460e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004610:	7dfb      	ldrb	r3, [r7, #23]
}
 8004612:	4618      	mov	r0, r3
 8004614:	371c      	adds	r7, #28
 8004616:	46bd      	mov	sp, r7
 8004618:	bd90      	pop	{r4, r7, pc}
 800461a:	bf00      	nop
 800461c:	20001454 	.word	0x20001454

08004620 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004620:	b590      	push	{r4, r7, lr}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	60b9      	str	r1, [r7, #8]
 8004628:	607a      	str	r2, [r7, #4]
 800462a:	603b      	str	r3, [r7, #0]
 800462c:	4603      	mov	r3, r0
 800462e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004630:	7bfb      	ldrb	r3, [r7, #15]
 8004632:	4a0a      	ldr	r2, [pc, #40]	; (800465c <disk_write+0x3c>)
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	68dc      	ldr	r4, [r3, #12]
 800463c:	7bfb      	ldrb	r3, [r7, #15]
 800463e:	4a07      	ldr	r2, [pc, #28]	; (800465c <disk_write+0x3c>)
 8004640:	4413      	add	r3, r2
 8004642:	7a18      	ldrb	r0, [r3, #8]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	68b9      	ldr	r1, [r7, #8]
 800464a:	47a0      	blx	r4
 800464c:	4603      	mov	r3, r0
 800464e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004650:	7dfb      	ldrb	r3, [r7, #23]
}
 8004652:	4618      	mov	r0, r3
 8004654:	371c      	adds	r7, #28
 8004656:	46bd      	mov	sp, r7
 8004658:	bd90      	pop	{r4, r7, pc}
 800465a:	bf00      	nop
 800465c:	20001454 	.word	0x20001454

08004660 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	4603      	mov	r3, r0
 8004668:	603a      	str	r2, [r7, #0]
 800466a:	71fb      	strb	r3, [r7, #7]
 800466c:	460b      	mov	r3, r1
 800466e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	4a09      	ldr	r2, [pc, #36]	; (8004698 <disk_ioctl+0x38>)
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	79fa      	ldrb	r2, [r7, #7]
 800467e:	4906      	ldr	r1, [pc, #24]	; (8004698 <disk_ioctl+0x38>)
 8004680:	440a      	add	r2, r1
 8004682:	7a10      	ldrb	r0, [r2, #8]
 8004684:	79b9      	ldrb	r1, [r7, #6]
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	4798      	blx	r3
 800468a:	4603      	mov	r3, r0
 800468c:	73fb      	strb	r3, [r7, #15]
  return res;
 800468e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	20001454 	.word	0x20001454

0800469c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3301      	adds	r3, #1
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80046ac:	89fb      	ldrh	r3, [r7, #14]
 80046ae:	021b      	lsls	r3, r3, #8
 80046b0:	b21a      	sxth	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	b21b      	sxth	r3, r3
 80046b8:	4313      	orrs	r3, r2
 80046ba:	b21b      	sxth	r3, r3
 80046bc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80046be:	89fb      	ldrh	r3, [r7, #14]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3714      	adds	r7, #20
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3303      	adds	r3, #3
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	021b      	lsls	r3, r3, #8
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	3202      	adds	r2, #2
 80046e4:	7812      	ldrb	r2, [r2, #0]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	021b      	lsls	r3, r3, #8
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	3201      	adds	r2, #1
 80046f2:	7812      	ldrb	r2, [r2, #0]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	021b      	lsls	r3, r3, #8
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	7812      	ldrb	r2, [r2, #0]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]
	return rv;
 8004704:	68fb      	ldr	r3, [r7, #12]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	460b      	mov	r3, r1
 800471c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	887a      	ldrh	r2, [r7, #2]
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]
 800472a:	887b      	ldrh	r3, [r7, #2]
 800472c:	0a1b      	lsrs	r3, r3, #8
 800472e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	607a      	str	r2, [r7, #4]
 8004736:	887a      	ldrh	r2, [r7, #2]
 8004738:	b2d2      	uxtb	r2, r2
 800473a:	701a      	strb	r2, [r3, #0]
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	b2d2      	uxtb	r2, r2
 800475c:	701a      	strb	r2, [r3, #0]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	0a1b      	lsrs	r3, r3, #8
 8004762:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	607a      	str	r2, [r7, #4]
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	b2d2      	uxtb	r2, r2
 800476e:	701a      	strb	r2, [r3, #0]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	0a1b      	lsrs	r3, r3, #8
 8004774:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	0a1b      	lsrs	r3, r3, #8
 8004786:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	607a      	str	r2, [r7, #4]
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	b2d2      	uxtb	r2, r2
 8004792:	701a      	strb	r2, [r3, #0]
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00d      	beq.n	80047d6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	1c53      	adds	r3, r2, #1
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	1c59      	adds	r1, r3, #1
 80047c4:	6179      	str	r1, [r7, #20]
 80047c6:	7812      	ldrb	r2, [r2, #0]
 80047c8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3b01      	subs	r3, #1
 80047ce:	607b      	str	r3, [r7, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1f1      	bne.n	80047ba <mem_cpy+0x1a>
	}
}
 80047d6:	bf00      	nop
 80047d8:	371c      	adds	r7, #28
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80047e2:	b480      	push	{r7}
 80047e4:	b087      	sub	sp, #28
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	617a      	str	r2, [r7, #20]
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	3b01      	subs	r3, #1
 8004802:	607b      	str	r3, [r7, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f3      	bne.n	80047f2 <mem_set+0x10>
}
 800480a:	bf00      	nop
 800480c:	bf00      	nop
 800480e:	371c      	adds	r7, #28
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004818:	b480      	push	{r7}
 800481a:	b089      	sub	sp, #36	; 0x24
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	61fb      	str	r3, [r7, #28]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800482c:	2300      	movs	r3, #0
 800482e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	61fa      	str	r2, [r7, #28]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	4619      	mov	r1, r3
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	61ba      	str	r2, [r7, #24]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	1acb      	subs	r3, r1, r3
 8004844:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3b01      	subs	r3, #1
 800484a:	607b      	str	r3, [r7, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <mem_cmp+0x40>
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0eb      	beq.n	8004830 <mem_cmp+0x18>

	return r;
 8004858:	697b      	ldr	r3, [r7, #20]
}
 800485a:	4618      	mov	r0, r3
 800485c:	3724      	adds	r7, #36	; 0x24
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
 800486e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004870:	e002      	b.n	8004878 <chk_chr+0x12>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	3301      	adds	r3, #1
 8004876:	607b      	str	r3, [r7, #4]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <chk_chr+0x26>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	461a      	mov	r2, r3
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	4293      	cmp	r3, r2
 800488a:	d1f2      	bne.n	8004872 <chk_chr+0xc>
	return *str;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	781b      	ldrb	r3, [r3, #0]
}
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80048a6:	2300      	movs	r3, #0
 80048a8:	60bb      	str	r3, [r7, #8]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	e029      	b.n	8004904 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80048b0:	4a27      	ldr	r2, [pc, #156]	; (8004950 <chk_lock+0xb4>)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	4413      	add	r3, r2
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d01d      	beq.n	80048fa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80048be:	4a24      	ldr	r2, [pc, #144]	; (8004950 <chk_lock+0xb4>)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	4413      	add	r3, r2
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d116      	bne.n	80048fe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80048d0:	4a1f      	ldr	r2, [pc, #124]	; (8004950 <chk_lock+0xb4>)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	4413      	add	r3, r2
 80048d8:	3304      	adds	r3, #4
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d10c      	bne.n	80048fe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80048e4:	4a1a      	ldr	r2, [pc, #104]	; (8004950 <chk_lock+0xb4>)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	4413      	add	r3, r2
 80048ec:	3308      	adds	r3, #8
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d102      	bne.n	80048fe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80048f8:	e007      	b.n	800490a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80048fa:	2301      	movs	r3, #1
 80048fc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	3301      	adds	r3, #1
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d9d2      	bls.n	80048b0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b02      	cmp	r3, #2
 800490e:	d109      	bne.n	8004924 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d102      	bne.n	800491c <chk_lock+0x80>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b02      	cmp	r3, #2
 800491a:	d101      	bne.n	8004920 <chk_lock+0x84>
 800491c:	2300      	movs	r3, #0
 800491e:	e010      	b.n	8004942 <chk_lock+0xa6>
 8004920:	2312      	movs	r3, #18
 8004922:	e00e      	b.n	8004942 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d108      	bne.n	800493c <chk_lock+0xa0>
 800492a:	4a09      	ldr	r2, [pc, #36]	; (8004950 <chk_lock+0xb4>)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	011b      	lsls	r3, r3, #4
 8004930:	4413      	add	r3, r2
 8004932:	330c      	adds	r3, #12
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800493a:	d101      	bne.n	8004940 <chk_lock+0xa4>
 800493c:	2310      	movs	r3, #16
 800493e:	e000      	b.n	8004942 <chk_lock+0xa6>
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	20001234 	.word	0x20001234

08004954 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800495a:	2300      	movs	r3, #0
 800495c:	607b      	str	r3, [r7, #4]
 800495e:	e002      	b.n	8004966 <enq_lock+0x12>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3301      	adds	r3, #1
 8004964:	607b      	str	r3, [r7, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d806      	bhi.n	800497a <enq_lock+0x26>
 800496c:	4a09      	ldr	r2, [pc, #36]	; (8004994 <enq_lock+0x40>)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	4413      	add	r3, r2
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1f2      	bne.n	8004960 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b02      	cmp	r3, #2
 800497e:	bf14      	ite	ne
 8004980:	2301      	movne	r3, #1
 8004982:	2300      	moveq	r3, #0
 8004984:	b2db      	uxtb	r3, r3
}
 8004986:	4618      	mov	r0, r3
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	20001234 	.word	0x20001234

08004998 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80049a2:	2300      	movs	r3, #0
 80049a4:	60fb      	str	r3, [r7, #12]
 80049a6:	e01f      	b.n	80049e8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80049a8:	4a41      	ldr	r2, [pc, #260]	; (8004ab0 <inc_lock+0x118>)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	4413      	add	r3, r2
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d113      	bne.n	80049e2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80049ba:	4a3d      	ldr	r2, [pc, #244]	; (8004ab0 <inc_lock+0x118>)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	4413      	add	r3, r2
 80049c2:	3304      	adds	r3, #4
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d109      	bne.n	80049e2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80049ce:	4a38      	ldr	r2, [pc, #224]	; (8004ab0 <inc_lock+0x118>)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	4413      	add	r3, r2
 80049d6:	3308      	adds	r3, #8
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80049de:	429a      	cmp	r2, r3
 80049e0:	d006      	beq.n	80049f0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	3301      	adds	r3, #1
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d9dc      	bls.n	80049a8 <inc_lock+0x10>
 80049ee:	e000      	b.n	80049f2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80049f0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d132      	bne.n	8004a5e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80049f8:	2300      	movs	r3, #0
 80049fa:	60fb      	str	r3, [r7, #12]
 80049fc:	e002      	b.n	8004a04 <inc_lock+0x6c>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	3301      	adds	r3, #1
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d806      	bhi.n	8004a18 <inc_lock+0x80>
 8004a0a:	4a29      	ldr	r2, [pc, #164]	; (8004ab0 <inc_lock+0x118>)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	011b      	lsls	r3, r3, #4
 8004a10:	4413      	add	r3, r2
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1f2      	bne.n	80049fe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d101      	bne.n	8004a22 <inc_lock+0x8a>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	e040      	b.n	8004aa4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	4922      	ldr	r1, [pc, #136]	; (8004ab0 <inc_lock+0x118>)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	011b      	lsls	r3, r3, #4
 8004a2c:	440b      	add	r3, r1
 8004a2e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	491e      	ldr	r1, [pc, #120]	; (8004ab0 <inc_lock+0x118>)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	440b      	add	r3, r1
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	695a      	ldr	r2, [r3, #20]
 8004a44:	491a      	ldr	r1, [pc, #104]	; (8004ab0 <inc_lock+0x118>)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	440b      	add	r3, r1
 8004a4c:	3308      	adds	r3, #8
 8004a4e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004a50:	4a17      	ldr	r2, [pc, #92]	; (8004ab0 <inc_lock+0x118>)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	4413      	add	r3, r2
 8004a58:	330c      	adds	r3, #12
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d009      	beq.n	8004a78 <inc_lock+0xe0>
 8004a64:	4a12      	ldr	r2, [pc, #72]	; (8004ab0 <inc_lock+0x118>)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	4413      	add	r3, r2
 8004a6c:	330c      	adds	r3, #12
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <inc_lock+0xe0>
 8004a74:	2300      	movs	r3, #0
 8004a76:	e015      	b.n	8004aa4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d108      	bne.n	8004a90 <inc_lock+0xf8>
 8004a7e:	4a0c      	ldr	r2, [pc, #48]	; (8004ab0 <inc_lock+0x118>)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	4413      	add	r3, r2
 8004a86:	330c      	adds	r3, #12
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	e001      	b.n	8004a94 <inc_lock+0xfc>
 8004a90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a94:	4906      	ldr	r1, [pc, #24]	; (8004ab0 <inc_lock+0x118>)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	440b      	add	r3, r1
 8004a9c:	330c      	adds	r3, #12
 8004a9e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	3301      	adds	r3, #1
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	20001234 	.word	0x20001234

08004ab4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	607b      	str	r3, [r7, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d825      	bhi.n	8004b14 <dec_lock+0x60>
		n = Files[i].ctr;
 8004ac8:	4a17      	ldr	r2, [pc, #92]	; (8004b28 <dec_lock+0x74>)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	011b      	lsls	r3, r3, #4
 8004ace:	4413      	add	r3, r2
 8004ad0:	330c      	adds	r3, #12
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004ad6:	89fb      	ldrh	r3, [r7, #14]
 8004ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004adc:	d101      	bne.n	8004ae2 <dec_lock+0x2e>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004ae2:	89fb      	ldrh	r3, [r7, #14]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <dec_lock+0x3a>
 8004ae8:	89fb      	ldrh	r3, [r7, #14]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004aee:	4a0e      	ldr	r2, [pc, #56]	; (8004b28 <dec_lock+0x74>)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	4413      	add	r3, r2
 8004af6:	330c      	adds	r3, #12
 8004af8:	89fa      	ldrh	r2, [r7, #14]
 8004afa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004afc:	89fb      	ldrh	r3, [r7, #14]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d105      	bne.n	8004b0e <dec_lock+0x5a>
 8004b02:	4a09      	ldr	r2, [pc, #36]	; (8004b28 <dec_lock+0x74>)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	4413      	add	r3, r2
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	737b      	strb	r3, [r7, #13]
 8004b12:	e001      	b.n	8004b18 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004b14:	2302      	movs	r3, #2
 8004b16:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004b18:	7b7b      	ldrb	r3, [r7, #13]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	20001234 	.word	0x20001234

08004b2c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004b34:	2300      	movs	r3, #0
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	e010      	b.n	8004b5c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004b3a:	4a0d      	ldr	r2, [pc, #52]	; (8004b70 <clear_lock+0x44>)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	4413      	add	r3, r2
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d105      	bne.n	8004b56 <clear_lock+0x2a>
 8004b4a:	4a09      	ldr	r2, [pc, #36]	; (8004b70 <clear_lock+0x44>)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	011b      	lsls	r3, r3, #4
 8004b50:	4413      	add	r3, r2
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d9eb      	bls.n	8004b3a <clear_lock+0xe>
	}
}
 8004b62:	bf00      	nop
 8004b64:	bf00      	nop
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	20001234 	.word	0x20001234

08004b74 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	78db      	ldrb	r3, [r3, #3]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d034      	beq.n	8004bf2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	7858      	ldrb	r0, [r3, #1]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004b98:	2301      	movs	r3, #1
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	f7ff fd40 	bl	8004620 <disk_write>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <sync_window+0x38>
			res = FR_DISK_ERR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	73fb      	strb	r3, [r7, #15]
 8004baa:	e022      	b.n	8004bf2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	1ad2      	subs	r2, r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d217      	bcs.n	8004bf2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	789b      	ldrb	r3, [r3, #2]
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	e010      	b.n	8004bec <sync_window+0x78>
					wsect += fs->fsize;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	7858      	ldrb	r0, [r3, #1]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004bde:	2301      	movs	r3, #1
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	f7ff fd1d 	bl	8004620 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	3b01      	subs	r3, #1
 8004bea:	613b      	str	r3, [r7, #16]
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d8eb      	bhi.n	8004bca <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d01b      	beq.n	8004c4c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7ff ffad 	bl	8004b74 <sync_window>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004c1e:	7bfb      	ldrb	r3, [r7, #15]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d113      	bne.n	8004c4c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	7858      	ldrb	r0, [r3, #1]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004c2e:	2301      	movs	r3, #1
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	f7ff fcd5 	bl	80045e0 <disk_read>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d004      	beq.n	8004c46 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c40:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
	...

08004c58 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f7ff ff87 	bl	8004b74 <sync_window>
 8004c66:	4603      	mov	r3, r0
 8004c68:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d159      	bne.n	8004d24 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b03      	cmp	r3, #3
 8004c76:	d149      	bne.n	8004d0c <sync_fs+0xb4>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	791b      	ldrb	r3, [r3, #4]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d145      	bne.n	8004d0c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	899b      	ldrh	r3, [r3, #12]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	f7ff fda8 	bl	80047e2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3338      	adds	r3, #56	; 0x38
 8004c96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004c9a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff fd37 	bl	8004712 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3338      	adds	r3, #56	; 0x38
 8004ca8:	4921      	ldr	r1, [pc, #132]	; (8004d30 <sync_fs+0xd8>)
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff fd4c 	bl	8004748 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3338      	adds	r3, #56	; 0x38
 8004cb4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004cb8:	491e      	ldr	r1, [pc, #120]	; (8004d34 <sync_fs+0xdc>)
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff fd44 	bl	8004748 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3338      	adds	r3, #56	; 0x38
 8004cc4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	f7ff fd3a 	bl	8004748 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3338      	adds	r3, #56	; 0x38
 8004cd8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4610      	mov	r0, r2
 8004ce4:	f7ff fd30 	bl	8004748 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	7858      	ldrb	r0, [r3, #1]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d00:	2301      	movs	r3, #1
 8004d02:	f7ff fc8d 	bl	8004620 <disk_write>
			fs->fsi_flag = 0;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	785b      	ldrb	r3, [r3, #1]
 8004d10:	2200      	movs	r2, #0
 8004d12:	2100      	movs	r1, #0
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff fca3 	bl	8004660 <disk_ioctl>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <sync_fs+0xcc>
 8004d20:	2301      	movs	r3, #1
 8004d22:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	41615252 	.word	0x41615252
 8004d34:	61417272 	.word	0x61417272

08004d38 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	3b02      	subs	r3, #2
 8004d46:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	3b02      	subs	r3, #2
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d301      	bcc.n	8004d58 <clust2sect+0x20>
 8004d54:	2300      	movs	r3, #0
 8004d56:	e008      	b.n	8004d6a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	895b      	ldrh	r3, [r3, #10]
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	fb03 f202 	mul.w	r2, r3, r2
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d68:	4413      	add	r3, r2
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b086      	sub	sp, #24
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d904      	bls.n	8004d96 <get_fat+0x20>
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d302      	bcc.n	8004d9c <get_fat+0x26>
		val = 1;	/* Internal error */
 8004d96:	2301      	movs	r3, #1
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	e0bb      	b.n	8004f14 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004da0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	f000 8083 	beq.w	8004eb2 <get_fat+0x13c>
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	f300 80a7 	bgt.w	8004f00 <get_fat+0x18a>
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d002      	beq.n	8004dbc <get_fat+0x46>
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d056      	beq.n	8004e68 <get_fat+0xf2>
 8004dba:	e0a1      	b.n	8004f00 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	085b      	lsrs	r3, r3, #1
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	899b      	ldrh	r3, [r3, #12]
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004dda:	4413      	add	r3, r2
 8004ddc:	4619      	mov	r1, r3
 8004dde:	6938      	ldr	r0, [r7, #16]
 8004de0:	f7ff ff0c 	bl	8004bfc <move_window>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f040 808d 	bne.w	8004f06 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	1c5a      	adds	r2, r3, #1
 8004df0:	60fa      	str	r2, [r7, #12]
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	8992      	ldrh	r2, [r2, #12]
 8004df6:	fbb3 f1f2 	udiv	r1, r3, r2
 8004dfa:	fb01 f202 	mul.w	r2, r1, r2
 8004dfe:	1a9b      	subs	r3, r3, r2
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	4413      	add	r3, r2
 8004e04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e08:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	899b      	ldrh	r3, [r3, #12]
 8004e12:	4619      	mov	r1, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e1a:	4413      	add	r3, r2
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	6938      	ldr	r0, [r7, #16]
 8004e20:	f7ff feec 	bl	8004bfc <move_window>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d16f      	bne.n	8004f0a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	899b      	ldrh	r3, [r3, #12]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e36:	fb01 f202 	mul.w	r2, r1, r2
 8004e3a:	1a9b      	subs	r3, r3, r2
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e44:	021b      	lsls	r3, r3, #8
 8004e46:	461a      	mov	r2, r3
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <get_fat+0xe8>
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	091b      	lsrs	r3, r3, #4
 8004e5c:	e002      	b.n	8004e64 <get_fat+0xee>
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e64:	617b      	str	r3, [r7, #20]
			break;
 8004e66:	e055      	b.n	8004f14 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	899b      	ldrh	r3, [r3, #12]
 8004e70:	085b      	lsrs	r3, r3, #1
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	4619      	mov	r1, r3
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e7c:	4413      	add	r3, r2
 8004e7e:	4619      	mov	r1, r3
 8004e80:	6938      	ldr	r0, [r7, #16]
 8004e82:	f7ff febb 	bl	8004bfc <move_window>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d140      	bne.n	8004f0e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	8992      	ldrh	r2, [r2, #12]
 8004e9a:	fbb3 f0f2 	udiv	r0, r3, r2
 8004e9e:	fb00 f202 	mul.w	r2, r0, r2
 8004ea2:	1a9b      	subs	r3, r3, r2
 8004ea4:	440b      	add	r3, r1
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff fbf8 	bl	800469c <ld_word>
 8004eac:	4603      	mov	r3, r0
 8004eae:	617b      	str	r3, [r7, #20]
			break;
 8004eb0:	e030      	b.n	8004f14 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	899b      	ldrh	r3, [r3, #12]
 8004eba:	089b      	lsrs	r3, r3, #2
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ec6:	4413      	add	r3, r2
 8004ec8:	4619      	mov	r1, r3
 8004eca:	6938      	ldr	r0, [r7, #16]
 8004ecc:	f7ff fe96 	bl	8004bfc <move_window>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d11d      	bne.n	8004f12 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	8992      	ldrh	r2, [r2, #12]
 8004ee4:	fbb3 f0f2 	udiv	r0, r3, r2
 8004ee8:	fb00 f202 	mul.w	r2, r0, r2
 8004eec:	1a9b      	subs	r3, r3, r2
 8004eee:	440b      	add	r3, r1
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7ff fbeb 	bl	80046cc <ld_dword>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004efc:	617b      	str	r3, [r7, #20]
			break;
 8004efe:	e009      	b.n	8004f14 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004f00:	2301      	movs	r3, #1
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	e006      	b.n	8004f14 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f06:	bf00      	nop
 8004f08:	e004      	b.n	8004f14 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f0a:	bf00      	nop
 8004f0c:	e002      	b.n	8004f14 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004f0e:	bf00      	nop
 8004f10:	e000      	b.n	8004f14 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004f12:	bf00      	nop
		}
	}

	return val;
 8004f14:	697b      	ldr	r3, [r7, #20]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004f1e:	b590      	push	{r4, r7, lr}
 8004f20:	b089      	sub	sp, #36	; 0x24
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	60f8      	str	r0, [r7, #12]
 8004f26:	60b9      	str	r1, [r7, #8]
 8004f28:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	f240 8102 	bls.w	800513a <put_fat+0x21c>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	f080 80fc 	bcs.w	800513a <put_fat+0x21c>
		switch (fs->fs_type) {
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b03      	cmp	r3, #3
 8004f48:	f000 80b6 	beq.w	80050b8 <put_fat+0x19a>
 8004f4c:	2b03      	cmp	r3, #3
 8004f4e:	f300 80fd 	bgt.w	800514c <put_fat+0x22e>
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d003      	beq.n	8004f5e <put_fat+0x40>
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	f000 8083 	beq.w	8005062 <put_fat+0x144>
 8004f5c:	e0f6      	b.n	800514c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	61bb      	str	r3, [r7, #24]
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	085b      	lsrs	r3, r3, #1
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	4413      	add	r3, r2
 8004f6a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	899b      	ldrh	r3, [r3, #12]
 8004f74:	4619      	mov	r1, r3
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f7c:	4413      	add	r3, r2
 8004f7e:	4619      	mov	r1, r3
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f7ff fe3b 	bl	8004bfc <move_window>
 8004f86:	4603      	mov	r3, r0
 8004f88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004f8a:	7ffb      	ldrb	r3, [r7, #31]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f040 80d6 	bne.w	800513e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	1c5a      	adds	r2, r3, #1
 8004f9c:	61ba      	str	r2, [r7, #24]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	8992      	ldrh	r2, [r2, #12]
 8004fa2:	fbb3 f0f2 	udiv	r0, r3, r2
 8004fa6:	fb00 f202 	mul.w	r2, r0, r2
 8004faa:	1a9b      	subs	r3, r3, r2
 8004fac:	440b      	add	r3, r1
 8004fae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00d      	beq.n	8004fd6 <put_fat+0xb8>
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	b25b      	sxtb	r3, r3
 8004fc0:	f003 030f 	and.w	r3, r3, #15
 8004fc4:	b25a      	sxtb	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	b25b      	sxtb	r3, r3
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	b25b      	sxtb	r3, r3
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	e001      	b.n	8004fda <put_fat+0xbc>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	899b      	ldrh	r3, [r3, #12]
 8004fec:	4619      	mov	r1, r3
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ff4:	4413      	add	r3, r2
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f7ff fdff 	bl	8004bfc <move_window>
 8004ffe:	4603      	mov	r3, r0
 8005000:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005002:	7ffb      	ldrb	r3, [r7, #31]
 8005004:	2b00      	cmp	r3, #0
 8005006:	f040 809c 	bne.w	8005142 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	899b      	ldrh	r3, [r3, #12]
 8005014:	461a      	mov	r2, r3
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	fbb3 f0f2 	udiv	r0, r3, r2
 800501c:	fb00 f202 	mul.w	r2, r0, r2
 8005020:	1a9b      	subs	r3, r3, r2
 8005022:	440b      	add	r3, r1
 8005024:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <put_fat+0x11a>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	091b      	lsrs	r3, r3, #4
 8005034:	b2db      	uxtb	r3, r3
 8005036:	e00e      	b.n	8005056 <put_fat+0x138>
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	b25b      	sxtb	r3, r3
 800503e:	f023 030f 	bic.w	r3, r3, #15
 8005042:	b25a      	sxtb	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	0a1b      	lsrs	r3, r3, #8
 8005048:	b25b      	sxtb	r3, r3
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	b25b      	sxtb	r3, r3
 8005050:	4313      	orrs	r3, r2
 8005052:	b25b      	sxtb	r3, r3
 8005054:	b2db      	uxtb	r3, r3
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2201      	movs	r2, #1
 800505e:	70da      	strb	r2, [r3, #3]
			break;
 8005060:	e074      	b.n	800514c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	899b      	ldrh	r3, [r3, #12]
 800506a:	085b      	lsrs	r3, r3, #1
 800506c:	b29b      	uxth	r3, r3
 800506e:	4619      	mov	r1, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	fbb3 f3f1 	udiv	r3, r3, r1
 8005076:	4413      	add	r3, r2
 8005078:	4619      	mov	r1, r3
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f7ff fdbe 	bl	8004bfc <move_window>
 8005080:	4603      	mov	r3, r0
 8005082:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005084:	7ffb      	ldrb	r3, [r7, #31]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d15d      	bne.n	8005146 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	8992      	ldrh	r2, [r2, #12]
 8005098:	fbb3 f0f2 	udiv	r0, r3, r2
 800509c:	fb00 f202 	mul.w	r2, r0, r2
 80050a0:	1a9b      	subs	r3, r3, r2
 80050a2:	440b      	add	r3, r1
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	b292      	uxth	r2, r2
 80050a8:	4611      	mov	r1, r2
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff fb31 	bl	8004712 <st_word>
			fs->wflag = 1;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2201      	movs	r2, #1
 80050b4:	70da      	strb	r2, [r3, #3]
			break;
 80050b6:	e049      	b.n	800514c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	899b      	ldrh	r3, [r3, #12]
 80050c0:	089b      	lsrs	r3, r3, #2
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	4619      	mov	r1, r3
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80050cc:	4413      	add	r3, r2
 80050ce:	4619      	mov	r1, r3
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f7ff fd93 	bl	8004bfc <move_window>
 80050d6:	4603      	mov	r3, r0
 80050d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80050da:	7ffb      	ldrb	r3, [r7, #31]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d134      	bne.n	800514a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	8992      	ldrh	r2, [r2, #12]
 80050f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80050f8:	fb00 f202 	mul.w	r2, r0, r2
 80050fc:	1a9b      	subs	r3, r3, r2
 80050fe:	440b      	add	r3, r1
 8005100:	4618      	mov	r0, r3
 8005102:	f7ff fae3 	bl	80046cc <ld_dword>
 8005106:	4603      	mov	r3, r0
 8005108:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800510c:	4323      	orrs	r3, r4
 800510e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	8992      	ldrh	r2, [r2, #12]
 800511e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005122:	fb00 f202 	mul.w	r2, r0, r2
 8005126:	1a9b      	subs	r3, r3, r2
 8005128:	440b      	add	r3, r1
 800512a:	6879      	ldr	r1, [r7, #4]
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff fb0b 	bl	8004748 <st_dword>
			fs->wflag = 1;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2201      	movs	r2, #1
 8005136:	70da      	strb	r2, [r3, #3]
			break;
 8005138:	e008      	b.n	800514c <put_fat+0x22e>
		}
	}
 800513a:	bf00      	nop
 800513c:	e006      	b.n	800514c <put_fat+0x22e>
			if (res != FR_OK) break;
 800513e:	bf00      	nop
 8005140:	e004      	b.n	800514c <put_fat+0x22e>
			if (res != FR_OK) break;
 8005142:	bf00      	nop
 8005144:	e002      	b.n	800514c <put_fat+0x22e>
			if (res != FR_OK) break;
 8005146:	bf00      	nop
 8005148:	e000      	b.n	800514c <put_fat+0x22e>
			if (res != FR_OK) break;
 800514a:	bf00      	nop
	return res;
 800514c:	7ffb      	ldrb	r3, [r7, #31]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3724      	adds	r7, #36	; 0x24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd90      	pop	{r4, r7, pc}

08005156 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b088      	sub	sp, #32
 800515a:	af00      	add	r7, sp, #0
 800515c:	60f8      	str	r0, [r7, #12]
 800515e:	60b9      	str	r1, [r7, #8]
 8005160:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d904      	bls.n	800517c <remove_chain+0x26>
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	429a      	cmp	r2, r3
 800517a:	d301      	bcc.n	8005180 <remove_chain+0x2a>
 800517c:	2302      	movs	r3, #2
 800517e:	e04b      	b.n	8005218 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00c      	beq.n	80051a0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005186:	f04f 32ff 	mov.w	r2, #4294967295
 800518a:	6879      	ldr	r1, [r7, #4]
 800518c:	69b8      	ldr	r0, [r7, #24]
 800518e:	f7ff fec6 	bl	8004f1e <put_fat>
 8005192:	4603      	mov	r3, r0
 8005194:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005196:	7ffb      	ldrb	r3, [r7, #31]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <remove_chain+0x4a>
 800519c:	7ffb      	ldrb	r3, [r7, #31]
 800519e:	e03b      	b.n	8005218 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80051a0:	68b9      	ldr	r1, [r7, #8]
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f7ff fde7 	bl	8004d76 <get_fat>
 80051a8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d031      	beq.n	8005214 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d101      	bne.n	80051ba <remove_chain+0x64>
 80051b6:	2302      	movs	r3, #2
 80051b8:	e02e      	b.n	8005218 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c0:	d101      	bne.n	80051c6 <remove_chain+0x70>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e028      	b.n	8005218 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80051c6:	2200      	movs	r2, #0
 80051c8:	68b9      	ldr	r1, [r7, #8]
 80051ca:	69b8      	ldr	r0, [r7, #24]
 80051cc:	f7ff fea7 	bl	8004f1e <put_fat>
 80051d0:	4603      	mov	r3, r0
 80051d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80051d4:	7ffb      	ldrb	r3, [r7, #31]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <remove_chain+0x88>
 80051da:	7ffb      	ldrb	r3, [r7, #31]
 80051dc:	e01c      	b.n	8005218 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	699a      	ldr	r2, [r3, #24]
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	3b02      	subs	r3, #2
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d20b      	bcs.n	8005204 <remove_chain+0xae>
			fs->free_clst++;
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	791b      	ldrb	r3, [r3, #4]
 80051fa:	f043 0301 	orr.w	r3, r3, #1
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	429a      	cmp	r2, r3
 8005210:	d3c6      	bcc.n	80051a0 <remove_chain+0x4a>
 8005212:	e000      	b.n	8005216 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005214:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3720      	adds	r7, #32
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b088      	sub	sp, #32
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10d      	bne.n	8005252 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d004      	beq.n	800524c <create_chain+0x2c>
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	429a      	cmp	r2, r3
 800524a:	d31b      	bcc.n	8005284 <create_chain+0x64>
 800524c:	2301      	movs	r3, #1
 800524e:	61bb      	str	r3, [r7, #24]
 8005250:	e018      	b.n	8005284 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005252:	6839      	ldr	r1, [r7, #0]
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7ff fd8e 	bl	8004d76 <get_fat>
 800525a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d801      	bhi.n	8005266 <create_chain+0x46>
 8005262:	2301      	movs	r3, #1
 8005264:	e070      	b.n	8005348 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526c:	d101      	bne.n	8005272 <create_chain+0x52>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	e06a      	b.n	8005348 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	429a      	cmp	r2, r3
 800527a:	d201      	bcs.n	8005280 <create_chain+0x60>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	e063      	b.n	8005348 <create_chain+0x128>
		scl = clst;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	3301      	adds	r3, #1
 800528c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	69fa      	ldr	r2, [r7, #28]
 8005294:	429a      	cmp	r2, r3
 8005296:	d307      	bcc.n	80052a8 <create_chain+0x88>
				ncl = 2;
 8005298:	2302      	movs	r3, #2
 800529a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800529c:	69fa      	ldr	r2, [r7, #28]
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d901      	bls.n	80052a8 <create_chain+0x88>
 80052a4:	2300      	movs	r3, #0
 80052a6:	e04f      	b.n	8005348 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80052a8:	69f9      	ldr	r1, [r7, #28]
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7ff fd63 	bl	8004d76 <get_fat>
 80052b0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00e      	beq.n	80052d6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d003      	beq.n	80052c6 <create_chain+0xa6>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c4:	d101      	bne.n	80052ca <create_chain+0xaa>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	e03e      	b.n	8005348 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80052ca:	69fa      	ldr	r2, [r7, #28]
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d1da      	bne.n	8005288 <create_chain+0x68>
 80052d2:	2300      	movs	r3, #0
 80052d4:	e038      	b.n	8005348 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80052d6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80052d8:	f04f 32ff 	mov.w	r2, #4294967295
 80052dc:	69f9      	ldr	r1, [r7, #28]
 80052de:	6938      	ldr	r0, [r7, #16]
 80052e0:	f7ff fe1d 	bl	8004f1e <put_fat>
 80052e4:	4603      	mov	r3, r0
 80052e6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80052e8:	7dfb      	ldrb	r3, [r7, #23]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d109      	bne.n	8005302 <create_chain+0xe2>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d006      	beq.n	8005302 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80052f4:	69fa      	ldr	r2, [r7, #28]
 80052f6:	6839      	ldr	r1, [r7, #0]
 80052f8:	6938      	ldr	r0, [r7, #16]
 80052fa:	f7ff fe10 	bl	8004f1e <put_fat>
 80052fe:	4603      	mov	r3, r0
 8005300:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005302:	7dfb      	ldrb	r3, [r7, #23]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d116      	bne.n	8005336 <create_chain+0x116>
		fs->last_clst = ncl;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	69fa      	ldr	r2, [r7, #28]
 800530c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	699a      	ldr	r2, [r3, #24]
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	3b02      	subs	r3, #2
 8005318:	429a      	cmp	r2, r3
 800531a:	d804      	bhi.n	8005326 <create_chain+0x106>
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	1e5a      	subs	r2, r3, #1
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	791b      	ldrb	r3, [r3, #4]
 800532a:	f043 0301 	orr.w	r3, r3, #1
 800532e:	b2da      	uxtb	r2, r3
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	711a      	strb	r2, [r3, #4]
 8005334:	e007      	b.n	8005346 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005336:	7dfb      	ldrb	r3, [r7, #23]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d102      	bne.n	8005342 <create_chain+0x122>
 800533c:	f04f 33ff 	mov.w	r3, #4294967295
 8005340:	e000      	b.n	8005344 <create_chain+0x124>
 8005342:	2301      	movs	r3, #1
 8005344:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005346:	69fb      	ldr	r3, [r7, #28]
}
 8005348:	4618      	mov	r0, r3
 800534a:	3720      	adds	r7, #32
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005364:	3304      	adds	r3, #4
 8005366:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	899b      	ldrh	r3, [r3, #12]
 800536c:	461a      	mov	r2, r3
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	fbb3 f3f2 	udiv	r3, r3, r2
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	8952      	ldrh	r2, [r2, #10]
 8005378:	fbb3 f3f2 	udiv	r3, r3, r2
 800537c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1d1a      	adds	r2, r3, #4
 8005382:	613a      	str	r2, [r7, #16]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <clmt_clust+0x42>
 800538e:	2300      	movs	r3, #0
 8005390:	e010      	b.n	80053b4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	429a      	cmp	r2, r3
 8005398:	d307      	bcc.n	80053aa <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	617b      	str	r3, [r7, #20]
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	3304      	adds	r3, #4
 80053a6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80053a8:	e7e9      	b.n	800537e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80053aa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	4413      	add	r3, r2
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	371c      	adds	r7, #28
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053d6:	d204      	bcs.n	80053e2 <dir_sdi+0x22>
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	f003 031f 	and.w	r3, r3, #31
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80053e2:	2302      	movs	r3, #2
 80053e4:	e071      	b.n	80054ca <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d106      	bne.n	8005406 <dir_sdi+0x46>
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d902      	bls.n	8005406 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005404:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10c      	bne.n	8005426 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	095b      	lsrs	r3, r3, #5
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	8912      	ldrh	r2, [r2, #8]
 8005414:	4293      	cmp	r3, r2
 8005416:	d301      	bcc.n	800541c <dir_sdi+0x5c>
 8005418:	2302      	movs	r3, #2
 800541a:	e056      	b.n	80054ca <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	61da      	str	r2, [r3, #28]
 8005424:	e02d      	b.n	8005482 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	895b      	ldrh	r3, [r3, #10]
 800542a:	461a      	mov	r2, r3
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	899b      	ldrh	r3, [r3, #12]
 8005430:	fb02 f303 	mul.w	r3, r2, r3
 8005434:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005436:	e019      	b.n	800546c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6979      	ldr	r1, [r7, #20]
 800543c:	4618      	mov	r0, r3
 800543e:	f7ff fc9a 	bl	8004d76 <get_fat>
 8005442:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544a:	d101      	bne.n	8005450 <dir_sdi+0x90>
 800544c:	2301      	movs	r3, #1
 800544e:	e03c      	b.n	80054ca <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d904      	bls.n	8005460 <dir_sdi+0xa0>
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	429a      	cmp	r2, r3
 800545e:	d301      	bcc.n	8005464 <dir_sdi+0xa4>
 8005460:	2302      	movs	r3, #2
 8005462:	e032      	b.n	80054ca <dir_sdi+0x10a>
			ofs -= csz;
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	429a      	cmp	r2, r3
 8005472:	d2e1      	bcs.n	8005438 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005474:	6979      	ldr	r1, [r7, #20]
 8005476:	6938      	ldr	r0, [r7, #16]
 8005478:	f7ff fc5e 	bl	8004d38 <clust2sect>
 800547c:	4602      	mov	r2, r0
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <dir_sdi+0xd4>
 8005490:	2302      	movs	r3, #2
 8005492:	e01a      	b.n	80054ca <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	69da      	ldr	r2, [r3, #28]
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	899b      	ldrh	r3, [r3, #12]
 800549c:	4619      	mov	r1, r3
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80054a4:	441a      	add	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	899b      	ldrh	r3, [r3, #12]
 80054b4:	461a      	mov	r2, r3
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80054bc:	fb00 f202 	mul.w	r2, r0, r2
 80054c0:	1a9b      	subs	r3, r3, r2
 80054c2:	18ca      	adds	r2, r1, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b086      	sub	sp, #24
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	3320      	adds	r3, #32
 80054e8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <dir_next+0x28>
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054f8:	d301      	bcc.n	80054fe <dir_next+0x2c>
 80054fa:	2304      	movs	r3, #4
 80054fc:	e0bb      	b.n	8005676 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	899b      	ldrh	r3, [r3, #12]
 8005502:	461a      	mov	r2, r3
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	fbb3 f1f2 	udiv	r1, r3, r2
 800550a:	fb01 f202 	mul.w	r2, r1, r2
 800550e:	1a9b      	subs	r3, r3, r2
 8005510:	2b00      	cmp	r3, #0
 8005512:	f040 809d 	bne.w	8005650 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10b      	bne.n	8005540 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	095b      	lsrs	r3, r3, #5
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	8912      	ldrh	r2, [r2, #8]
 8005530:	4293      	cmp	r3, r2
 8005532:	f0c0 808d 	bcc.w	8005650 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	61da      	str	r2, [r3, #28]
 800553c:	2304      	movs	r3, #4
 800553e:	e09a      	b.n	8005676 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	899b      	ldrh	r3, [r3, #12]
 8005544:	461a      	mov	r2, r3
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	fbb3 f3f2 	udiv	r3, r3, r2
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	8952      	ldrh	r2, [r2, #10]
 8005550:	3a01      	subs	r2, #1
 8005552:	4013      	ands	r3, r2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d17b      	bne.n	8005650 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	4619      	mov	r1, r3
 8005560:	4610      	mov	r0, r2
 8005562:	f7ff fc08 	bl	8004d76 <get_fat>
 8005566:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d801      	bhi.n	8005572 <dir_next+0xa0>
 800556e:	2302      	movs	r3, #2
 8005570:	e081      	b.n	8005676 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005578:	d101      	bne.n	800557e <dir_next+0xac>
 800557a:	2301      	movs	r3, #1
 800557c:	e07b      	b.n	8005676 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	429a      	cmp	r2, r3
 8005586:	d359      	bcc.n	800563c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d104      	bne.n	8005598 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	61da      	str	r2, [r3, #28]
 8005594:	2304      	movs	r3, #4
 8005596:	e06e      	b.n	8005676 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	4619      	mov	r1, r3
 80055a0:	4610      	mov	r0, r2
 80055a2:	f7ff fe3d 	bl	8005220 <create_chain>
 80055a6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <dir_next+0xe0>
 80055ae:	2307      	movs	r3, #7
 80055b0:	e061      	b.n	8005676 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d101      	bne.n	80055bc <dir_next+0xea>
 80055b8:	2302      	movs	r3, #2
 80055ba:	e05c      	b.n	8005676 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c2:	d101      	bne.n	80055c8 <dir_next+0xf6>
 80055c4:	2301      	movs	r3, #1
 80055c6:	e056      	b.n	8005676 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f7ff fad3 	bl	8004b74 <sync_window>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d001      	beq.n	80055d8 <dir_next+0x106>
 80055d4:	2301      	movs	r3, #1
 80055d6:	e04e      	b.n	8005676 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	899b      	ldrh	r3, [r3, #12]
 80055e2:	461a      	mov	r2, r3
 80055e4:	2100      	movs	r1, #0
 80055e6:	f7ff f8fc 	bl	80047e2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80055ea:	2300      	movs	r3, #0
 80055ec:	613b      	str	r3, [r7, #16]
 80055ee:	6979      	ldr	r1, [r7, #20]
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f7ff fba1 	bl	8004d38 <clust2sect>
 80055f6:	4602      	mov	r2, r0
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	635a      	str	r2, [r3, #52]	; 0x34
 80055fc:	e012      	b.n	8005624 <dir_next+0x152>
						fs->wflag = 1;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2201      	movs	r2, #1
 8005602:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f7ff fab5 	bl	8004b74 <sync_window>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <dir_next+0x142>
 8005610:	2301      	movs	r3, #1
 8005612:	e030      	b.n	8005676 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	3301      	adds	r3, #1
 8005618:	613b      	str	r3, [r7, #16]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561e:	1c5a      	adds	r2, r3, #1
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	635a      	str	r2, [r3, #52]	; 0x34
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	895b      	ldrh	r3, [r3, #10]
 8005628:	461a      	mov	r2, r3
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	4293      	cmp	r3, r2
 800562e:	d3e6      	bcc.n	80055fe <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	1ad2      	subs	r2, r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005642:	6979      	ldr	r1, [r7, #20]
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f7ff fb77 	bl	8004d38 <clust2sect>
 800564a:	4602      	mov	r2, r0
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	899b      	ldrh	r3, [r3, #12]
 8005660:	461a      	mov	r2, r3
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	fbb3 f0f2 	udiv	r0, r3, r2
 8005668:	fb00 f202 	mul.w	r2, r0, r2
 800566c:	1a9b      	subs	r3, r3, r2
 800566e:	18ca      	adds	r2, r1, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b086      	sub	sp, #24
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800568e:	2100      	movs	r1, #0
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7ff fe95 	bl	80053c0 <dir_sdi>
 8005696:	4603      	mov	r3, r0
 8005698:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800569a:	7dfb      	ldrb	r3, [r7, #23]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d12b      	bne.n	80056f8 <dir_alloc+0x7a>
		n = 0;
 80056a0:	2300      	movs	r3, #0
 80056a2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	4619      	mov	r1, r3
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f7ff faa6 	bl	8004bfc <move_window>
 80056b0:	4603      	mov	r3, r0
 80056b2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80056b4:	7dfb      	ldrb	r3, [r7, #23]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d11d      	bne.n	80056f6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	2be5      	cmp	r3, #229	; 0xe5
 80056c2:	d004      	beq.n	80056ce <dir_alloc+0x50>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d107      	bne.n	80056de <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	3301      	adds	r3, #1
 80056d2:	613b      	str	r3, [r7, #16]
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d102      	bne.n	80056e2 <dir_alloc+0x64>
 80056dc:	e00c      	b.n	80056f8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80056de:	2300      	movs	r3, #0
 80056e0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80056e2:	2101      	movs	r1, #1
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7ff fef4 	bl	80054d2 <dir_next>
 80056ea:	4603      	mov	r3, r0
 80056ec:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80056ee:	7dfb      	ldrb	r3, [r7, #23]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d0d7      	beq.n	80056a4 <dir_alloc+0x26>
 80056f4:	e000      	b.n	80056f8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80056f6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80056f8:	7dfb      	ldrb	r3, [r7, #23]
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	d101      	bne.n	8005702 <dir_alloc+0x84>
 80056fe:	2307      	movs	r3, #7
 8005700:	75fb      	strb	r3, [r7, #23]
	return res;
 8005702:	7dfb      	ldrb	r3, [r7, #23]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3718      	adds	r7, #24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	331a      	adds	r3, #26
 800571a:	4618      	mov	r0, r3
 800571c:	f7fe ffbe 	bl	800469c <ld_word>
 8005720:	4603      	mov	r3, r0
 8005722:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b03      	cmp	r3, #3
 800572a:	d109      	bne.n	8005740 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	3314      	adds	r3, #20
 8005730:	4618      	mov	r0, r3
 8005732:	f7fe ffb3 	bl	800469c <ld_word>
 8005736:	4603      	mov	r3, r0
 8005738:	041b      	lsls	r3, r3, #16
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	4313      	orrs	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005740:	68fb      	ldr	r3, [r7, #12]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b084      	sub	sp, #16
 800574e:	af00      	add	r7, sp, #0
 8005750:	60f8      	str	r0, [r7, #12]
 8005752:	60b9      	str	r1, [r7, #8]
 8005754:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	331a      	adds	r3, #26
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	b292      	uxth	r2, r2
 800575e:	4611      	mov	r1, r2
 8005760:	4618      	mov	r0, r3
 8005762:	f7fe ffd6 	bl	8004712 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	2b03      	cmp	r3, #3
 800576c:	d109      	bne.n	8005782 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f103 0214 	add.w	r2, r3, #20
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	0c1b      	lsrs	r3, r3, #16
 8005778:	b29b      	uxth	r3, r3
 800577a:	4619      	mov	r1, r3
 800577c:	4610      	mov	r0, r2
 800577e:	f7fe ffc8 	bl	8004712 <st_word>
	}
}
 8005782:	bf00      	nop
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
	...

0800578c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800578c:	b590      	push	{r4, r7, lr}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	331a      	adds	r3, #26
 800579a:	4618      	mov	r0, r3
 800579c:	f7fe ff7e 	bl	800469c <ld_word>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <cmp_lfn+0x1e>
 80057a6:	2300      	movs	r3, #0
 80057a8:	e059      	b.n	800585e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057b2:	1e5a      	subs	r2, r3, #1
 80057b4:	4613      	mov	r3, r2
 80057b6:	005b      	lsls	r3, r3, #1
 80057b8:	4413      	add	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80057c0:	2301      	movs	r3, #1
 80057c2:	81fb      	strh	r3, [r7, #14]
 80057c4:	2300      	movs	r3, #0
 80057c6:	613b      	str	r3, [r7, #16]
 80057c8:	e033      	b.n	8005832 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80057ca:	4a27      	ldr	r2, [pc, #156]	; (8005868 <cmp_lfn+0xdc>)
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	4413      	add	r3, r2
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	461a      	mov	r2, r3
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	4413      	add	r3, r2
 80057d8:	4618      	mov	r0, r3
 80057da:	f7fe ff5f 	bl	800469c <ld_word>
 80057de:	4603      	mov	r3, r0
 80057e0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80057e2:	89fb      	ldrh	r3, [r7, #14]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d01a      	beq.n	800581e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	2bfe      	cmp	r3, #254	; 0xfe
 80057ec:	d812      	bhi.n	8005814 <cmp_lfn+0x88>
 80057ee:	89bb      	ldrh	r3, [r7, #12]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f001 ff65 	bl	80076c0 <ff_wtoupper>
 80057f6:	4603      	mov	r3, r0
 80057f8:	461c      	mov	r4, r3
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	617a      	str	r2, [r7, #20]
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	4413      	add	r3, r2
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	4618      	mov	r0, r3
 800580a:	f001 ff59 	bl	80076c0 <ff_wtoupper>
 800580e:	4603      	mov	r3, r0
 8005810:	429c      	cmp	r4, r3
 8005812:	d001      	beq.n	8005818 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005814:	2300      	movs	r3, #0
 8005816:	e022      	b.n	800585e <cmp_lfn+0xd2>
			}
			wc = uc;
 8005818:	89bb      	ldrh	r3, [r7, #12]
 800581a:	81fb      	strh	r3, [r7, #14]
 800581c:	e006      	b.n	800582c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800581e:	89bb      	ldrh	r3, [r7, #12]
 8005820:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005824:	4293      	cmp	r3, r2
 8005826:	d001      	beq.n	800582c <cmp_lfn+0xa0>
 8005828:	2300      	movs	r3, #0
 800582a:	e018      	b.n	800585e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	3301      	adds	r3, #1
 8005830:	613b      	str	r3, [r7, #16]
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	2b0c      	cmp	r3, #12
 8005836:	d9c8      	bls.n	80057ca <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00b      	beq.n	800585c <cmp_lfn+0xd0>
 8005844:	89fb      	ldrh	r3, [r7, #14]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d008      	beq.n	800585c <cmp_lfn+0xd0>
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	4413      	add	r3, r2
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d001      	beq.n	800585c <cmp_lfn+0xd0>
 8005858:	2300      	movs	r3, #0
 800585a:	e000      	b.n	800585e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800585c:	2301      	movs	r3, #1
}
 800585e:	4618      	mov	r0, r3
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	bd90      	pop	{r4, r7, pc}
 8005866:	bf00      	nop
 8005868:	08008338 	.word	0x08008338

0800586c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b088      	sub	sp, #32
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	4611      	mov	r1, r2
 8005878:	461a      	mov	r2, r3
 800587a:	460b      	mov	r3, r1
 800587c:	71fb      	strb	r3, [r7, #7]
 800587e:	4613      	mov	r3, r2
 8005880:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	330d      	adds	r3, #13
 8005886:	79ba      	ldrb	r2, [r7, #6]
 8005888:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	330b      	adds	r3, #11
 800588e:	220f      	movs	r2, #15
 8005890:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	330c      	adds	r3, #12
 8005896:	2200      	movs	r2, #0
 8005898:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	331a      	adds	r3, #26
 800589e:	2100      	movs	r1, #0
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fe ff36 	bl	8004712 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80058a6:	79fb      	ldrb	r3, [r7, #7]
 80058a8:	1e5a      	subs	r2, r3, #1
 80058aa:	4613      	mov	r3, r2
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	4413      	add	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80058b6:	2300      	movs	r3, #0
 80058b8:	82fb      	strh	r3, [r7, #22]
 80058ba:	2300      	movs	r3, #0
 80058bc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80058be:	8afb      	ldrh	r3, [r7, #22]
 80058c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d007      	beq.n	80058d8 <put_lfn+0x6c>
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	61fa      	str	r2, [r7, #28]
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4413      	add	r3, r2
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80058d8:	4a17      	ldr	r2, [pc, #92]	; (8005938 <put_lfn+0xcc>)
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	4413      	add	r3, r2
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	461a      	mov	r2, r3
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	4413      	add	r3, r2
 80058e6:	8afa      	ldrh	r2, [r7, #22]
 80058e8:	4611      	mov	r1, r2
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fe ff11 	bl	8004712 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80058f0:	8afb      	ldrh	r3, [r7, #22]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d102      	bne.n	80058fc <put_lfn+0x90>
 80058f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80058fa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	3301      	adds	r3, #1
 8005900:	61bb      	str	r3, [r7, #24]
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	2b0c      	cmp	r3, #12
 8005906:	d9da      	bls.n	80058be <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005908:	8afb      	ldrh	r3, [r7, #22]
 800590a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800590e:	4293      	cmp	r3, r2
 8005910:	d006      	beq.n	8005920 <put_lfn+0xb4>
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	4413      	add	r3, r2
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d103      	bne.n	8005928 <put_lfn+0xbc>
 8005920:	79fb      	ldrb	r3, [r7, #7]
 8005922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005926:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	79fa      	ldrb	r2, [r7, #7]
 800592c:	701a      	strb	r2, [r3, #0]
}
 800592e:	bf00      	nop
 8005930:	3720      	adds	r7, #32
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	08008338 	.word	0x08008338

0800593c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b08c      	sub	sp, #48	; 0x30
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
 8005948:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800594a:	220b      	movs	r2, #11
 800594c:	68b9      	ldr	r1, [r7, #8]
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f7fe ff26 	bl	80047a0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	2b05      	cmp	r3, #5
 8005958:	d92b      	bls.n	80059b2 <gen_numname+0x76>
		sr = seq;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800595e:	e022      	b.n	80059a6 <gen_numname+0x6a>
			wc = *lfn++;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	1c9a      	adds	r2, r3, #2
 8005964:	607a      	str	r2, [r7, #4]
 8005966:	881b      	ldrh	r3, [r3, #0]
 8005968:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800596a:	2300      	movs	r3, #0
 800596c:	62bb      	str	r3, [r7, #40]	; 0x28
 800596e:	e017      	b.n	80059a0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	005a      	lsls	r2, r3, #1
 8005974:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	4413      	add	r3, r2
 800597c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800597e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005980:	085b      	lsrs	r3, r3, #1
 8005982:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d005      	beq.n	800599a <gen_numname+0x5e>
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8005994:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8005998:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800599a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599c:	3301      	adds	r3, #1
 800599e:	62bb      	str	r3, [r7, #40]	; 0x28
 80059a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a2:	2b0f      	cmp	r3, #15
 80059a4:	d9e4      	bls.n	8005970 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1d8      	bne.n	8005960 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80059b2:	2307      	movs	r3, #7
 80059b4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	3330      	adds	r3, #48	; 0x30
 80059c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80059c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80059ca:	2b39      	cmp	r3, #57	; 0x39
 80059cc:	d904      	bls.n	80059d8 <gen_numname+0x9c>
 80059ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80059d2:	3307      	adds	r3, #7
 80059d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80059d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059da:	1e5a      	subs	r2, r3, #1
 80059dc:	62ba      	str	r2, [r7, #40]	; 0x28
 80059de:	3330      	adds	r3, #48	; 0x30
 80059e0:	443b      	add	r3, r7
 80059e2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80059e6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	091b      	lsrs	r3, r3, #4
 80059ee:	603b      	str	r3, [r7, #0]
	} while (seq);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1df      	bne.n	80059b6 <gen_numname+0x7a>
	ns[i] = '~';
 80059f6:	f107 0214 	add.w	r2, r7, #20
 80059fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fc:	4413      	add	r3, r2
 80059fe:	227e      	movs	r2, #126	; 0x7e
 8005a00:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005a02:	2300      	movs	r3, #0
 8005a04:	627b      	str	r3, [r7, #36]	; 0x24
 8005a06:	e002      	b.n	8005a0e <gen_numname+0xd2>
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d205      	bcs.n	8005a22 <gen_numname+0xe6>
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	4413      	add	r3, r2
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b20      	cmp	r3, #32
 8005a20:	d1f2      	bne.n	8005a08 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a24:	2b07      	cmp	r3, #7
 8005a26:	d807      	bhi.n	8005a38 <gen_numname+0xfc>
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	62ba      	str	r2, [r7, #40]	; 0x28
 8005a2e:	3330      	adds	r3, #48	; 0x30
 8005a30:	443b      	add	r3, r7
 8005a32:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005a36:	e000      	b.n	8005a3a <gen_numname+0xfe>
 8005a38:	2120      	movs	r1, #32
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	627a      	str	r2, [r7, #36]	; 0x24
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4413      	add	r3, r2
 8005a44:	460a      	mov	r2, r1
 8005a46:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	2b07      	cmp	r3, #7
 8005a4c:	d9e9      	bls.n	8005a22 <gen_numname+0xe6>
}
 8005a4e:	bf00      	nop
 8005a50:	bf00      	nop
 8005a52:	3730      	adds	r7, #48	; 0x30
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005a60:	2300      	movs	r3, #0
 8005a62:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005a64:	230b      	movs	r3, #11
 8005a66:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005a68:	7bfb      	ldrb	r3, [r7, #15]
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	0852      	lsrs	r2, r2, #1
 8005a6e:	01db      	lsls	r3, r3, #7
 8005a70:	4313      	orrs	r3, r2
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	1c59      	adds	r1, r3, #1
 8005a78:	6079      	str	r1, [r7, #4]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	3b01      	subs	r3, #1
 8005a84:	60bb      	str	r3, [r7, #8]
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1ed      	bne.n	8005a68 <sum_sfn+0x10>
	return sum;
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b086      	sub	sp, #24
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7ff fc88 	bl	80053c0 <dir_sdi>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005ab4:	7dfb      	ldrb	r3, [r7, #23]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <dir_find+0x24>
 8005aba:	7dfb      	ldrb	r3, [r7, #23]
 8005abc:	e0a9      	b.n	8005c12 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005abe:	23ff      	movs	r3, #255	; 0xff
 8005ac0:	753b      	strb	r3, [r7, #20]
 8005ac2:	7d3b      	ldrb	r3, [r7, #20]
 8005ac4:	757b      	strb	r3, [r7, #21]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8005acc:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	6938      	ldr	r0, [r7, #16]
 8005ad6:	f7ff f891 	bl	8004bfc <move_window>
 8005ada:	4603      	mov	r3, r0
 8005adc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005ade:	7dfb      	ldrb	r3, [r7, #23]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f040 8090 	bne.w	8005c06 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005aee:	7dbb      	ldrb	r3, [r7, #22]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d102      	bne.n	8005afa <dir_find+0x60>
 8005af4:	2304      	movs	r3, #4
 8005af6:	75fb      	strb	r3, [r7, #23]
 8005af8:	e08a      	b.n	8005c10 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	330b      	adds	r3, #11
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b06:	73fb      	strb	r3, [r7, #15]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	7bfa      	ldrb	r2, [r7, #15]
 8005b0c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005b0e:	7dbb      	ldrb	r3, [r7, #22]
 8005b10:	2be5      	cmp	r3, #229	; 0xe5
 8005b12:	d007      	beq.n	8005b24 <dir_find+0x8a>
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
 8005b16:	f003 0308 	and.w	r3, r3, #8
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d009      	beq.n	8005b32 <dir_find+0x98>
 8005b1e:	7bfb      	ldrb	r3, [r7, #15]
 8005b20:	2b0f      	cmp	r3, #15
 8005b22:	d006      	beq.n	8005b32 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005b24:	23ff      	movs	r3, #255	; 0xff
 8005b26:	757b      	strb	r3, [r7, #21]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b2e:	631a      	str	r2, [r3, #48]	; 0x30
 8005b30:	e05e      	b.n	8005bf0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005b32:	7bfb      	ldrb	r3, [r7, #15]
 8005b34:	2b0f      	cmp	r3, #15
 8005b36:	d136      	bne.n	8005ba6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d154      	bne.n	8005bf0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005b46:	7dbb      	ldrb	r3, [r7, #22]
 8005b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00d      	beq.n	8005b6c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	7b5b      	ldrb	r3, [r3, #13]
 8005b56:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005b58:	7dbb      	ldrb	r3, [r7, #22]
 8005b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b5e:	75bb      	strb	r3, [r7, #22]
 8005b60:	7dbb      	ldrb	r3, [r7, #22]
 8005b62:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	695a      	ldr	r2, [r3, #20]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005b6c:	7dba      	ldrb	r2, [r7, #22]
 8005b6e:	7d7b      	ldrb	r3, [r7, #21]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d115      	bne.n	8005ba0 <dir_find+0x106>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	330d      	adds	r3, #13
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	7d3a      	ldrb	r2, [r7, #20]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d10e      	bne.n	8005ba0 <dir_find+0x106>
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	691a      	ldr	r2, [r3, #16]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	f7ff fdfd 	bl	800578c <cmp_lfn>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <dir_find+0x106>
 8005b98:	7d7b      	ldrb	r3, [r7, #21]
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	e000      	b.n	8005ba2 <dir_find+0x108>
 8005ba0:	23ff      	movs	r3, #255	; 0xff
 8005ba2:	757b      	strb	r3, [r7, #21]
 8005ba4:	e024      	b.n	8005bf0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005ba6:	7d7b      	ldrb	r3, [r7, #21]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d109      	bne.n	8005bc0 <dir_find+0x126>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7ff ff51 	bl	8005a58 <sum_sfn>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	461a      	mov	r2, r3
 8005bba:	7d3b      	ldrb	r3, [r7, #20]
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d024      	beq.n	8005c0a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10a      	bne.n	8005be4 <dir_find+0x14a>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a18      	ldr	r0, [r3, #32]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	3324      	adds	r3, #36	; 0x24
 8005bd6:	220b      	movs	r2, #11
 8005bd8:	4619      	mov	r1, r3
 8005bda:	f7fe fe1d 	bl	8004818 <mem_cmp>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d014      	beq.n	8005c0e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005be4:	23ff      	movs	r3, #255	; 0xff
 8005be6:	757b      	strb	r3, [r7, #21]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f04f 32ff 	mov.w	r2, #4294967295
 8005bee:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7ff fc6d 	bl	80054d2 <dir_next>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005bfc:	7dfb      	ldrb	r3, [r7, #23]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f43f af65 	beq.w	8005ace <dir_find+0x34>
 8005c04:	e004      	b.n	8005c10 <dir_find+0x176>
		if (res != FR_OK) break;
 8005c06:	bf00      	nop
 8005c08:	e002      	b.n	8005c10 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005c0a:	bf00      	nop
 8005c0c:	e000      	b.n	8005c10 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005c0e:	bf00      	nop

	return res;
 8005c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3718      	adds	r7, #24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08c      	sub	sp, #48	; 0x30
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005c30:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <dir_register+0x20>
 8005c38:	2306      	movs	r3, #6
 8005c3a:	e0e0      	b.n	8005dfe <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c40:	e002      	b.n	8005c48 <dir_register+0x2c>
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	3301      	adds	r3, #1
 8005c46:	627b      	str	r3, [r7, #36]	; 0x24
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	691a      	ldr	r2, [r3, #16]
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	4413      	add	r3, r2
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1f4      	bne.n	8005c42 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005c5e:	f107 030c 	add.w	r3, r7, #12
 8005c62:	220c      	movs	r2, #12
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7fe fd9b 	bl	80047a0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005c6a:	7dfb      	ldrb	r3, [r7, #23]
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d032      	beq.n	8005cda <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2240      	movs	r2, #64	; 0x40
 8005c78:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c80:	e016      	b.n	8005cb0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	691a      	ldr	r2, [r3, #16]
 8005c8c:	f107 010c 	add.w	r1, r7, #12
 8005c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c92:	f7ff fe53 	bl	800593c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7ff feff 	bl	8005a9a <dir_find>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8005ca2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d106      	bne.n	8005cb8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8005caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cac:	3301      	adds	r3, #1
 8005cae:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	2b63      	cmp	r3, #99	; 0x63
 8005cb4:	d9e5      	bls.n	8005c82 <dir_register+0x66>
 8005cb6:	e000      	b.n	8005cba <dir_register+0x9e>
			if (res != FR_OK) break;
 8005cb8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbc:	2b64      	cmp	r3, #100	; 0x64
 8005cbe:	d101      	bne.n	8005cc4 <dir_register+0xa8>
 8005cc0:	2307      	movs	r3, #7
 8005cc2:	e09c      	b.n	8005dfe <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005cc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005cc8:	2b04      	cmp	r3, #4
 8005cca:	d002      	beq.n	8005cd2 <dir_register+0xb6>
 8005ccc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005cd0:	e095      	b.n	8005dfe <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005cd2:	7dfa      	ldrb	r2, [r7, #23]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005cda:	7dfb      	ldrb	r3, [r7, #23]
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d007      	beq.n	8005cf4 <dir_register+0xd8>
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	330c      	adds	r3, #12
 8005ce8:	4a47      	ldr	r2, [pc, #284]	; (8005e08 <dir_register+0x1ec>)
 8005cea:	fba2 2303 	umull	r2, r3, r2, r3
 8005cee:	089b      	lsrs	r3, r3, #2
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	e000      	b.n	8005cf6 <dir_register+0xda>
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005cf8:	6a39      	ldr	r1, [r7, #32]
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7ff fcbf 	bl	800567e <dir_alloc>
 8005d00:	4603      	mov	r3, r0
 8005d02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005d06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d148      	bne.n	8005da0 <dir_register+0x184>
 8005d0e:	6a3b      	ldr	r3, [r7, #32]
 8005d10:	3b01      	subs	r3, #1
 8005d12:	623b      	str	r3, [r7, #32]
 8005d14:	6a3b      	ldr	r3, [r7, #32]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d042      	beq.n	8005da0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	695a      	ldr	r2, [r3, #20]
 8005d1e:	6a3b      	ldr	r3, [r7, #32]
 8005d20:	015b      	lsls	r3, r3, #5
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	4619      	mov	r1, r3
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7ff fb4a 	bl	80053c0 <dir_sdi>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005d32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d132      	bne.n	8005da0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	3324      	adds	r3, #36	; 0x24
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7ff fe8a 	bl	8005a58 <sum_sfn>
 8005d44:	4603      	mov	r3, r0
 8005d46:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	69f8      	ldr	r0, [r7, #28]
 8005d50:	f7fe ff54 	bl	8004bfc <move_window>
 8005d54:	4603      	mov	r3, r0
 8005d56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8005d5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d11d      	bne.n	8005d9e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	6918      	ldr	r0, [r3, #16]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a19      	ldr	r1, [r3, #32]
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	7efb      	ldrb	r3, [r7, #27]
 8005d70:	f7ff fd7c 	bl	800586c <put_lfn>
				fs->wflag = 1;
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	2201      	movs	r2, #1
 8005d78:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7ff fba8 	bl	80054d2 <dir_next>
 8005d82:	4603      	mov	r3, r0
 8005d84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8005d88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d107      	bne.n	8005da0 <dir_register+0x184>
 8005d90:	6a3b      	ldr	r3, [r7, #32]
 8005d92:	3b01      	subs	r3, #1
 8005d94:	623b      	str	r3, [r7, #32]
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1d5      	bne.n	8005d48 <dir_register+0x12c>
 8005d9c:	e000      	b.n	8005da0 <dir_register+0x184>
				if (res != FR_OK) break;
 8005d9e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005da0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d128      	bne.n	8005dfa <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	4619      	mov	r1, r3
 8005dae:	69f8      	ldr	r0, [r7, #28]
 8005db0:	f7fe ff24 	bl	8004bfc <move_window>
 8005db4:	4603      	mov	r3, r0
 8005db6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005dba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d11b      	bne.n	8005dfa <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	2100      	movs	r1, #0
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fe fd09 	bl	80047e2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a18      	ldr	r0, [r3, #32]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	3324      	adds	r3, #36	; 0x24
 8005dd8:	220b      	movs	r2, #11
 8005dda:	4619      	mov	r1, r3
 8005ddc:	f7fe fce0 	bl	80047a0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	330c      	adds	r3, #12
 8005dec:	f002 0218 	and.w	r2, r2, #24
 8005df0:	b2d2      	uxtb	r2, r2
 8005df2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	2201      	movs	r2, #1
 8005df8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005dfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3730      	adds	r7, #48	; 0x30
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	4ec4ec4f 	.word	0x4ec4ec4f

08005e0c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b08a      	sub	sp, #40	; 0x28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	613b      	str	r3, [r7, #16]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	2300      	movs	r3, #0
 8005e26:	617b      	str	r3, [r7, #20]
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	1c5a      	adds	r2, r3, #1
 8005e30:	61ba      	str	r2, [r7, #24]
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	4413      	add	r3, r2
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8005e3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e3c:	2b1f      	cmp	r3, #31
 8005e3e:	d940      	bls.n	8005ec2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005e40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e42:	2b2f      	cmp	r3, #47	; 0x2f
 8005e44:	d006      	beq.n	8005e54 <create_name+0x48>
 8005e46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e48:	2b5c      	cmp	r3, #92	; 0x5c
 8005e4a:	d110      	bne.n	8005e6e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005e4c:	e002      	b.n	8005e54 <create_name+0x48>
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	3301      	adds	r3, #1
 8005e52:	61bb      	str	r3, [r7, #24]
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	4413      	add	r3, r2
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b2f      	cmp	r3, #47	; 0x2f
 8005e5e:	d0f6      	beq.n	8005e4e <create_name+0x42>
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	4413      	add	r3, r2
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	2b5c      	cmp	r3, #92	; 0x5c
 8005e6a:	d0f0      	beq.n	8005e4e <create_name+0x42>
			break;
 8005e6c:	e02a      	b.n	8005ec4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2bfe      	cmp	r3, #254	; 0xfe
 8005e72:	d901      	bls.n	8005e78 <create_name+0x6c>
 8005e74:	2306      	movs	r3, #6
 8005e76:	e17d      	b.n	8006174 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005e78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005e7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e80:	2101      	movs	r1, #1
 8005e82:	4618      	mov	r0, r3
 8005e84:	f001 fbe0 	bl	8007648 <ff_convert>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005e8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <create_name+0x8a>
 8005e92:	2306      	movs	r3, #6
 8005e94:	e16e      	b.n	8006174 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005e96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e98:	2b7f      	cmp	r3, #127	; 0x7f
 8005e9a:	d809      	bhi.n	8005eb0 <create_name+0xa4>
 8005e9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	488d      	ldr	r0, [pc, #564]	; (80060d8 <create_name+0x2cc>)
 8005ea2:	f7fe fce0 	bl	8004866 <chk_chr>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <create_name+0xa4>
 8005eac:	2306      	movs	r3, #6
 8005eae:	e161      	b.n	8006174 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	617a      	str	r2, [r7, #20]
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	4413      	add	r3, r2
 8005ebc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005ebe:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005ec0:	e7b4      	b.n	8005e2c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8005ec2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	441a      	add	r2, r3
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005ece:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ed0:	2b1f      	cmp	r3, #31
 8005ed2:	d801      	bhi.n	8005ed8 <create_name+0xcc>
 8005ed4:	2304      	movs	r3, #4
 8005ed6:	e000      	b.n	8005eda <create_name+0xce>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005ede:	e011      	b.n	8005f04 <create_name+0xf8>
		w = lfn[di - 1];
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	4413      	add	r3, r2
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8005ef2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ef4:	2b20      	cmp	r3, #32
 8005ef6:	d002      	beq.n	8005efe <create_name+0xf2>
 8005ef8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005efa:	2b2e      	cmp	r3, #46	; 0x2e
 8005efc:	d106      	bne.n	8005f0c <create_name+0x100>
		di--;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	3b01      	subs	r3, #1
 8005f02:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1ea      	bne.n	8005ee0 <create_name+0xd4>
 8005f0a:	e000      	b.n	8005f0e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8005f0c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	4413      	add	r3, r2
 8005f16:	2200      	movs	r2, #0
 8005f18:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <create_name+0x118>
 8005f20:	2306      	movs	r3, #6
 8005f22:	e127      	b.n	8006174 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	3324      	adds	r3, #36	; 0x24
 8005f28:	220b      	movs	r2, #11
 8005f2a:	2120      	movs	r1, #32
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fe fc58 	bl	80047e2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005f32:	2300      	movs	r3, #0
 8005f34:	61bb      	str	r3, [r7, #24]
 8005f36:	e002      	b.n	8005f3e <create_name+0x132>
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	61bb      	str	r3, [r7, #24]
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	005b      	lsls	r3, r3, #1
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	4413      	add	r3, r2
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	2b20      	cmp	r3, #32
 8005f4a:	d0f5      	beq.n	8005f38 <create_name+0x12c>
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	4413      	add	r3, r2
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	2b2e      	cmp	r3, #46	; 0x2e
 8005f58:	d0ee      	beq.n	8005f38 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d009      	beq.n	8005f74 <create_name+0x168>
 8005f60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f64:	f043 0303 	orr.w	r3, r3, #3
 8005f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005f6c:	e002      	b.n	8005f74 <create_name+0x168>
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	3b01      	subs	r3, #1
 8005f72:	617b      	str	r3, [r7, #20]
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d009      	beq.n	8005f8e <create_name+0x182>
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005f80:	3b01      	subs	r3, #1
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	4413      	add	r3, r2
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	2b2e      	cmp	r3, #46	; 0x2e
 8005f8c:	d1ef      	bne.n	8005f6e <create_name+0x162>

	i = b = 0; ni = 8;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005f94:	2300      	movs	r3, #0
 8005f96:	623b      	str	r3, [r7, #32]
 8005f98:	2308      	movs	r3, #8
 8005f9a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	61ba      	str	r2, [r7, #24]
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005fac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 8090 	beq.w	80060d4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005fb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	d006      	beq.n	8005fc8 <create_name+0x1bc>
 8005fba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fbc:	2b2e      	cmp	r3, #46	; 0x2e
 8005fbe:	d10a      	bne.n	8005fd6 <create_name+0x1ca>
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d006      	beq.n	8005fd6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8005fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fcc:	f043 0303 	orr.w	r3, r3, #3
 8005fd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005fd4:	e07d      	b.n	80060d2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005fd6:	6a3a      	ldr	r2, [r7, #32]
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d203      	bcs.n	8005fe6 <create_name+0x1da>
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d123      	bne.n	800602e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	2b0b      	cmp	r3, #11
 8005fea:	d106      	bne.n	8005ffa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8005fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ff0:	f043 0303 	orr.w	r3, r3, #3
 8005ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005ff8:	e075      	b.n	80060e6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d005      	beq.n	800600e <create_name+0x202>
 8006002:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006006:	f043 0303 	orr.w	r3, r3, #3
 800600a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	429a      	cmp	r2, r3
 8006014:	d866      	bhi.n	80060e4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	61bb      	str	r3, [r7, #24]
 800601a:	2308      	movs	r3, #8
 800601c:	623b      	str	r3, [r7, #32]
 800601e:	230b      	movs	r3, #11
 8006020:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006022:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800602c:	e051      	b.n	80060d2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800602e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006030:	2b7f      	cmp	r3, #127	; 0x7f
 8006032:	d914      	bls.n	800605e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006034:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006036:	2100      	movs	r1, #0
 8006038:	4618      	mov	r0, r3
 800603a:	f001 fb05 	bl	8007648 <ff_convert>
 800603e:	4603      	mov	r3, r0
 8006040:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006042:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006044:	2b00      	cmp	r3, #0
 8006046:	d004      	beq.n	8006052 <create_name+0x246>
 8006048:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800604a:	3b80      	subs	r3, #128	; 0x80
 800604c:	4a23      	ldr	r2, [pc, #140]	; (80060dc <create_name+0x2d0>)
 800604e:	5cd3      	ldrb	r3, [r2, r3]
 8006050:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006056:	f043 0302 	orr.w	r3, r3, #2
 800605a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800605e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006060:	2b00      	cmp	r3, #0
 8006062:	d007      	beq.n	8006074 <create_name+0x268>
 8006064:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006066:	4619      	mov	r1, r3
 8006068:	481d      	ldr	r0, [pc, #116]	; (80060e0 <create_name+0x2d4>)
 800606a:	f7fe fbfc 	bl	8004866 <chk_chr>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d008      	beq.n	8006086 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006074:	235f      	movs	r3, #95	; 0x5f
 8006076:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800607c:	f043 0303 	orr.w	r3, r3, #3
 8006080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006084:	e01b      	b.n	80060be <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006086:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006088:	2b40      	cmp	r3, #64	; 0x40
 800608a:	d909      	bls.n	80060a0 <create_name+0x294>
 800608c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800608e:	2b5a      	cmp	r3, #90	; 0x5a
 8006090:	d806      	bhi.n	80060a0 <create_name+0x294>
					b |= 2;
 8006092:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006096:	f043 0302 	orr.w	r3, r3, #2
 800609a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800609e:	e00e      	b.n	80060be <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80060a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060a2:	2b60      	cmp	r3, #96	; 0x60
 80060a4:	d90b      	bls.n	80060be <create_name+0x2b2>
 80060a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060a8:	2b7a      	cmp	r3, #122	; 0x7a
 80060aa:	d808      	bhi.n	80060be <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80060ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80060b0:	f043 0301 	orr.w	r3, r3, #1
 80060b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80060b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060ba:	3b20      	subs	r3, #32
 80060bc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	1c5a      	adds	r2, r3, #1
 80060c2:	623a      	str	r2, [r7, #32]
 80060c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80060c6:	b2d1      	uxtb	r1, r2
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	4413      	add	r3, r2
 80060cc:	460a      	mov	r2, r1
 80060ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80060d2:	e763      	b.n	8005f9c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80060d4:	bf00      	nop
 80060d6:	e006      	b.n	80060e6 <create_name+0x2da>
 80060d8:	08008258 	.word	0x08008258
 80060dc:	080082b8 	.word	0x080082b8
 80060e0:	08008264 	.word	0x08008264
			if (si > di) break;			/* No extension */
 80060e4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80060ec:	2be5      	cmp	r3, #229	; 0xe5
 80060ee:	d103      	bne.n	80060f8 <create_name+0x2ec>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2205      	movs	r2, #5
 80060f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	2b08      	cmp	r3, #8
 80060fc:	d104      	bne.n	8006108 <create_name+0x2fc>
 80060fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006108:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800610c:	f003 030c 	and.w	r3, r3, #12
 8006110:	2b0c      	cmp	r3, #12
 8006112:	d005      	beq.n	8006120 <create_name+0x314>
 8006114:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006118:	f003 0303 	and.w	r3, r3, #3
 800611c:	2b03      	cmp	r3, #3
 800611e:	d105      	bne.n	800612c <create_name+0x320>
 8006120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006124:	f043 0302 	orr.w	r3, r3, #2
 8006128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800612c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d117      	bne.n	8006168 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006138:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800613c:	f003 0303 	and.w	r3, r3, #3
 8006140:	2b01      	cmp	r3, #1
 8006142:	d105      	bne.n	8006150 <create_name+0x344>
 8006144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006148:	f043 0310 	orr.w	r3, r3, #16
 800614c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006150:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006154:	f003 030c 	and.w	r3, r3, #12
 8006158:	2b04      	cmp	r3, #4
 800615a:	d105      	bne.n	8006168 <create_name+0x35c>
 800615c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006160:	f043 0308 	orr.w	r3, r3, #8
 8006164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800616e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8006172:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006174:	4618      	mov	r0, r3
 8006176:	3728      	adds	r7, #40	; 0x28
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006190:	e002      	b.n	8006198 <follow_path+0x1c>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	3301      	adds	r3, #1
 8006196:	603b      	str	r3, [r7, #0]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	2b2f      	cmp	r3, #47	; 0x2f
 800619e:	d0f8      	beq.n	8006192 <follow_path+0x16>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	2b5c      	cmp	r3, #92	; 0x5c
 80061a6:	d0f4      	beq.n	8006192 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	2200      	movs	r2, #0
 80061ac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	2b1f      	cmp	r3, #31
 80061b4:	d80a      	bhi.n	80061cc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2280      	movs	r2, #128	; 0x80
 80061ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80061be:	2100      	movs	r1, #0
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7ff f8fd 	bl	80053c0 <dir_sdi>
 80061c6:	4603      	mov	r3, r0
 80061c8:	75fb      	strb	r3, [r7, #23]
 80061ca:	e048      	b.n	800625e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80061cc:	463b      	mov	r3, r7
 80061ce:	4619      	mov	r1, r3
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7ff fe1b 	bl	8005e0c <create_name>
 80061d6:	4603      	mov	r3, r0
 80061d8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80061da:	7dfb      	ldrb	r3, [r7, #23]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d139      	bne.n	8006254 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f7ff fc5a 	bl	8005a9a <dir_find>
 80061e6:	4603      	mov	r3, r0
 80061e8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80061f0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80061f2:	7dfb      	ldrb	r3, [r7, #23]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00a      	beq.n	800620e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80061f8:	7dfb      	ldrb	r3, [r7, #23]
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	d12c      	bne.n	8006258 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80061fe:	7afb      	ldrb	r3, [r7, #11]
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	d127      	bne.n	8006258 <follow_path+0xdc>
 8006208:	2305      	movs	r3, #5
 800620a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800620c:	e024      	b.n	8006258 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800620e:	7afb      	ldrb	r3, [r7, #11]
 8006210:	f003 0304 	and.w	r3, r3, #4
 8006214:	2b00      	cmp	r3, #0
 8006216:	d121      	bne.n	800625c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	799b      	ldrb	r3, [r3, #6]
 800621c:	f003 0310 	and.w	r3, r3, #16
 8006220:	2b00      	cmp	r3, #0
 8006222:	d102      	bne.n	800622a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006224:	2305      	movs	r3, #5
 8006226:	75fb      	strb	r3, [r7, #23]
 8006228:	e019      	b.n	800625e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	8992      	ldrh	r2, [r2, #12]
 8006238:	fbb3 f0f2 	udiv	r0, r3, r2
 800623c:	fb00 f202 	mul.w	r2, r0, r2
 8006240:	1a9b      	subs	r3, r3, r2
 8006242:	440b      	add	r3, r1
 8006244:	4619      	mov	r1, r3
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f7ff fa60 	bl	800570c <ld_clust>
 800624c:	4602      	mov	r2, r0
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006252:	e7bb      	b.n	80061cc <follow_path+0x50>
			if (res != FR_OK) break;
 8006254:	bf00      	nop
 8006256:	e002      	b.n	800625e <follow_path+0xe2>
				break;
 8006258:	bf00      	nop
 800625a:	e000      	b.n	800625e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800625c:	bf00      	nop
			}
		}
	}

	return res;
 800625e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3718      	adds	r7, #24
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006270:	f04f 33ff 	mov.w	r3, #4294967295
 8006274:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d031      	beq.n	80062e2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	617b      	str	r3, [r7, #20]
 8006284:	e002      	b.n	800628c <get_ldnumber+0x24>
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	3301      	adds	r3, #1
 800628a:	617b      	str	r3, [r7, #20]
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	2b1f      	cmp	r3, #31
 8006292:	d903      	bls.n	800629c <get_ldnumber+0x34>
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	2b3a      	cmp	r3, #58	; 0x3a
 800629a:	d1f4      	bne.n	8006286 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	2b3a      	cmp	r3, #58	; 0x3a
 80062a2:	d11c      	bne.n	80062de <get_ldnumber+0x76>
			tp = *path;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	60fa      	str	r2, [r7, #12]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	3b30      	subs	r3, #48	; 0x30
 80062b4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	2b09      	cmp	r3, #9
 80062ba:	d80e      	bhi.n	80062da <get_ldnumber+0x72>
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d10a      	bne.n	80062da <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d107      	bne.n	80062da <get_ldnumber+0x72>
					vol = (int)i;
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	3301      	adds	r3, #1
 80062d2:	617b      	str	r3, [r7, #20]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	e002      	b.n	80062e4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80062de:	2300      	movs	r3, #0
 80062e0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80062e2:	693b      	ldr	r3, [r7, #16]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	371c      	adds	r7, #28
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	70da      	strb	r2, [r3, #3]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f04f 32ff 	mov.w	r2, #4294967295
 8006306:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006308:	6839      	ldr	r1, [r7, #0]
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7fe fc76 	bl	8004bfc <move_window>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <check_fs+0x2a>
 8006316:	2304      	movs	r3, #4
 8006318:	e038      	b.n	800638c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	3338      	adds	r3, #56	; 0x38
 800631e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006322:	4618      	mov	r0, r3
 8006324:	f7fe f9ba 	bl	800469c <ld_word>
 8006328:	4603      	mov	r3, r0
 800632a:	461a      	mov	r2, r3
 800632c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006330:	429a      	cmp	r2, r3
 8006332:	d001      	beq.n	8006338 <check_fs+0x48>
 8006334:	2303      	movs	r3, #3
 8006336:	e029      	b.n	800638c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800633e:	2be9      	cmp	r3, #233	; 0xe9
 8006340:	d009      	beq.n	8006356 <check_fs+0x66>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006348:	2beb      	cmp	r3, #235	; 0xeb
 800634a:	d11e      	bne.n	800638a <check_fs+0x9a>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006352:	2b90      	cmp	r3, #144	; 0x90
 8006354:	d119      	bne.n	800638a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	3338      	adds	r3, #56	; 0x38
 800635a:	3336      	adds	r3, #54	; 0x36
 800635c:	4618      	mov	r0, r3
 800635e:	f7fe f9b5 	bl	80046cc <ld_dword>
 8006362:	4603      	mov	r3, r0
 8006364:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006368:	4a0a      	ldr	r2, [pc, #40]	; (8006394 <check_fs+0xa4>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d101      	bne.n	8006372 <check_fs+0x82>
 800636e:	2300      	movs	r3, #0
 8006370:	e00c      	b.n	800638c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	3338      	adds	r3, #56	; 0x38
 8006376:	3352      	adds	r3, #82	; 0x52
 8006378:	4618      	mov	r0, r3
 800637a:	f7fe f9a7 	bl	80046cc <ld_dword>
 800637e:	4603      	mov	r3, r0
 8006380:	4a05      	ldr	r2, [pc, #20]	; (8006398 <check_fs+0xa8>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d101      	bne.n	800638a <check_fs+0x9a>
 8006386:	2300      	movs	r3, #0
 8006388:	e000      	b.n	800638c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800638a:	2302      	movs	r3, #2
}
 800638c:	4618      	mov	r0, r3
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	00544146 	.word	0x00544146
 8006398:	33544146 	.word	0x33544146

0800639c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b096      	sub	sp, #88	; 0x58
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	4613      	mov	r3, r2
 80063a8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	2200      	movs	r2, #0
 80063ae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f7ff ff59 	bl	8006268 <get_ldnumber>
 80063b6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80063b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	da01      	bge.n	80063c2 <find_volume+0x26>
 80063be:	230b      	movs	r3, #11
 80063c0:	e265      	b.n	800688e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80063c2:	4a9f      	ldr	r2, [pc, #636]	; (8006640 <find_volume+0x2a4>)
 80063c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80063cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <find_volume+0x3a>
 80063d2:	230c      	movs	r3, #12
 80063d4:	e25b      	b.n	800688e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063da:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80063dc:	79fb      	ldrb	r3, [r7, #7]
 80063de:	f023 0301 	bic.w	r3, r3, #1
 80063e2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80063e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d01a      	beq.n	8006422 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80063ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ee:	785b      	ldrb	r3, [r3, #1]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fe f8b5 	bl	8004560 <disk_status>
 80063f6:	4603      	mov	r3, r0
 80063f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80063fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10c      	bne.n	8006422 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006408:	79fb      	ldrb	r3, [r7, #7]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d007      	beq.n	800641e <find_volume+0x82>
 800640e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006412:	f003 0304 	and.w	r3, r3, #4
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800641a:	230a      	movs	r3, #10
 800641c:	e237      	b.n	800688e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800641e:	2300      	movs	r3, #0
 8006420:	e235      	b.n	800688e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006424:	2200      	movs	r2, #0
 8006426:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800642a:	b2da      	uxtb	r2, r3
 800642c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006432:	785b      	ldrb	r3, [r3, #1]
 8006434:	4618      	mov	r0, r3
 8006436:	f7fe f8ad 	bl	8004594 <disk_initialize>
 800643a:	4603      	mov	r3, r0
 800643c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006440:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800644c:	2303      	movs	r3, #3
 800644e:	e21e      	b.n	800688e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006450:	79fb      	ldrb	r3, [r7, #7]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d007      	beq.n	8006466 <find_volume+0xca>
 8006456:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800645a:	f003 0304 	and.w	r3, r3, #4
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006462:	230a      	movs	r3, #10
 8006464:	e213      	b.n	800688e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006468:	7858      	ldrb	r0, [r3, #1]
 800646a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646c:	330c      	adds	r3, #12
 800646e:	461a      	mov	r2, r3
 8006470:	2102      	movs	r1, #2
 8006472:	f7fe f8f5 	bl	8004660 <disk_ioctl>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <find_volume+0xe4>
 800647c:	2301      	movs	r3, #1
 800647e:	e206      	b.n	800688e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006482:	899b      	ldrh	r3, [r3, #12]
 8006484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006488:	d80d      	bhi.n	80064a6 <find_volume+0x10a>
 800648a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648c:	899b      	ldrh	r3, [r3, #12]
 800648e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006492:	d308      	bcc.n	80064a6 <find_volume+0x10a>
 8006494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006496:	899b      	ldrh	r3, [r3, #12]
 8006498:	461a      	mov	r2, r3
 800649a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649c:	899b      	ldrh	r3, [r3, #12]
 800649e:	3b01      	subs	r3, #1
 80064a0:	4013      	ands	r3, r2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <find_volume+0x10e>
 80064a6:	2301      	movs	r3, #1
 80064a8:	e1f1      	b.n	800688e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80064aa:	2300      	movs	r3, #0
 80064ac:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80064ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80064b2:	f7ff ff1d 	bl	80062f0 <check_fs>
 80064b6:	4603      	mov	r3, r0
 80064b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80064bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d149      	bne.n	8006558 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80064c4:	2300      	movs	r3, #0
 80064c6:	643b      	str	r3, [r7, #64]	; 0x40
 80064c8:	e01e      	b.n	8006508 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80064ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064cc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80064d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064d2:	011b      	lsls	r3, r3, #4
 80064d4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80064d8:	4413      	add	r3, r2
 80064da:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80064dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064de:	3304      	adds	r3, #4
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d006      	beq.n	80064f4 <find_volume+0x158>
 80064e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e8:	3308      	adds	r3, #8
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fe f8ee 	bl	80046cc <ld_dword>
 80064f0:	4602      	mov	r2, r0
 80064f2:	e000      	b.n	80064f6 <find_volume+0x15a>
 80064f4:	2200      	movs	r2, #0
 80064f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	3358      	adds	r3, #88	; 0x58
 80064fc:	443b      	add	r3, r7
 80064fe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006504:	3301      	adds	r3, #1
 8006506:	643b      	str	r3, [r7, #64]	; 0x40
 8006508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800650a:	2b03      	cmp	r3, #3
 800650c:	d9dd      	bls.n	80064ca <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800650e:	2300      	movs	r3, #0
 8006510:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006514:	2b00      	cmp	r3, #0
 8006516:	d002      	beq.n	800651e <find_volume+0x182>
 8006518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800651a:	3b01      	subs	r3, #1
 800651c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800651e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	3358      	adds	r3, #88	; 0x58
 8006524:	443b      	add	r3, r7
 8006526:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800652a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800652c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800652e:	2b00      	cmp	r3, #0
 8006530:	d005      	beq.n	800653e <find_volume+0x1a2>
 8006532:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006534:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006536:	f7ff fedb 	bl	80062f0 <check_fs>
 800653a:	4603      	mov	r3, r0
 800653c:	e000      	b.n	8006540 <find_volume+0x1a4>
 800653e:	2303      	movs	r3, #3
 8006540:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006544:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006548:	2b01      	cmp	r3, #1
 800654a:	d905      	bls.n	8006558 <find_volume+0x1bc>
 800654c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800654e:	3301      	adds	r3, #1
 8006550:	643b      	str	r3, [r7, #64]	; 0x40
 8006552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006554:	2b03      	cmp	r3, #3
 8006556:	d9e2      	bls.n	800651e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006558:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800655c:	2b04      	cmp	r3, #4
 800655e:	d101      	bne.n	8006564 <find_volume+0x1c8>
 8006560:	2301      	movs	r3, #1
 8006562:	e194      	b.n	800688e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006564:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006568:	2b01      	cmp	r3, #1
 800656a:	d901      	bls.n	8006570 <find_volume+0x1d4>
 800656c:	230d      	movs	r3, #13
 800656e:	e18e      	b.n	800688e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006572:	3338      	adds	r3, #56	; 0x38
 8006574:	330b      	adds	r3, #11
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe f890 	bl	800469c <ld_word>
 800657c:	4603      	mov	r3, r0
 800657e:	461a      	mov	r2, r3
 8006580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006582:	899b      	ldrh	r3, [r3, #12]
 8006584:	429a      	cmp	r2, r3
 8006586:	d001      	beq.n	800658c <find_volume+0x1f0>
 8006588:	230d      	movs	r3, #13
 800658a:	e180      	b.n	800688e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800658c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658e:	3338      	adds	r3, #56	; 0x38
 8006590:	3316      	adds	r3, #22
 8006592:	4618      	mov	r0, r3
 8006594:	f7fe f882 	bl	800469c <ld_word>
 8006598:	4603      	mov	r3, r0
 800659a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800659c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d106      	bne.n	80065b0 <find_volume+0x214>
 80065a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a4:	3338      	adds	r3, #56	; 0x38
 80065a6:	3324      	adds	r3, #36	; 0x24
 80065a8:	4618      	mov	r0, r3
 80065aa:	f7fe f88f 	bl	80046cc <ld_dword>
 80065ae:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80065b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065b4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80065b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80065bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065be:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80065c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c2:	789b      	ldrb	r3, [r3, #2]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d005      	beq.n	80065d4 <find_volume+0x238>
 80065c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ca:	789b      	ldrb	r3, [r3, #2]
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d001      	beq.n	80065d4 <find_volume+0x238>
 80065d0:	230d      	movs	r3, #13
 80065d2:	e15c      	b.n	800688e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80065d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d6:	789b      	ldrb	r3, [r3, #2]
 80065d8:	461a      	mov	r2, r3
 80065da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065dc:	fb02 f303 	mul.w	r3, r2, r3
 80065e0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80065e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80065ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f0:	895b      	ldrh	r3, [r3, #10]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d008      	beq.n	8006608 <find_volume+0x26c>
 80065f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f8:	895b      	ldrh	r3, [r3, #10]
 80065fa:	461a      	mov	r2, r3
 80065fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fe:	895b      	ldrh	r3, [r3, #10]
 8006600:	3b01      	subs	r3, #1
 8006602:	4013      	ands	r3, r2
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <find_volume+0x270>
 8006608:	230d      	movs	r3, #13
 800660a:	e140      	b.n	800688e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800660c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660e:	3338      	adds	r3, #56	; 0x38
 8006610:	3311      	adds	r3, #17
 8006612:	4618      	mov	r0, r3
 8006614:	f7fe f842 	bl	800469c <ld_word>
 8006618:	4603      	mov	r3, r0
 800661a:	461a      	mov	r2, r3
 800661c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006622:	891b      	ldrh	r3, [r3, #8]
 8006624:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006626:	8992      	ldrh	r2, [r2, #12]
 8006628:	0952      	lsrs	r2, r2, #5
 800662a:	b292      	uxth	r2, r2
 800662c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006630:	fb01 f202 	mul.w	r2, r1, r2
 8006634:	1a9b      	subs	r3, r3, r2
 8006636:	b29b      	uxth	r3, r3
 8006638:	2b00      	cmp	r3, #0
 800663a:	d003      	beq.n	8006644 <find_volume+0x2a8>
 800663c:	230d      	movs	r3, #13
 800663e:	e126      	b.n	800688e <find_volume+0x4f2>
 8006640:	2000122c 	.word	0x2000122c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006646:	3338      	adds	r3, #56	; 0x38
 8006648:	3313      	adds	r3, #19
 800664a:	4618      	mov	r0, r3
 800664c:	f7fe f826 	bl	800469c <ld_word>
 8006650:	4603      	mov	r3, r0
 8006652:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006656:	2b00      	cmp	r3, #0
 8006658:	d106      	bne.n	8006668 <find_volume+0x2cc>
 800665a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665c:	3338      	adds	r3, #56	; 0x38
 800665e:	3320      	adds	r3, #32
 8006660:	4618      	mov	r0, r3
 8006662:	f7fe f833 	bl	80046cc <ld_dword>
 8006666:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666a:	3338      	adds	r3, #56	; 0x38
 800666c:	330e      	adds	r3, #14
 800666e:	4618      	mov	r0, r3
 8006670:	f7fe f814 	bl	800469c <ld_word>
 8006674:	4603      	mov	r3, r0
 8006676:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006678:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <find_volume+0x2e6>
 800667e:	230d      	movs	r3, #13
 8006680:	e105      	b.n	800688e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006682:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006686:	4413      	add	r3, r2
 8006688:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800668a:	8911      	ldrh	r1, [r2, #8]
 800668c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800668e:	8992      	ldrh	r2, [r2, #12]
 8006690:	0952      	lsrs	r2, r2, #5
 8006692:	b292      	uxth	r2, r2
 8006694:	fbb1 f2f2 	udiv	r2, r1, r2
 8006698:	b292      	uxth	r2, r2
 800669a:	4413      	add	r3, r2
 800669c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800669e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d201      	bcs.n	80066aa <find_volume+0x30e>
 80066a6:	230d      	movs	r3, #13
 80066a8:	e0f1      	b.n	800688e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80066aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066b2:	8952      	ldrh	r2, [r2, #10]
 80066b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <find_volume+0x328>
 80066c0:	230d      	movs	r3, #13
 80066c2:	e0e4      	b.n	800688e <find_volume+0x4f2>
		fmt = FS_FAT32;
 80066c4:	2303      	movs	r3, #3
 80066c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d802      	bhi.n	80066da <find_volume+0x33e>
 80066d4:	2302      	movs	r3, #2
 80066d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d802      	bhi.n	80066ea <find_volume+0x34e>
 80066e4:	2301      	movs	r3, #1
 80066e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	1c9a      	adds	r2, r3, #2
 80066ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80066f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066f6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80066f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80066fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066fc:	441a      	add	r2, r3
 80066fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006700:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006702:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006706:	441a      	add	r2, r3
 8006708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800670c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006710:	2b03      	cmp	r3, #3
 8006712:	d11e      	bne.n	8006752 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006716:	3338      	adds	r3, #56	; 0x38
 8006718:	332a      	adds	r3, #42	; 0x2a
 800671a:	4618      	mov	r0, r3
 800671c:	f7fd ffbe 	bl	800469c <ld_word>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <find_volume+0x38e>
 8006726:	230d      	movs	r3, #13
 8006728:	e0b1      	b.n	800688e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800672a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672c:	891b      	ldrh	r3, [r3, #8]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <find_volume+0x39a>
 8006732:	230d      	movs	r3, #13
 8006734:	e0ab      	b.n	800688e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006738:	3338      	adds	r3, #56	; 0x38
 800673a:	332c      	adds	r3, #44	; 0x2c
 800673c:	4618      	mov	r0, r3
 800673e:	f7fd ffc5 	bl	80046cc <ld_dword>
 8006742:	4602      	mov	r2, r0
 8006744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006746:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674a:	69db      	ldr	r3, [r3, #28]
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	647b      	str	r3, [r7, #68]	; 0x44
 8006750:	e01f      	b.n	8006792 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006754:	891b      	ldrh	r3, [r3, #8]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <find_volume+0x3c2>
 800675a:	230d      	movs	r3, #13
 800675c:	e097      	b.n	800688e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800675e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006764:	441a      	add	r2, r3
 8006766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006768:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800676a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800676e:	2b02      	cmp	r3, #2
 8006770:	d103      	bne.n	800677a <find_volume+0x3de>
 8006772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	005b      	lsls	r3, r3, #1
 8006778:	e00a      	b.n	8006790 <find_volume+0x3f4>
 800677a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677c:	69da      	ldr	r2, [r3, #28]
 800677e:	4613      	mov	r3, r2
 8006780:	005b      	lsls	r3, r3, #1
 8006782:	4413      	add	r3, r2
 8006784:	085a      	lsrs	r2, r3, #1
 8006786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006790:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006794:	6a1a      	ldr	r2, [r3, #32]
 8006796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006798:	899b      	ldrh	r3, [r3, #12]
 800679a:	4619      	mov	r1, r3
 800679c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800679e:	440b      	add	r3, r1
 80067a0:	3b01      	subs	r3, #1
 80067a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067a4:	8989      	ldrh	r1, [r1, #12]
 80067a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d201      	bcs.n	80067b2 <find_volume+0x416>
 80067ae:	230d      	movs	r3, #13
 80067b0:	e06d      	b.n	800688e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80067b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b4:	f04f 32ff 	mov.w	r2, #4294967295
 80067b8:	619a      	str	r2, [r3, #24]
 80067ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067bc:	699a      	ldr	r2, [r3, #24]
 80067be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80067c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c4:	2280      	movs	r2, #128	; 0x80
 80067c6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80067c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067cc:	2b03      	cmp	r3, #3
 80067ce:	d149      	bne.n	8006864 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80067d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d2:	3338      	adds	r3, #56	; 0x38
 80067d4:	3330      	adds	r3, #48	; 0x30
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fd ff60 	bl	800469c <ld_word>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d140      	bne.n	8006864 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80067e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067e4:	3301      	adds	r3, #1
 80067e6:	4619      	mov	r1, r3
 80067e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067ea:	f7fe fa07 	bl	8004bfc <move_window>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d137      	bne.n	8006864 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80067f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f6:	2200      	movs	r2, #0
 80067f8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80067fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fc:	3338      	adds	r3, #56	; 0x38
 80067fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006802:	4618      	mov	r0, r3
 8006804:	f7fd ff4a 	bl	800469c <ld_word>
 8006808:	4603      	mov	r3, r0
 800680a:	461a      	mov	r2, r3
 800680c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006810:	429a      	cmp	r2, r3
 8006812:	d127      	bne.n	8006864 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006816:	3338      	adds	r3, #56	; 0x38
 8006818:	4618      	mov	r0, r3
 800681a:	f7fd ff57 	bl	80046cc <ld_dword>
 800681e:	4603      	mov	r3, r0
 8006820:	4a1d      	ldr	r2, [pc, #116]	; (8006898 <find_volume+0x4fc>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d11e      	bne.n	8006864 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006828:	3338      	adds	r3, #56	; 0x38
 800682a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800682e:	4618      	mov	r0, r3
 8006830:	f7fd ff4c 	bl	80046cc <ld_dword>
 8006834:	4603      	mov	r3, r0
 8006836:	4a19      	ldr	r2, [pc, #100]	; (800689c <find_volume+0x500>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d113      	bne.n	8006864 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800683c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683e:	3338      	adds	r3, #56	; 0x38
 8006840:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006844:	4618      	mov	r0, r3
 8006846:	f7fd ff41 	bl	80046cc <ld_dword>
 800684a:	4602      	mov	r2, r0
 800684c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006852:	3338      	adds	r3, #56	; 0x38
 8006854:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006858:	4618      	mov	r0, r3
 800685a:	f7fd ff37 	bl	80046cc <ld_dword>
 800685e:	4602      	mov	r2, r0
 8006860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006862:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006866:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800686a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800686c:	4b0c      	ldr	r3, [pc, #48]	; (80068a0 <find_volume+0x504>)
 800686e:	881b      	ldrh	r3, [r3, #0]
 8006870:	3301      	adds	r3, #1
 8006872:	b29a      	uxth	r2, r3
 8006874:	4b0a      	ldr	r3, [pc, #40]	; (80068a0 <find_volume+0x504>)
 8006876:	801a      	strh	r2, [r3, #0]
 8006878:	4b09      	ldr	r3, [pc, #36]	; (80068a0 <find_volume+0x504>)
 800687a:	881a      	ldrh	r2, [r3, #0]
 800687c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006882:	4a08      	ldr	r2, [pc, #32]	; (80068a4 <find_volume+0x508>)
 8006884:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006886:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006888:	f7fe f950 	bl	8004b2c <clear_lock>
#endif
	return FR_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3758      	adds	r7, #88	; 0x58
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	41615252 	.word	0x41615252
 800689c:	61417272 	.word	0x61417272
 80068a0:	20001230 	.word	0x20001230
 80068a4:	20001254 	.word	0x20001254

080068a8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80068b2:	2309      	movs	r3, #9
 80068b4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d01c      	beq.n	80068f6 <validate+0x4e>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d018      	beq.n	80068f6 <validate+0x4e>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d013      	beq.n	80068f6 <validate+0x4e>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	889a      	ldrh	r2, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	88db      	ldrh	r3, [r3, #6]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d10c      	bne.n	80068f6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	785b      	ldrb	r3, [r3, #1]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7fd fe3c 	bl	8004560 <disk_status>
 80068e8:	4603      	mov	r3, r0
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <validate+0x4e>
			res = FR_OK;
 80068f2:	2300      	movs	r3, #0
 80068f4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80068f6:	7bfb      	ldrb	r3, [r7, #15]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d102      	bne.n	8006902 <validate+0x5a>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	e000      	b.n	8006904 <validate+0x5c>
 8006902:	2300      	movs	r3, #0
 8006904:	683a      	ldr	r2, [r7, #0]
 8006906:	6013      	str	r3, [r2, #0]
	return res;
 8006908:	7bfb      	ldrb	r3, [r7, #15]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
	...

08006914 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b088      	sub	sp, #32
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	4613      	mov	r3, r2
 8006920:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006926:	f107 0310 	add.w	r3, r7, #16
 800692a:	4618      	mov	r0, r3
 800692c:	f7ff fc9c 	bl	8006268 <get_ldnumber>
 8006930:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	2b00      	cmp	r3, #0
 8006936:	da01      	bge.n	800693c <f_mount+0x28>
 8006938:	230b      	movs	r3, #11
 800693a:	e02b      	b.n	8006994 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800693c:	4a17      	ldr	r2, [pc, #92]	; (800699c <f_mount+0x88>)
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006944:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d005      	beq.n	8006958 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800694c:	69b8      	ldr	r0, [r7, #24]
 800694e:	f7fe f8ed 	bl	8004b2c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	2200      	movs	r2, #0
 8006956:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d002      	beq.n	8006964 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	490d      	ldr	r1, [pc, #52]	; (800699c <f_mount+0x88>)
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d002      	beq.n	800697a <f_mount+0x66>
 8006974:	79fb      	ldrb	r3, [r7, #7]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d001      	beq.n	800697e <f_mount+0x6a>
 800697a:	2300      	movs	r3, #0
 800697c:	e00a      	b.n	8006994 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800697e:	f107 010c 	add.w	r1, r7, #12
 8006982:	f107 0308 	add.w	r3, r7, #8
 8006986:	2200      	movs	r2, #0
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff fd07 	bl	800639c <find_volume>
 800698e:	4603      	mov	r3, r0
 8006990:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006992:	7dfb      	ldrb	r3, [r7, #23]
}
 8006994:	4618      	mov	r0, r3
 8006996:	3720      	adds	r7, #32
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	2000122c 	.word	0x2000122c

080069a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b09a      	sub	sp, #104	; 0x68
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	4613      	mov	r3, r2
 80069ac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <f_open+0x18>
 80069b4:	2309      	movs	r3, #9
 80069b6:	e1bb      	b.n	8006d30 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80069b8:	79fb      	ldrb	r3, [r7, #7]
 80069ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069be:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80069c0:	79fa      	ldrb	r2, [r7, #7]
 80069c2:	f107 0114 	add.w	r1, r7, #20
 80069c6:	f107 0308 	add.w	r3, r7, #8
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7ff fce6 	bl	800639c <find_volume>
 80069d0:	4603      	mov	r3, r0
 80069d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80069d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f040 819f 	bne.w	8006d1e <f_open+0x37e>
		dj.obj.fs = fs;
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	f107 0318 	add.w	r3, r7, #24
 80069ea:	4611      	mov	r1, r2
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7ff fbc5 	bl	800617c <follow_path>
 80069f2:	4603      	mov	r3, r0
 80069f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80069f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d11a      	bne.n	8006a36 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006a00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a04:	b25b      	sxtb	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	da03      	bge.n	8006a12 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006a0a:	2306      	movs	r3, #6
 8006a0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006a10:	e011      	b.n	8006a36 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006a12:	79fb      	ldrb	r3, [r7, #7]
 8006a14:	f023 0301 	bic.w	r3, r3, #1
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	bf14      	ite	ne
 8006a1c:	2301      	movne	r3, #1
 8006a1e:	2300      	moveq	r3, #0
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	461a      	mov	r2, r3
 8006a24:	f107 0318 	add.w	r3, r7, #24
 8006a28:	4611      	mov	r1, r2
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fd ff36 	bl	800489c <chk_lock>
 8006a30:	4603      	mov	r3, r0
 8006a32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006a36:	79fb      	ldrb	r3, [r7, #7]
 8006a38:	f003 031c 	and.w	r3, r3, #28
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d07f      	beq.n	8006b40 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006a40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d017      	beq.n	8006a78 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006a48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006a4c:	2b04      	cmp	r3, #4
 8006a4e:	d10e      	bne.n	8006a6e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006a50:	f7fd ff80 	bl	8004954 <enq_lock>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d006      	beq.n	8006a68 <f_open+0xc8>
 8006a5a:	f107 0318 	add.w	r3, r7, #24
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7ff f8dc 	bl	8005c1c <dir_register>
 8006a64:	4603      	mov	r3, r0
 8006a66:	e000      	b.n	8006a6a <f_open+0xca>
 8006a68:	2312      	movs	r3, #18
 8006a6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006a6e:	79fb      	ldrb	r3, [r7, #7]
 8006a70:	f043 0308 	orr.w	r3, r3, #8
 8006a74:	71fb      	strb	r3, [r7, #7]
 8006a76:	e010      	b.n	8006a9a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006a78:	7fbb      	ldrb	r3, [r7, #30]
 8006a7a:	f003 0311 	and.w	r3, r3, #17
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <f_open+0xea>
					res = FR_DENIED;
 8006a82:	2307      	movs	r3, #7
 8006a84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006a88:	e007      	b.n	8006a9a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006a8a:	79fb      	ldrb	r3, [r7, #7]
 8006a8c:	f003 0304 	and.w	r3, r3, #4
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <f_open+0xfa>
 8006a94:	2308      	movs	r3, #8
 8006a96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006a9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d168      	bne.n	8006b74 <f_open+0x1d4>
 8006aa2:	79fb      	ldrb	r3, [r7, #7]
 8006aa4:	f003 0308 	and.w	r3, r3, #8
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d063      	beq.n	8006b74 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006aac:	f7fd fce6 	bl	800447c <get_fattime>
 8006ab0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab4:	330e      	adds	r3, #14
 8006ab6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7fd fe45 	bl	8004748 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac0:	3316      	adds	r3, #22
 8006ac2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fd fe3f 	bl	8004748 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006acc:	330b      	adds	r3, #11
 8006ace:	2220      	movs	r2, #32
 8006ad0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ad6:	4611      	mov	r1, r2
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fe fe17 	bl	800570c <ld_clust>
 8006ade:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7fe fe2f 	bl	800574a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aee:	331c      	adds	r3, #28
 8006af0:	2100      	movs	r1, #0
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fd fe28 	bl	8004748 <st_dword>
					fs->wflag = 1;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	2201      	movs	r2, #1
 8006afc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d037      	beq.n	8006b74 <f_open+0x1d4>
						dw = fs->winsect;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b08:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006b0a:	f107 0318 	add.w	r3, r7, #24
 8006b0e:	2200      	movs	r2, #0
 8006b10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fe fb1f 	bl	8005156 <remove_chain>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8006b1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d126      	bne.n	8006b74 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fe f866 	bl	8004bfc <move_window>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b3a:	3a01      	subs	r2, #1
 8006b3c:	615a      	str	r2, [r3, #20]
 8006b3e:	e019      	b.n	8006b74 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006b40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d115      	bne.n	8006b74 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006b48:	7fbb      	ldrb	r3, [r7, #30]
 8006b4a:	f003 0310 	and.w	r3, r3, #16
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <f_open+0x1ba>
					res = FR_NO_FILE;
 8006b52:	2304      	movs	r3, #4
 8006b54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006b58:	e00c      	b.n	8006b74 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006b5a:	79fb      	ldrb	r3, [r7, #7]
 8006b5c:	f003 0302 	and.w	r3, r3, #2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d007      	beq.n	8006b74 <f_open+0x1d4>
 8006b64:	7fbb      	ldrb	r3, [r7, #30]
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d002      	beq.n	8006b74 <f_open+0x1d4>
						res = FR_DENIED;
 8006b6e:	2307      	movs	r3, #7
 8006b70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8006b74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d128      	bne.n	8006bce <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006b7c:	79fb      	ldrb	r3, [r7, #7]
 8006b7e:	f003 0308 	and.w	r3, r3, #8
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006b86:	79fb      	ldrb	r3, [r7, #7]
 8006b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b8c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006b96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006b9c:	79fb      	ldrb	r3, [r7, #7]
 8006b9e:	f023 0301 	bic.w	r3, r3, #1
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	bf14      	ite	ne
 8006ba6:	2301      	movne	r3, #1
 8006ba8:	2300      	moveq	r3, #0
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	461a      	mov	r2, r3
 8006bae:	f107 0318 	add.w	r3, r7, #24
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7fd feef 	bl	8004998 <inc_lock>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d102      	bne.n	8006bce <f_open+0x22e>
 8006bc8:	2302      	movs	r3, #2
 8006bca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006bce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f040 80a3 	bne.w	8006d1e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bdc:	4611      	mov	r1, r2
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fe fd94 	bl	800570c <ld_clust>
 8006be4:	4602      	mov	r2, r0
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bec:	331c      	adds	r3, #28
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fd fd6c 	bl	80046cc <ld_dword>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	88da      	ldrh	r2, [r3, #6]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	79fa      	ldrb	r2, [r7, #7]
 8006c12:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	3330      	adds	r3, #48	; 0x30
 8006c2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006c2e:	2100      	movs	r1, #0
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7fd fdd6 	bl	80047e2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006c36:	79fb      	ldrb	r3, [r7, #7]
 8006c38:	f003 0320 	and.w	r3, r3, #32
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d06e      	beq.n	8006d1e <f_open+0x37e>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d06a      	beq.n	8006d1e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	68da      	ldr	r2, [r3, #12]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	895b      	ldrh	r3, [r3, #10]
 8006c54:	461a      	mov	r2, r3
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	899b      	ldrh	r3, [r3, #12]
 8006c5a:	fb02 f303 	mul.w	r3, r2, r3
 8006c5e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c6c:	e016      	b.n	8006c9c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fe f87f 	bl	8004d76 <get_fat>
 8006c78:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8006c7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d802      	bhi.n	8006c86 <f_open+0x2e6>
 8006c80:	2302      	movs	r3, #2
 8006c82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006c86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8c:	d102      	bne.n	8006c94 <f_open+0x2f4>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006c94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c9c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d103      	bne.n	8006cac <f_open+0x30c>
 8006ca4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d8e0      	bhi.n	8006c6e <f_open+0x2ce>
				}
				fp->clust = clst;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006cb0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006cb2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d131      	bne.n	8006d1e <f_open+0x37e>
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	899b      	ldrh	r3, [r3, #12]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cc2:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cc6:	fb01 f202 	mul.w	r2, r1, r2
 8006cca:	1a9b      	subs	r3, r3, r2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d026      	beq.n	8006d1e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7fe f82f 	bl	8004d38 <clust2sect>
 8006cda:	64f8      	str	r0, [r7, #76]	; 0x4c
 8006cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d103      	bne.n	8006cea <f_open+0x34a>
						res = FR_INT_ERR;
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006ce8:	e019      	b.n	8006d1e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	899b      	ldrh	r3, [r3, #12]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cf2:	fbb3 f2f2 	udiv	r2, r3, r2
 8006cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cf8:	441a      	add	r2, r3
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	7858      	ldrb	r0, [r3, #1]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a1a      	ldr	r2, [r3, #32]
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	f7fd fc67 	bl	80045e0 <disk_read>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d002      	beq.n	8006d1e <f_open+0x37e>
 8006d18:	2301      	movs	r3, #1
 8006d1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006d1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d002      	beq.n	8006d2c <f_open+0x38c>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006d2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3768      	adds	r7, #104	; 0x68
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b08e      	sub	sp, #56	; 0x38
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
 8006d44:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f107 0214 	add.w	r2, r7, #20
 8006d56:	4611      	mov	r1, r2
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7ff fda5 	bl	80068a8 <validate>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006d64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d107      	bne.n	8006d7c <f_read+0x44>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	7d5b      	ldrb	r3, [r3, #21]
 8006d70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006d74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d002      	beq.n	8006d82 <f_read+0x4a>
 8006d7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d80:	e135      	b.n	8006fee <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	7d1b      	ldrb	r3, [r3, #20]
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <f_read+0x5a>
 8006d8e:	2307      	movs	r3, #7
 8006d90:	e12d      	b.n	8006fee <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	68da      	ldr	r2, [r3, #12]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	f240 811e 	bls.w	8006fe4 <f_read+0x2ac>
 8006da8:	6a3b      	ldr	r3, [r7, #32]
 8006daa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006dac:	e11a      	b.n	8006fe4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	8992      	ldrh	r2, [r2, #12]
 8006db6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006dba:	fb01 f202 	mul.w	r2, r1, r2
 8006dbe:	1a9b      	subs	r3, r3, r2
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f040 80d5 	bne.w	8006f70 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	8992      	ldrh	r2, [r2, #12]
 8006dce:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	8952      	ldrh	r2, [r2, #10]
 8006dd6:	3a01      	subs	r2, #1
 8006dd8:	4013      	ands	r3, r2
 8006dda:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d12f      	bne.n	8006e42 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d103      	bne.n	8006df2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	633b      	str	r3, [r7, #48]	; 0x30
 8006df0:	e013      	b.n	8006e1a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d007      	beq.n	8006e0a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	4619      	mov	r1, r3
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f7fe faa5 	bl	8005350 <clmt_clust>
 8006e06:	6338      	str	r0, [r7, #48]	; 0x30
 8006e08:	e007      	b.n	8006e1a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	4619      	mov	r1, r3
 8006e12:	4610      	mov	r0, r2
 8006e14:	f7fd ffaf 	bl	8004d76 <get_fat>
 8006e18:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d804      	bhi.n	8006e2a <f_read+0xf2>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2202      	movs	r2, #2
 8006e24:	755a      	strb	r2, [r3, #21]
 8006e26:	2302      	movs	r3, #2
 8006e28:	e0e1      	b.n	8006fee <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e30:	d104      	bne.n	8006e3c <f_read+0x104>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2201      	movs	r2, #1
 8006e36:	755a      	strb	r2, [r3, #21]
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e0d8      	b.n	8006fee <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e40:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	69db      	ldr	r3, [r3, #28]
 8006e48:	4619      	mov	r1, r3
 8006e4a:	4610      	mov	r0, r2
 8006e4c:	f7fd ff74 	bl	8004d38 <clust2sect>
 8006e50:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d104      	bne.n	8006e62 <f_read+0x12a>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	755a      	strb	r2, [r3, #21]
 8006e5e:	2302      	movs	r3, #2
 8006e60:	e0c5      	b.n	8006fee <f_read+0x2b6>
			sect += csect;
 8006e62:	69ba      	ldr	r2, [r7, #24]
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	4413      	add	r3, r2
 8006e68:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	899b      	ldrh	r3, [r3, #12]
 8006e6e:	461a      	mov	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e76:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d041      	beq.n	8006f02 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006e7e:	69fa      	ldr	r2, [r7, #28]
 8006e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e82:	4413      	add	r3, r2
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	8952      	ldrh	r2, [r2, #10]
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d905      	bls.n	8006e98 <f_read+0x160>
					cc = fs->csize - csect;
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	895b      	ldrh	r3, [r3, #10]
 8006e90:	461a      	mov	r2, r3
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	7858      	ldrb	r0, [r3, #1]
 8006e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ea2:	f7fd fb9d 	bl	80045e0 <disk_read>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d004      	beq.n	8006eb6 <f_read+0x17e>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	755a      	strb	r2, [r3, #21]
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e09b      	b.n	8006fee <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	7d1b      	ldrb	r3, [r3, #20]
 8006eba:	b25b      	sxtb	r3, r3
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	da18      	bge.n	8006ef2 <f_read+0x1ba>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6a1a      	ldr	r2, [r3, #32]
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d911      	bls.n	8006ef2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6a1a      	ldr	r2, [r3, #32]
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	8992      	ldrh	r2, [r2, #12]
 8006eda:	fb02 f303 	mul.w	r3, r2, r3
 8006ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ee0:	18d0      	adds	r0, r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	899b      	ldrh	r3, [r3, #12]
 8006eec:	461a      	mov	r2, r3
 8006eee:	f7fd fc57 	bl	80047a0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	899b      	ldrh	r3, [r3, #12]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efa:	fb02 f303 	mul.w	r3, r2, r3
 8006efe:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006f00:	e05c      	b.n	8006fbc <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	69ba      	ldr	r2, [r7, #24]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d02e      	beq.n	8006f6a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	7d1b      	ldrb	r3, [r3, #20]
 8006f10:	b25b      	sxtb	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	da18      	bge.n	8006f48 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	7858      	ldrb	r0, [r3, #1]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6a1a      	ldr	r2, [r3, #32]
 8006f24:	2301      	movs	r3, #1
 8006f26:	f7fd fb7b 	bl	8004620 <disk_write>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d004      	beq.n	8006f3a <f_read+0x202>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2201      	movs	r2, #1
 8006f34:	755a      	strb	r2, [r3, #21]
 8006f36:	2301      	movs	r3, #1
 8006f38:	e059      	b.n	8006fee <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	7d1b      	ldrb	r3, [r3, #20]
 8006f3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	7858      	ldrb	r0, [r3, #1]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006f52:	2301      	movs	r3, #1
 8006f54:	69ba      	ldr	r2, [r7, #24]
 8006f56:	f7fd fb43 	bl	80045e0 <disk_read>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d004      	beq.n	8006f6a <f_read+0x232>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2201      	movs	r2, #1
 8006f64:	755a      	strb	r2, [r3, #21]
 8006f66:	2301      	movs	r3, #1
 8006f68:	e041      	b.n	8006fee <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	69ba      	ldr	r2, [r7, #24]
 8006f6e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	899b      	ldrh	r3, [r3, #12]
 8006f74:	4618      	mov	r0, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	8992      	ldrh	r2, [r2, #12]
 8006f7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f82:	fb01 f202 	mul.w	r2, r1, r2
 8006f86:	1a9b      	subs	r3, r3, r2
 8006f88:	1ac3      	subs	r3, r0, r3
 8006f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d901      	bls.n	8006f98 <f_read+0x260>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	8992      	ldrh	r2, [r2, #12]
 8006fa6:	fbb3 f0f2 	udiv	r0, r3, r2
 8006faa:	fb00 f202 	mul.w	r2, r0, r2
 8006fae:	1a9b      	subs	r3, r3, r2
 8006fb0:	440b      	add	r3, r1
 8006fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fb8:	f7fd fbf2 	bl	80047a0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc0:	4413      	add	r3, r2
 8006fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	699a      	ldr	r2, [r3, #24]
 8006fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fca:	441a      	add	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	619a      	str	r2, [r3, #24]
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd6:	441a      	add	r2, r3
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f47f aee1 	bne.w	8006dae <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3738      	adds	r7, #56	; 0x38
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b086      	sub	sp, #24
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f107 0208 	add.w	r2, r7, #8
 8007004:	4611      	mov	r1, r2
 8007006:	4618      	mov	r0, r3
 8007008:	f7ff fc4e 	bl	80068a8 <validate>
 800700c:	4603      	mov	r3, r0
 800700e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007010:	7dfb      	ldrb	r3, [r7, #23]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d168      	bne.n	80070e8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	7d1b      	ldrb	r3, [r3, #20]
 800701a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701e:	2b00      	cmp	r3, #0
 8007020:	d062      	beq.n	80070e8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	7d1b      	ldrb	r3, [r3, #20]
 8007026:	b25b      	sxtb	r3, r3
 8007028:	2b00      	cmp	r3, #0
 800702a:	da15      	bge.n	8007058 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	7858      	ldrb	r0, [r3, #1]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a1a      	ldr	r2, [r3, #32]
 800703a:	2301      	movs	r3, #1
 800703c:	f7fd faf0 	bl	8004620 <disk_write>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <f_sync+0x54>
 8007046:	2301      	movs	r3, #1
 8007048:	e04f      	b.n	80070ea <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	7d1b      	ldrb	r3, [r3, #20]
 800704e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007052:	b2da      	uxtb	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007058:	f7fd fa10 	bl	800447c <get_fattime>
 800705c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007064:	4619      	mov	r1, r3
 8007066:	4610      	mov	r0, r2
 8007068:	f7fd fdc8 	bl	8004bfc <move_window>
 800706c:	4603      	mov	r3, r0
 800706e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007070:	7dfb      	ldrb	r3, [r7, #23]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d138      	bne.n	80070e8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	330b      	adds	r3, #11
 8007080:	781a      	ldrb	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	330b      	adds	r3, #11
 8007086:	f042 0220 	orr.w	r2, r2, #32
 800708a:	b2d2      	uxtb	r2, r2
 800708c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6818      	ldr	r0, [r3, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	461a      	mov	r2, r3
 8007098:	68f9      	ldr	r1, [r7, #12]
 800709a:	f7fe fb56 	bl	800574a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f103 021c 	add.w	r2, r3, #28
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	4619      	mov	r1, r3
 80070aa:	4610      	mov	r0, r2
 80070ac:	f7fd fb4c 	bl	8004748 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	3316      	adds	r3, #22
 80070b4:	6939      	ldr	r1, [r7, #16]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fd fb46 	bl	8004748 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	3312      	adds	r3, #18
 80070c0:	2100      	movs	r1, #0
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fd fb25 	bl	8004712 <st_word>
					fs->wflag = 1;
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	2201      	movs	r2, #1
 80070cc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7fd fdc1 	bl	8004c58 <sync_fs>
 80070d6:	4603      	mov	r3, r0
 80070d8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	7d1b      	ldrb	r3, [r3, #20]
 80070de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070e2:	b2da      	uxtb	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80070e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b084      	sub	sp, #16
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7ff ff7b 	bl	8006ff6 <f_sync>
 8007100:	4603      	mov	r3, r0
 8007102:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007104:	7bfb      	ldrb	r3, [r7, #15]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d118      	bne.n	800713c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f107 0208 	add.w	r2, r7, #8
 8007110:	4611      	mov	r1, r2
 8007112:	4618      	mov	r0, r3
 8007114:	f7ff fbc8 	bl	80068a8 <validate>
 8007118:	4603      	mov	r3, r0
 800711a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800711c:	7bfb      	ldrb	r3, [r7, #15]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10c      	bne.n	800713c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	4618      	mov	r0, r3
 8007128:	f7fd fcc4 	bl	8004ab4 <dec_lock>
 800712c:	4603      	mov	r3, r0
 800712e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007130:	7bfb      	ldrb	r3, [r7, #15]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d102      	bne.n	800713c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800713c:	7bfb      	ldrb	r3, [r7, #15]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b090      	sub	sp, #64	; 0x40
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
 800714e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f107 0208 	add.w	r2, r7, #8
 8007156:	4611      	mov	r1, r2
 8007158:	4618      	mov	r0, r3
 800715a:	f7ff fba5 	bl	80068a8 <validate>
 800715e:	4603      	mov	r3, r0
 8007160:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8007164:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007168:	2b00      	cmp	r3, #0
 800716a:	d103      	bne.n	8007174 <f_lseek+0x2e>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	7d5b      	ldrb	r3, [r3, #21]
 8007170:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8007174:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007178:	2b00      	cmp	r3, #0
 800717a:	d002      	beq.n	8007182 <f_lseek+0x3c>
 800717c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007180:	e201      	b.n	8007586 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007186:	2b00      	cmp	r3, #0
 8007188:	f000 80d9 	beq.w	800733e <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007192:	d15a      	bne.n	800724a <f_lseek+0x104>
			tbl = fp->cltbl;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007198:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719c:	1d1a      	adds	r2, r3, #4
 800719e:	627a      	str	r2, [r7, #36]	; 0x24
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	617b      	str	r3, [r7, #20]
 80071a4:	2302      	movs	r3, #2
 80071a6:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80071ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d03a      	beq.n	800722a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80071b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b6:	613b      	str	r3, [r7, #16]
 80071b8:	2300      	movs	r3, #0
 80071ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071be:	3302      	adds	r3, #2
 80071c0:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80071c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c4:	60fb      	str	r3, [r7, #12]
 80071c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c8:	3301      	adds	r3, #1
 80071ca:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7fd fdd0 	bl	8004d76 <get_fat>
 80071d6:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80071d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d804      	bhi.n	80071e8 <f_lseek+0xa2>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2202      	movs	r2, #2
 80071e2:	755a      	strb	r2, [r3, #21]
 80071e4:	2302      	movs	r3, #2
 80071e6:	e1ce      	b.n	8007586 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80071e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ee:	d104      	bne.n	80071fa <f_lseek+0xb4>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	755a      	strb	r2, [r3, #21]
 80071f6:	2301      	movs	r3, #1
 80071f8:	e1c5      	b.n	8007586 <f_lseek+0x440>
					} while (cl == pcl + 1);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3301      	adds	r3, #1
 80071fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007200:	429a      	cmp	r2, r3
 8007202:	d0de      	beq.n	80071c2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	429a      	cmp	r2, r3
 800720a:	d809      	bhi.n	8007220 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720e:	1d1a      	adds	r2, r3, #4
 8007210:	627a      	str	r2, [r7, #36]	; 0x24
 8007212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007214:	601a      	str	r2, [r3, #0]
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	1d1a      	adds	r2, r3, #4
 800721a:	627a      	str	r2, [r7, #36]	; 0x24
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	69db      	ldr	r3, [r3, #28]
 8007224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007226:	429a      	cmp	r2, r3
 8007228:	d3c4      	bcc.n	80071b4 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007230:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8007232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	429a      	cmp	r2, r3
 8007238:	d803      	bhi.n	8007242 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723c:	2200      	movs	r2, #0
 800723e:	601a      	str	r2, [r3, #0]
 8007240:	e19f      	b.n	8007582 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007242:	2311      	movs	r3, #17
 8007244:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007248:	e19b      	b.n	8007582 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	429a      	cmp	r2, r3
 8007252:	d902      	bls.n	800725a <f_lseek+0x114>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	683a      	ldr	r2, [r7, #0]
 800725e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	f000 818d 	beq.w	8007582 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	3b01      	subs	r3, #1
 800726c:	4619      	mov	r1, r3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7fe f86e 	bl	8005350 <clmt_clust>
 8007274:	4602      	mov	r2, r0
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	69db      	ldr	r3, [r3, #28]
 8007280:	4619      	mov	r1, r3
 8007282:	4610      	mov	r0, r2
 8007284:	f7fd fd58 	bl	8004d38 <clust2sect>
 8007288:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d104      	bne.n	800729a <f_lseek+0x154>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2202      	movs	r2, #2
 8007294:	755a      	strb	r2, [r3, #21]
 8007296:	2302      	movs	r3, #2
 8007298:	e175      	b.n	8007586 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	3b01      	subs	r3, #1
 800729e:	68ba      	ldr	r2, [r7, #8]
 80072a0:	8992      	ldrh	r2, [r2, #12]
 80072a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	8952      	ldrh	r2, [r2, #10]
 80072aa:	3a01      	subs	r2, #1
 80072ac:	4013      	ands	r3, r2
 80072ae:	69ba      	ldr	r2, [r7, #24]
 80072b0:	4413      	add	r3, r2
 80072b2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	8992      	ldrh	r2, [r2, #12]
 80072bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80072c0:	fb01 f202 	mul.w	r2, r1, r2
 80072c4:	1a9b      	subs	r3, r3, r2
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f000 815b 	beq.w	8007582 <f_lseek+0x43c>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a1b      	ldr	r3, [r3, #32]
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	f000 8155 	beq.w	8007582 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	7d1b      	ldrb	r3, [r3, #20]
 80072dc:	b25b      	sxtb	r3, r3
 80072de:	2b00      	cmp	r3, #0
 80072e0:	da18      	bge.n	8007314 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	7858      	ldrb	r0, [r3, #1]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a1a      	ldr	r2, [r3, #32]
 80072f0:	2301      	movs	r3, #1
 80072f2:	f7fd f995 	bl	8004620 <disk_write>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d004      	beq.n	8007306 <f_lseek+0x1c0>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	755a      	strb	r2, [r3, #21]
 8007302:	2301      	movs	r3, #1
 8007304:	e13f      	b.n	8007586 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	7d1b      	ldrb	r3, [r3, #20]
 800730a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800730e:	b2da      	uxtb	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	7858      	ldrb	r0, [r3, #1]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800731e:	2301      	movs	r3, #1
 8007320:	69ba      	ldr	r2, [r7, #24]
 8007322:	f7fd f95d 	bl	80045e0 <disk_read>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d004      	beq.n	8007336 <f_lseek+0x1f0>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	755a      	strb	r2, [r3, #21]
 8007332:	2301      	movs	r3, #1
 8007334:	e127      	b.n	8007586 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	69ba      	ldr	r2, [r7, #24]
 800733a:	621a      	str	r2, [r3, #32]
 800733c:	e121      	b.n	8007582 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	683a      	ldr	r2, [r7, #0]
 8007344:	429a      	cmp	r2, r3
 8007346:	d908      	bls.n	800735a <f_lseek+0x214>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	7d1b      	ldrb	r3, [r3, #20]
 800734c:	f003 0302 	and.w	r3, r3, #2
 8007350:	2b00      	cmp	r3, #0
 8007352:	d102      	bne.n	800735a <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007360:	2300      	movs	r3, #0
 8007362:	637b      	str	r3, [r7, #52]	; 0x34
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007368:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 80b5 	beq.w	80074dc <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	895b      	ldrh	r3, [r3, #10]
 8007376:	461a      	mov	r2, r3
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	899b      	ldrh	r3, [r3, #12]
 800737c:	fb02 f303 	mul.w	r3, r2, r3
 8007380:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d01b      	beq.n	80073c0 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	1e5a      	subs	r2, r3, #1
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007392:	6a3b      	ldr	r3, [r7, #32]
 8007394:	1e59      	subs	r1, r3, #1
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800739c:	429a      	cmp	r2, r3
 800739e:	d30f      	bcc.n	80073c0 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	1e5a      	subs	r2, r3, #1
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	425b      	negs	r3, r3
 80073a8:	401a      	ands	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	683a      	ldr	r2, [r7, #0]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	69db      	ldr	r3, [r3, #28]
 80073bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80073be:	e022      	b.n	8007406 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80073c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d119      	bne.n	8007400 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2100      	movs	r1, #0
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7fd ff25 	bl	8005220 <create_chain>
 80073d6:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80073d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d104      	bne.n	80073e8 <f_lseek+0x2a2>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2202      	movs	r2, #2
 80073e2:	755a      	strb	r2, [r3, #21]
 80073e4:	2302      	movs	r3, #2
 80073e6:	e0ce      	b.n	8007586 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80073e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ee:	d104      	bne.n	80073fa <f_lseek+0x2b4>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	755a      	strb	r2, [r3, #21]
 80073f6:	2301      	movs	r3, #1
 80073f8:	e0c5      	b.n	8007586 <f_lseek+0x440>
					fp->obj.sclust = clst;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073fe:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007404:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8007406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007408:	2b00      	cmp	r3, #0
 800740a:	d067      	beq.n	80074dc <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800740c:	e03a      	b.n	8007484 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	603b      	str	r3, [r7, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	699a      	ldr	r2, [r3, #24]
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	441a      	add	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	7d1b      	ldrb	r3, [r3, #20]
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00b      	beq.n	8007446 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007432:	4618      	mov	r0, r3
 8007434:	f7fd fef4 	bl	8005220 <create_chain>
 8007438:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800743a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743c:	2b00      	cmp	r3, #0
 800743e:	d108      	bne.n	8007452 <f_lseek+0x30c>
							ofs = 0; break;
 8007440:	2300      	movs	r3, #0
 8007442:	603b      	str	r3, [r7, #0]
 8007444:	e022      	b.n	800748c <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800744a:	4618      	mov	r0, r3
 800744c:	f7fd fc93 	bl	8004d76 <get_fat>
 8007450:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007458:	d104      	bne.n	8007464 <f_lseek+0x31e>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	755a      	strb	r2, [r3, #21]
 8007460:	2301      	movs	r3, #1
 8007462:	e090      	b.n	8007586 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007466:	2b01      	cmp	r3, #1
 8007468:	d904      	bls.n	8007474 <f_lseek+0x32e>
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007470:	429a      	cmp	r2, r3
 8007472:	d304      	bcc.n	800747e <f_lseek+0x338>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2202      	movs	r2, #2
 8007478:	755a      	strb	r2, [r3, #21]
 800747a:	2302      	movs	r3, #2
 800747c:	e083      	b.n	8007586 <f_lseek+0x440>
					fp->clust = clst;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007482:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8007484:	683a      	ldr	r2, [r7, #0]
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	429a      	cmp	r2, r3
 800748a:	d8c0      	bhi.n	800740e <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	699a      	ldr	r2, [r3, #24]
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	441a      	add	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	899b      	ldrh	r3, [r3, #12]
 800749c:	461a      	mov	r2, r3
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80074a4:	fb01 f202 	mul.w	r2, r1, r2
 80074a8:	1a9b      	subs	r3, r3, r2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d016      	beq.n	80074dc <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fd fc40 	bl	8004d38 <clust2sect>
 80074b8:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80074ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d104      	bne.n	80074ca <f_lseek+0x384>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2202      	movs	r2, #2
 80074c4:	755a      	strb	r2, [r3, #21]
 80074c6:	2302      	movs	r3, #2
 80074c8:	e05d      	b.n	8007586 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	899b      	ldrh	r3, [r3, #12]
 80074ce:	461a      	mov	r2, r3
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80074d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074d8:	4413      	add	r3, r2
 80074da:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	699a      	ldr	r2, [r3, #24]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d90a      	bls.n	80074fe <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	699a      	ldr	r2, [r3, #24]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	7d1b      	ldrb	r3, [r3, #20]
 80074f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074f8:	b2da      	uxtb	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	8992      	ldrh	r2, [r2, #12]
 8007506:	fbb3 f1f2 	udiv	r1, r3, r2
 800750a:	fb01 f202 	mul.w	r2, r1, r2
 800750e:	1a9b      	subs	r3, r3, r2
 8007510:	2b00      	cmp	r3, #0
 8007512:	d036      	beq.n	8007582 <f_lseek+0x43c>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6a1b      	ldr	r3, [r3, #32]
 8007518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800751a:	429a      	cmp	r2, r3
 800751c:	d031      	beq.n	8007582 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	7d1b      	ldrb	r3, [r3, #20]
 8007522:	b25b      	sxtb	r3, r3
 8007524:	2b00      	cmp	r3, #0
 8007526:	da18      	bge.n	800755a <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	7858      	ldrb	r0, [r3, #1]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a1a      	ldr	r2, [r3, #32]
 8007536:	2301      	movs	r3, #1
 8007538:	f7fd f872 	bl	8004620 <disk_write>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d004      	beq.n	800754c <f_lseek+0x406>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	755a      	strb	r2, [r3, #21]
 8007548:	2301      	movs	r3, #1
 800754a:	e01c      	b.n	8007586 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	7d1b      	ldrb	r3, [r3, #20]
 8007550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007554:	b2da      	uxtb	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	7858      	ldrb	r0, [r3, #1]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007564:	2301      	movs	r3, #1
 8007566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007568:	f7fd f83a 	bl	80045e0 <disk_read>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d004      	beq.n	800757c <f_lseek+0x436>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	755a      	strb	r2, [r3, #21]
 8007578:	2301      	movs	r3, #1
 800757a:	e004      	b.n	8007586 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007580:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8007582:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007586:	4618      	mov	r0, r3
 8007588:	3740      	adds	r7, #64	; 0x40
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
	...

08007590 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007590:	b480      	push	{r7}
 8007592:	b087      	sub	sp, #28
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	4613      	mov	r3, r2
 800759c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800759e:	2301      	movs	r3, #1
 80075a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80075a2:	2300      	movs	r3, #0
 80075a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80075a6:	4b1f      	ldr	r3, [pc, #124]	; (8007624 <FATFS_LinkDriverEx+0x94>)
 80075a8:	7a5b      	ldrb	r3, [r3, #9]
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d131      	bne.n	8007614 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80075b0:	4b1c      	ldr	r3, [pc, #112]	; (8007624 <FATFS_LinkDriverEx+0x94>)
 80075b2:	7a5b      	ldrb	r3, [r3, #9]
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	461a      	mov	r2, r3
 80075b8:	4b1a      	ldr	r3, [pc, #104]	; (8007624 <FATFS_LinkDriverEx+0x94>)
 80075ba:	2100      	movs	r1, #0
 80075bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80075be:	4b19      	ldr	r3, [pc, #100]	; (8007624 <FATFS_LinkDriverEx+0x94>)
 80075c0:	7a5b      	ldrb	r3, [r3, #9]
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	4a17      	ldr	r2, [pc, #92]	; (8007624 <FATFS_LinkDriverEx+0x94>)
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80075ce:	4b15      	ldr	r3, [pc, #84]	; (8007624 <FATFS_LinkDriverEx+0x94>)
 80075d0:	7a5b      	ldrb	r3, [r3, #9]
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	461a      	mov	r2, r3
 80075d6:	4b13      	ldr	r3, [pc, #76]	; (8007624 <FATFS_LinkDriverEx+0x94>)
 80075d8:	4413      	add	r3, r2
 80075da:	79fa      	ldrb	r2, [r7, #7]
 80075dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80075de:	4b11      	ldr	r3, [pc, #68]	; (8007624 <FATFS_LinkDriverEx+0x94>)
 80075e0:	7a5b      	ldrb	r3, [r3, #9]
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	1c5a      	adds	r2, r3, #1
 80075e6:	b2d1      	uxtb	r1, r2
 80075e8:	4a0e      	ldr	r2, [pc, #56]	; (8007624 <FATFS_LinkDriverEx+0x94>)
 80075ea:	7251      	strb	r1, [r2, #9]
 80075ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80075ee:	7dbb      	ldrb	r3, [r7, #22]
 80075f0:	3330      	adds	r3, #48	; 0x30
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	3301      	adds	r3, #1
 80075fc:	223a      	movs	r2, #58	; 0x3a
 80075fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	3302      	adds	r3, #2
 8007604:	222f      	movs	r2, #47	; 0x2f
 8007606:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	3303      	adds	r3, #3
 800760c:	2200      	movs	r2, #0
 800760e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007610:	2300      	movs	r3, #0
 8007612:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007614:	7dfb      	ldrb	r3, [r7, #23]
}
 8007616:	4618      	mov	r0, r3
 8007618:	371c      	adds	r7, #28
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	20001454 	.word	0x20001454

08007628 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007632:	2200      	movs	r2, #0
 8007634:	6839      	ldr	r1, [r7, #0]
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7ff ffaa 	bl	8007590 <FATFS_LinkDriverEx>
 800763c:	4603      	mov	r3, r0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
	...

08007648 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	4603      	mov	r3, r0
 8007650:	6039      	str	r1, [r7, #0]
 8007652:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007654:	88fb      	ldrh	r3, [r7, #6]
 8007656:	2b7f      	cmp	r3, #127	; 0x7f
 8007658:	d802      	bhi.n	8007660 <ff_convert+0x18>
		c = chr;
 800765a:	88fb      	ldrh	r3, [r7, #6]
 800765c:	81fb      	strh	r3, [r7, #14]
 800765e:	e025      	b.n	80076ac <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00b      	beq.n	800767e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007666:	88fb      	ldrh	r3, [r7, #6]
 8007668:	2bff      	cmp	r3, #255	; 0xff
 800766a:	d805      	bhi.n	8007678 <ff_convert+0x30>
 800766c:	88fb      	ldrh	r3, [r7, #6]
 800766e:	3b80      	subs	r3, #128	; 0x80
 8007670:	4a12      	ldr	r2, [pc, #72]	; (80076bc <ff_convert+0x74>)
 8007672:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007676:	e000      	b.n	800767a <ff_convert+0x32>
 8007678:	2300      	movs	r3, #0
 800767a:	81fb      	strh	r3, [r7, #14]
 800767c:	e016      	b.n	80076ac <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800767e:	2300      	movs	r3, #0
 8007680:	81fb      	strh	r3, [r7, #14]
 8007682:	e009      	b.n	8007698 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007684:	89fb      	ldrh	r3, [r7, #14]
 8007686:	4a0d      	ldr	r2, [pc, #52]	; (80076bc <ff_convert+0x74>)
 8007688:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800768c:	88fa      	ldrh	r2, [r7, #6]
 800768e:	429a      	cmp	r2, r3
 8007690:	d006      	beq.n	80076a0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007692:	89fb      	ldrh	r3, [r7, #14]
 8007694:	3301      	adds	r3, #1
 8007696:	81fb      	strh	r3, [r7, #14]
 8007698:	89fb      	ldrh	r3, [r7, #14]
 800769a:	2b7f      	cmp	r3, #127	; 0x7f
 800769c:	d9f2      	bls.n	8007684 <ff_convert+0x3c>
 800769e:	e000      	b.n	80076a2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80076a0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80076a2:	89fb      	ldrh	r3, [r7, #14]
 80076a4:	3380      	adds	r3, #128	; 0x80
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80076ac:	89fb      	ldrh	r3, [r7, #14]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	08008348 	.word	0x08008348

080076c0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b087      	sub	sp, #28
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	4603      	mov	r3, r0
 80076c8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80076ca:	88fb      	ldrh	r3, [r7, #6]
 80076cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d0:	d201      	bcs.n	80076d6 <ff_wtoupper+0x16>
 80076d2:	4b3e      	ldr	r3, [pc, #248]	; (80077cc <ff_wtoupper+0x10c>)
 80076d4:	e000      	b.n	80076d8 <ff_wtoupper+0x18>
 80076d6:	4b3e      	ldr	r3, [pc, #248]	; (80077d0 <ff_wtoupper+0x110>)
 80076d8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	1c9a      	adds	r2, r3, #2
 80076de:	617a      	str	r2, [r7, #20]
 80076e0:	881b      	ldrh	r3, [r3, #0]
 80076e2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80076e4:	8a7b      	ldrh	r3, [r7, #18]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d068      	beq.n	80077bc <ff_wtoupper+0xfc>
 80076ea:	88fa      	ldrh	r2, [r7, #6]
 80076ec:	8a7b      	ldrh	r3, [r7, #18]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d364      	bcc.n	80077bc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	1c9a      	adds	r2, r3, #2
 80076f6:	617a      	str	r2, [r7, #20]
 80076f8:	881b      	ldrh	r3, [r3, #0]
 80076fa:	823b      	strh	r3, [r7, #16]
 80076fc:	8a3b      	ldrh	r3, [r7, #16]
 80076fe:	0a1b      	lsrs	r3, r3, #8
 8007700:	81fb      	strh	r3, [r7, #14]
 8007702:	8a3b      	ldrh	r3, [r7, #16]
 8007704:	b2db      	uxtb	r3, r3
 8007706:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007708:	88fa      	ldrh	r2, [r7, #6]
 800770a:	8a79      	ldrh	r1, [r7, #18]
 800770c:	8a3b      	ldrh	r3, [r7, #16]
 800770e:	440b      	add	r3, r1
 8007710:	429a      	cmp	r2, r3
 8007712:	da49      	bge.n	80077a8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007714:	89fb      	ldrh	r3, [r7, #14]
 8007716:	2b08      	cmp	r3, #8
 8007718:	d84f      	bhi.n	80077ba <ff_wtoupper+0xfa>
 800771a:	a201      	add	r2, pc, #4	; (adr r2, 8007720 <ff_wtoupper+0x60>)
 800771c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007720:	08007745 	.word	0x08007745
 8007724:	08007757 	.word	0x08007757
 8007728:	0800776d 	.word	0x0800776d
 800772c:	08007775 	.word	0x08007775
 8007730:	0800777d 	.word	0x0800777d
 8007734:	08007785 	.word	0x08007785
 8007738:	0800778d 	.word	0x0800778d
 800773c:	08007795 	.word	0x08007795
 8007740:	0800779d 	.word	0x0800779d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007744:	88fa      	ldrh	r2, [r7, #6]
 8007746:	8a7b      	ldrh	r3, [r7, #18]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	005b      	lsls	r3, r3, #1
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	4413      	add	r3, r2
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	80fb      	strh	r3, [r7, #6]
 8007754:	e027      	b.n	80077a6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007756:	88fa      	ldrh	r2, [r7, #6]
 8007758:	8a7b      	ldrh	r3, [r7, #18]
 800775a:	1ad3      	subs	r3, r2, r3
 800775c:	b29b      	uxth	r3, r3
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	b29b      	uxth	r3, r3
 8007764:	88fa      	ldrh	r2, [r7, #6]
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	80fb      	strh	r3, [r7, #6]
 800776a:	e01c      	b.n	80077a6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800776c:	88fb      	ldrh	r3, [r7, #6]
 800776e:	3b10      	subs	r3, #16
 8007770:	80fb      	strh	r3, [r7, #6]
 8007772:	e018      	b.n	80077a6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007774:	88fb      	ldrh	r3, [r7, #6]
 8007776:	3b20      	subs	r3, #32
 8007778:	80fb      	strh	r3, [r7, #6]
 800777a:	e014      	b.n	80077a6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800777c:	88fb      	ldrh	r3, [r7, #6]
 800777e:	3b30      	subs	r3, #48	; 0x30
 8007780:	80fb      	strh	r3, [r7, #6]
 8007782:	e010      	b.n	80077a6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007784:	88fb      	ldrh	r3, [r7, #6]
 8007786:	3b1a      	subs	r3, #26
 8007788:	80fb      	strh	r3, [r7, #6]
 800778a:	e00c      	b.n	80077a6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800778c:	88fb      	ldrh	r3, [r7, #6]
 800778e:	3308      	adds	r3, #8
 8007790:	80fb      	strh	r3, [r7, #6]
 8007792:	e008      	b.n	80077a6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007794:	88fb      	ldrh	r3, [r7, #6]
 8007796:	3b50      	subs	r3, #80	; 0x50
 8007798:	80fb      	strh	r3, [r7, #6]
 800779a:	e004      	b.n	80077a6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800779c:	88fb      	ldrh	r3, [r7, #6]
 800779e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80077a2:	80fb      	strh	r3, [r7, #6]
 80077a4:	bf00      	nop
			}
			break;
 80077a6:	e008      	b.n	80077ba <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80077a8:	89fb      	ldrh	r3, [r7, #14]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d195      	bne.n	80076da <ff_wtoupper+0x1a>
 80077ae:	8a3b      	ldrh	r3, [r7, #16]
 80077b0:	005b      	lsls	r3, r3, #1
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	4413      	add	r3, r2
 80077b6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80077b8:	e78f      	b.n	80076da <ff_wtoupper+0x1a>
			break;
 80077ba:	bf00      	nop
	}

	return chr;
 80077bc:	88fb      	ldrh	r3, [r7, #6]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	371c      	adds	r7, #28
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	08008448 	.word	0x08008448
 80077d0:	0800863c 	.word	0x0800863c

080077d4 <__errno>:
 80077d4:	4b01      	ldr	r3, [pc, #4]	; (80077dc <__errno+0x8>)
 80077d6:	6818      	ldr	r0, [r3, #0]
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	20000024 	.word	0x20000024

080077e0 <__libc_init_array>:
 80077e0:	b570      	push	{r4, r5, r6, lr}
 80077e2:	4d0d      	ldr	r5, [pc, #52]	; (8007818 <__libc_init_array+0x38>)
 80077e4:	4c0d      	ldr	r4, [pc, #52]	; (800781c <__libc_init_array+0x3c>)
 80077e6:	1b64      	subs	r4, r4, r5
 80077e8:	10a4      	asrs	r4, r4, #2
 80077ea:	2600      	movs	r6, #0
 80077ec:	42a6      	cmp	r6, r4
 80077ee:	d109      	bne.n	8007804 <__libc_init_array+0x24>
 80077f0:	4d0b      	ldr	r5, [pc, #44]	; (8007820 <__libc_init_array+0x40>)
 80077f2:	4c0c      	ldr	r4, [pc, #48]	; (8007824 <__libc_init_array+0x44>)
 80077f4:	f000 fca2 	bl	800813c <_init>
 80077f8:	1b64      	subs	r4, r4, r5
 80077fa:	10a4      	asrs	r4, r4, #2
 80077fc:	2600      	movs	r6, #0
 80077fe:	42a6      	cmp	r6, r4
 8007800:	d105      	bne.n	800780e <__libc_init_array+0x2e>
 8007802:	bd70      	pop	{r4, r5, r6, pc}
 8007804:	f855 3b04 	ldr.w	r3, [r5], #4
 8007808:	4798      	blx	r3
 800780a:	3601      	adds	r6, #1
 800780c:	e7ee      	b.n	80077ec <__libc_init_array+0xc>
 800780e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007812:	4798      	blx	r3
 8007814:	3601      	adds	r6, #1
 8007816:	e7f2      	b.n	80077fe <__libc_init_array+0x1e>
 8007818:	08008734 	.word	0x08008734
 800781c:	08008734 	.word	0x08008734
 8007820:	08008734 	.word	0x08008734
 8007824:	08008738 	.word	0x08008738

08007828 <memset>:
 8007828:	4402      	add	r2, r0
 800782a:	4603      	mov	r3, r0
 800782c:	4293      	cmp	r3, r2
 800782e:	d100      	bne.n	8007832 <memset+0xa>
 8007830:	4770      	bx	lr
 8007832:	f803 1b01 	strb.w	r1, [r3], #1
 8007836:	e7f9      	b.n	800782c <memset+0x4>

08007838 <sniprintf>:
 8007838:	b40c      	push	{r2, r3}
 800783a:	b530      	push	{r4, r5, lr}
 800783c:	4b17      	ldr	r3, [pc, #92]	; (800789c <sniprintf+0x64>)
 800783e:	1e0c      	subs	r4, r1, #0
 8007840:	681d      	ldr	r5, [r3, #0]
 8007842:	b09d      	sub	sp, #116	; 0x74
 8007844:	da08      	bge.n	8007858 <sniprintf+0x20>
 8007846:	238b      	movs	r3, #139	; 0x8b
 8007848:	602b      	str	r3, [r5, #0]
 800784a:	f04f 30ff 	mov.w	r0, #4294967295
 800784e:	b01d      	add	sp, #116	; 0x74
 8007850:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007854:	b002      	add	sp, #8
 8007856:	4770      	bx	lr
 8007858:	f44f 7302 	mov.w	r3, #520	; 0x208
 800785c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007860:	bf14      	ite	ne
 8007862:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007866:	4623      	moveq	r3, r4
 8007868:	9304      	str	r3, [sp, #16]
 800786a:	9307      	str	r3, [sp, #28]
 800786c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007870:	9002      	str	r0, [sp, #8]
 8007872:	9006      	str	r0, [sp, #24]
 8007874:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007878:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800787a:	ab21      	add	r3, sp, #132	; 0x84
 800787c:	a902      	add	r1, sp, #8
 800787e:	4628      	mov	r0, r5
 8007880:	9301      	str	r3, [sp, #4]
 8007882:	f000 f869 	bl	8007958 <_svfiprintf_r>
 8007886:	1c43      	adds	r3, r0, #1
 8007888:	bfbc      	itt	lt
 800788a:	238b      	movlt	r3, #139	; 0x8b
 800788c:	602b      	strlt	r3, [r5, #0]
 800788e:	2c00      	cmp	r4, #0
 8007890:	d0dd      	beq.n	800784e <sniprintf+0x16>
 8007892:	9b02      	ldr	r3, [sp, #8]
 8007894:	2200      	movs	r2, #0
 8007896:	701a      	strb	r2, [r3, #0]
 8007898:	e7d9      	b.n	800784e <sniprintf+0x16>
 800789a:	bf00      	nop
 800789c:	20000024 	.word	0x20000024

080078a0 <__ssputs_r>:
 80078a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a4:	688e      	ldr	r6, [r1, #8]
 80078a6:	429e      	cmp	r6, r3
 80078a8:	4682      	mov	sl, r0
 80078aa:	460c      	mov	r4, r1
 80078ac:	4690      	mov	r8, r2
 80078ae:	461f      	mov	r7, r3
 80078b0:	d838      	bhi.n	8007924 <__ssputs_r+0x84>
 80078b2:	898a      	ldrh	r2, [r1, #12]
 80078b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078b8:	d032      	beq.n	8007920 <__ssputs_r+0x80>
 80078ba:	6825      	ldr	r5, [r4, #0]
 80078bc:	6909      	ldr	r1, [r1, #16]
 80078be:	eba5 0901 	sub.w	r9, r5, r1
 80078c2:	6965      	ldr	r5, [r4, #20]
 80078c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078cc:	3301      	adds	r3, #1
 80078ce:	444b      	add	r3, r9
 80078d0:	106d      	asrs	r5, r5, #1
 80078d2:	429d      	cmp	r5, r3
 80078d4:	bf38      	it	cc
 80078d6:	461d      	movcc	r5, r3
 80078d8:	0553      	lsls	r3, r2, #21
 80078da:	d531      	bpl.n	8007940 <__ssputs_r+0xa0>
 80078dc:	4629      	mov	r1, r5
 80078de:	f000 fb63 	bl	8007fa8 <_malloc_r>
 80078e2:	4606      	mov	r6, r0
 80078e4:	b950      	cbnz	r0, 80078fc <__ssputs_r+0x5c>
 80078e6:	230c      	movs	r3, #12
 80078e8:	f8ca 3000 	str.w	r3, [sl]
 80078ec:	89a3      	ldrh	r3, [r4, #12]
 80078ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078f2:	81a3      	strh	r3, [r4, #12]
 80078f4:	f04f 30ff 	mov.w	r0, #4294967295
 80078f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078fc:	6921      	ldr	r1, [r4, #16]
 80078fe:	464a      	mov	r2, r9
 8007900:	f000 fabe 	bl	8007e80 <memcpy>
 8007904:	89a3      	ldrh	r3, [r4, #12]
 8007906:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800790a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800790e:	81a3      	strh	r3, [r4, #12]
 8007910:	6126      	str	r6, [r4, #16]
 8007912:	6165      	str	r5, [r4, #20]
 8007914:	444e      	add	r6, r9
 8007916:	eba5 0509 	sub.w	r5, r5, r9
 800791a:	6026      	str	r6, [r4, #0]
 800791c:	60a5      	str	r5, [r4, #8]
 800791e:	463e      	mov	r6, r7
 8007920:	42be      	cmp	r6, r7
 8007922:	d900      	bls.n	8007926 <__ssputs_r+0x86>
 8007924:	463e      	mov	r6, r7
 8007926:	6820      	ldr	r0, [r4, #0]
 8007928:	4632      	mov	r2, r6
 800792a:	4641      	mov	r1, r8
 800792c:	f000 fab6 	bl	8007e9c <memmove>
 8007930:	68a3      	ldr	r3, [r4, #8]
 8007932:	1b9b      	subs	r3, r3, r6
 8007934:	60a3      	str	r3, [r4, #8]
 8007936:	6823      	ldr	r3, [r4, #0]
 8007938:	4433      	add	r3, r6
 800793a:	6023      	str	r3, [r4, #0]
 800793c:	2000      	movs	r0, #0
 800793e:	e7db      	b.n	80078f8 <__ssputs_r+0x58>
 8007940:	462a      	mov	r2, r5
 8007942:	f000 fba5 	bl	8008090 <_realloc_r>
 8007946:	4606      	mov	r6, r0
 8007948:	2800      	cmp	r0, #0
 800794a:	d1e1      	bne.n	8007910 <__ssputs_r+0x70>
 800794c:	6921      	ldr	r1, [r4, #16]
 800794e:	4650      	mov	r0, sl
 8007950:	f000 fabe 	bl	8007ed0 <_free_r>
 8007954:	e7c7      	b.n	80078e6 <__ssputs_r+0x46>
	...

08007958 <_svfiprintf_r>:
 8007958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795c:	4698      	mov	r8, r3
 800795e:	898b      	ldrh	r3, [r1, #12]
 8007960:	061b      	lsls	r3, r3, #24
 8007962:	b09d      	sub	sp, #116	; 0x74
 8007964:	4607      	mov	r7, r0
 8007966:	460d      	mov	r5, r1
 8007968:	4614      	mov	r4, r2
 800796a:	d50e      	bpl.n	800798a <_svfiprintf_r+0x32>
 800796c:	690b      	ldr	r3, [r1, #16]
 800796e:	b963      	cbnz	r3, 800798a <_svfiprintf_r+0x32>
 8007970:	2140      	movs	r1, #64	; 0x40
 8007972:	f000 fb19 	bl	8007fa8 <_malloc_r>
 8007976:	6028      	str	r0, [r5, #0]
 8007978:	6128      	str	r0, [r5, #16]
 800797a:	b920      	cbnz	r0, 8007986 <_svfiprintf_r+0x2e>
 800797c:	230c      	movs	r3, #12
 800797e:	603b      	str	r3, [r7, #0]
 8007980:	f04f 30ff 	mov.w	r0, #4294967295
 8007984:	e0d1      	b.n	8007b2a <_svfiprintf_r+0x1d2>
 8007986:	2340      	movs	r3, #64	; 0x40
 8007988:	616b      	str	r3, [r5, #20]
 800798a:	2300      	movs	r3, #0
 800798c:	9309      	str	r3, [sp, #36]	; 0x24
 800798e:	2320      	movs	r3, #32
 8007990:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007994:	f8cd 800c 	str.w	r8, [sp, #12]
 8007998:	2330      	movs	r3, #48	; 0x30
 800799a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007b44 <_svfiprintf_r+0x1ec>
 800799e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079a2:	f04f 0901 	mov.w	r9, #1
 80079a6:	4623      	mov	r3, r4
 80079a8:	469a      	mov	sl, r3
 80079aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079ae:	b10a      	cbz	r2, 80079b4 <_svfiprintf_r+0x5c>
 80079b0:	2a25      	cmp	r2, #37	; 0x25
 80079b2:	d1f9      	bne.n	80079a8 <_svfiprintf_r+0x50>
 80079b4:	ebba 0b04 	subs.w	fp, sl, r4
 80079b8:	d00b      	beq.n	80079d2 <_svfiprintf_r+0x7a>
 80079ba:	465b      	mov	r3, fp
 80079bc:	4622      	mov	r2, r4
 80079be:	4629      	mov	r1, r5
 80079c0:	4638      	mov	r0, r7
 80079c2:	f7ff ff6d 	bl	80078a0 <__ssputs_r>
 80079c6:	3001      	adds	r0, #1
 80079c8:	f000 80aa 	beq.w	8007b20 <_svfiprintf_r+0x1c8>
 80079cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079ce:	445a      	add	r2, fp
 80079d0:	9209      	str	r2, [sp, #36]	; 0x24
 80079d2:	f89a 3000 	ldrb.w	r3, [sl]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 80a2 	beq.w	8007b20 <_svfiprintf_r+0x1c8>
 80079dc:	2300      	movs	r3, #0
 80079de:	f04f 32ff 	mov.w	r2, #4294967295
 80079e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079e6:	f10a 0a01 	add.w	sl, sl, #1
 80079ea:	9304      	str	r3, [sp, #16]
 80079ec:	9307      	str	r3, [sp, #28]
 80079ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079f2:	931a      	str	r3, [sp, #104]	; 0x68
 80079f4:	4654      	mov	r4, sl
 80079f6:	2205      	movs	r2, #5
 80079f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079fc:	4851      	ldr	r0, [pc, #324]	; (8007b44 <_svfiprintf_r+0x1ec>)
 80079fe:	f7f8 fbe7 	bl	80001d0 <memchr>
 8007a02:	9a04      	ldr	r2, [sp, #16]
 8007a04:	b9d8      	cbnz	r0, 8007a3e <_svfiprintf_r+0xe6>
 8007a06:	06d0      	lsls	r0, r2, #27
 8007a08:	bf44      	itt	mi
 8007a0a:	2320      	movmi	r3, #32
 8007a0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a10:	0711      	lsls	r1, r2, #28
 8007a12:	bf44      	itt	mi
 8007a14:	232b      	movmi	r3, #43	; 0x2b
 8007a16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a1e:	2b2a      	cmp	r3, #42	; 0x2a
 8007a20:	d015      	beq.n	8007a4e <_svfiprintf_r+0xf6>
 8007a22:	9a07      	ldr	r2, [sp, #28]
 8007a24:	4654      	mov	r4, sl
 8007a26:	2000      	movs	r0, #0
 8007a28:	f04f 0c0a 	mov.w	ip, #10
 8007a2c:	4621      	mov	r1, r4
 8007a2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a32:	3b30      	subs	r3, #48	; 0x30
 8007a34:	2b09      	cmp	r3, #9
 8007a36:	d94e      	bls.n	8007ad6 <_svfiprintf_r+0x17e>
 8007a38:	b1b0      	cbz	r0, 8007a68 <_svfiprintf_r+0x110>
 8007a3a:	9207      	str	r2, [sp, #28]
 8007a3c:	e014      	b.n	8007a68 <_svfiprintf_r+0x110>
 8007a3e:	eba0 0308 	sub.w	r3, r0, r8
 8007a42:	fa09 f303 	lsl.w	r3, r9, r3
 8007a46:	4313      	orrs	r3, r2
 8007a48:	9304      	str	r3, [sp, #16]
 8007a4a:	46a2      	mov	sl, r4
 8007a4c:	e7d2      	b.n	80079f4 <_svfiprintf_r+0x9c>
 8007a4e:	9b03      	ldr	r3, [sp, #12]
 8007a50:	1d19      	adds	r1, r3, #4
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	9103      	str	r1, [sp, #12]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	bfbb      	ittet	lt
 8007a5a:	425b      	neglt	r3, r3
 8007a5c:	f042 0202 	orrlt.w	r2, r2, #2
 8007a60:	9307      	strge	r3, [sp, #28]
 8007a62:	9307      	strlt	r3, [sp, #28]
 8007a64:	bfb8      	it	lt
 8007a66:	9204      	strlt	r2, [sp, #16]
 8007a68:	7823      	ldrb	r3, [r4, #0]
 8007a6a:	2b2e      	cmp	r3, #46	; 0x2e
 8007a6c:	d10c      	bne.n	8007a88 <_svfiprintf_r+0x130>
 8007a6e:	7863      	ldrb	r3, [r4, #1]
 8007a70:	2b2a      	cmp	r3, #42	; 0x2a
 8007a72:	d135      	bne.n	8007ae0 <_svfiprintf_r+0x188>
 8007a74:	9b03      	ldr	r3, [sp, #12]
 8007a76:	1d1a      	adds	r2, r3, #4
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	9203      	str	r2, [sp, #12]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	bfb8      	it	lt
 8007a80:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a84:	3402      	adds	r4, #2
 8007a86:	9305      	str	r3, [sp, #20]
 8007a88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b54 <_svfiprintf_r+0x1fc>
 8007a8c:	7821      	ldrb	r1, [r4, #0]
 8007a8e:	2203      	movs	r2, #3
 8007a90:	4650      	mov	r0, sl
 8007a92:	f7f8 fb9d 	bl	80001d0 <memchr>
 8007a96:	b140      	cbz	r0, 8007aaa <_svfiprintf_r+0x152>
 8007a98:	2340      	movs	r3, #64	; 0x40
 8007a9a:	eba0 000a 	sub.w	r0, r0, sl
 8007a9e:	fa03 f000 	lsl.w	r0, r3, r0
 8007aa2:	9b04      	ldr	r3, [sp, #16]
 8007aa4:	4303      	orrs	r3, r0
 8007aa6:	3401      	adds	r4, #1
 8007aa8:	9304      	str	r3, [sp, #16]
 8007aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aae:	4826      	ldr	r0, [pc, #152]	; (8007b48 <_svfiprintf_r+0x1f0>)
 8007ab0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ab4:	2206      	movs	r2, #6
 8007ab6:	f7f8 fb8b 	bl	80001d0 <memchr>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	d038      	beq.n	8007b30 <_svfiprintf_r+0x1d8>
 8007abe:	4b23      	ldr	r3, [pc, #140]	; (8007b4c <_svfiprintf_r+0x1f4>)
 8007ac0:	bb1b      	cbnz	r3, 8007b0a <_svfiprintf_r+0x1b2>
 8007ac2:	9b03      	ldr	r3, [sp, #12]
 8007ac4:	3307      	adds	r3, #7
 8007ac6:	f023 0307 	bic.w	r3, r3, #7
 8007aca:	3308      	adds	r3, #8
 8007acc:	9303      	str	r3, [sp, #12]
 8007ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ad0:	4433      	add	r3, r6
 8007ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ad4:	e767      	b.n	80079a6 <_svfiprintf_r+0x4e>
 8007ad6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ada:	460c      	mov	r4, r1
 8007adc:	2001      	movs	r0, #1
 8007ade:	e7a5      	b.n	8007a2c <_svfiprintf_r+0xd4>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	3401      	adds	r4, #1
 8007ae4:	9305      	str	r3, [sp, #20]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	f04f 0c0a 	mov.w	ip, #10
 8007aec:	4620      	mov	r0, r4
 8007aee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007af2:	3a30      	subs	r2, #48	; 0x30
 8007af4:	2a09      	cmp	r2, #9
 8007af6:	d903      	bls.n	8007b00 <_svfiprintf_r+0x1a8>
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d0c5      	beq.n	8007a88 <_svfiprintf_r+0x130>
 8007afc:	9105      	str	r1, [sp, #20]
 8007afe:	e7c3      	b.n	8007a88 <_svfiprintf_r+0x130>
 8007b00:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b04:	4604      	mov	r4, r0
 8007b06:	2301      	movs	r3, #1
 8007b08:	e7f0      	b.n	8007aec <_svfiprintf_r+0x194>
 8007b0a:	ab03      	add	r3, sp, #12
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	462a      	mov	r2, r5
 8007b10:	4b0f      	ldr	r3, [pc, #60]	; (8007b50 <_svfiprintf_r+0x1f8>)
 8007b12:	a904      	add	r1, sp, #16
 8007b14:	4638      	mov	r0, r7
 8007b16:	f3af 8000 	nop.w
 8007b1a:	1c42      	adds	r2, r0, #1
 8007b1c:	4606      	mov	r6, r0
 8007b1e:	d1d6      	bne.n	8007ace <_svfiprintf_r+0x176>
 8007b20:	89ab      	ldrh	r3, [r5, #12]
 8007b22:	065b      	lsls	r3, r3, #25
 8007b24:	f53f af2c 	bmi.w	8007980 <_svfiprintf_r+0x28>
 8007b28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b2a:	b01d      	add	sp, #116	; 0x74
 8007b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b30:	ab03      	add	r3, sp, #12
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	462a      	mov	r2, r5
 8007b36:	4b06      	ldr	r3, [pc, #24]	; (8007b50 <_svfiprintf_r+0x1f8>)
 8007b38:	a904      	add	r1, sp, #16
 8007b3a:	4638      	mov	r0, r7
 8007b3c:	f000 f87a 	bl	8007c34 <_printf_i>
 8007b40:	e7eb      	b.n	8007b1a <_svfiprintf_r+0x1c2>
 8007b42:	bf00      	nop
 8007b44:	080086f8 	.word	0x080086f8
 8007b48:	08008702 	.word	0x08008702
 8007b4c:	00000000 	.word	0x00000000
 8007b50:	080078a1 	.word	0x080078a1
 8007b54:	080086fe 	.word	0x080086fe

08007b58 <_printf_common>:
 8007b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b5c:	4616      	mov	r6, r2
 8007b5e:	4699      	mov	r9, r3
 8007b60:	688a      	ldr	r2, [r1, #8]
 8007b62:	690b      	ldr	r3, [r1, #16]
 8007b64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	bfb8      	it	lt
 8007b6c:	4613      	movlt	r3, r2
 8007b6e:	6033      	str	r3, [r6, #0]
 8007b70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b74:	4607      	mov	r7, r0
 8007b76:	460c      	mov	r4, r1
 8007b78:	b10a      	cbz	r2, 8007b7e <_printf_common+0x26>
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	6033      	str	r3, [r6, #0]
 8007b7e:	6823      	ldr	r3, [r4, #0]
 8007b80:	0699      	lsls	r1, r3, #26
 8007b82:	bf42      	ittt	mi
 8007b84:	6833      	ldrmi	r3, [r6, #0]
 8007b86:	3302      	addmi	r3, #2
 8007b88:	6033      	strmi	r3, [r6, #0]
 8007b8a:	6825      	ldr	r5, [r4, #0]
 8007b8c:	f015 0506 	ands.w	r5, r5, #6
 8007b90:	d106      	bne.n	8007ba0 <_printf_common+0x48>
 8007b92:	f104 0a19 	add.w	sl, r4, #25
 8007b96:	68e3      	ldr	r3, [r4, #12]
 8007b98:	6832      	ldr	r2, [r6, #0]
 8007b9a:	1a9b      	subs	r3, r3, r2
 8007b9c:	42ab      	cmp	r3, r5
 8007b9e:	dc26      	bgt.n	8007bee <_printf_common+0x96>
 8007ba0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ba4:	1e13      	subs	r3, r2, #0
 8007ba6:	6822      	ldr	r2, [r4, #0]
 8007ba8:	bf18      	it	ne
 8007baa:	2301      	movne	r3, #1
 8007bac:	0692      	lsls	r2, r2, #26
 8007bae:	d42b      	bmi.n	8007c08 <_printf_common+0xb0>
 8007bb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bb4:	4649      	mov	r1, r9
 8007bb6:	4638      	mov	r0, r7
 8007bb8:	47c0      	blx	r8
 8007bba:	3001      	adds	r0, #1
 8007bbc:	d01e      	beq.n	8007bfc <_printf_common+0xa4>
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	68e5      	ldr	r5, [r4, #12]
 8007bc2:	6832      	ldr	r2, [r6, #0]
 8007bc4:	f003 0306 	and.w	r3, r3, #6
 8007bc8:	2b04      	cmp	r3, #4
 8007bca:	bf08      	it	eq
 8007bcc:	1aad      	subeq	r5, r5, r2
 8007bce:	68a3      	ldr	r3, [r4, #8]
 8007bd0:	6922      	ldr	r2, [r4, #16]
 8007bd2:	bf0c      	ite	eq
 8007bd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bd8:	2500      	movne	r5, #0
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	bfc4      	itt	gt
 8007bde:	1a9b      	subgt	r3, r3, r2
 8007be0:	18ed      	addgt	r5, r5, r3
 8007be2:	2600      	movs	r6, #0
 8007be4:	341a      	adds	r4, #26
 8007be6:	42b5      	cmp	r5, r6
 8007be8:	d11a      	bne.n	8007c20 <_printf_common+0xc8>
 8007bea:	2000      	movs	r0, #0
 8007bec:	e008      	b.n	8007c00 <_printf_common+0xa8>
 8007bee:	2301      	movs	r3, #1
 8007bf0:	4652      	mov	r2, sl
 8007bf2:	4649      	mov	r1, r9
 8007bf4:	4638      	mov	r0, r7
 8007bf6:	47c0      	blx	r8
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	d103      	bne.n	8007c04 <_printf_common+0xac>
 8007bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c04:	3501      	adds	r5, #1
 8007c06:	e7c6      	b.n	8007b96 <_printf_common+0x3e>
 8007c08:	18e1      	adds	r1, r4, r3
 8007c0a:	1c5a      	adds	r2, r3, #1
 8007c0c:	2030      	movs	r0, #48	; 0x30
 8007c0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c12:	4422      	add	r2, r4
 8007c14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c1c:	3302      	adds	r3, #2
 8007c1e:	e7c7      	b.n	8007bb0 <_printf_common+0x58>
 8007c20:	2301      	movs	r3, #1
 8007c22:	4622      	mov	r2, r4
 8007c24:	4649      	mov	r1, r9
 8007c26:	4638      	mov	r0, r7
 8007c28:	47c0      	blx	r8
 8007c2a:	3001      	adds	r0, #1
 8007c2c:	d0e6      	beq.n	8007bfc <_printf_common+0xa4>
 8007c2e:	3601      	adds	r6, #1
 8007c30:	e7d9      	b.n	8007be6 <_printf_common+0x8e>
	...

08007c34 <_printf_i>:
 8007c34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c38:	7e0f      	ldrb	r7, [r1, #24]
 8007c3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c3c:	2f78      	cmp	r7, #120	; 0x78
 8007c3e:	4691      	mov	r9, r2
 8007c40:	4680      	mov	r8, r0
 8007c42:	460c      	mov	r4, r1
 8007c44:	469a      	mov	sl, r3
 8007c46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c4a:	d807      	bhi.n	8007c5c <_printf_i+0x28>
 8007c4c:	2f62      	cmp	r7, #98	; 0x62
 8007c4e:	d80a      	bhi.n	8007c66 <_printf_i+0x32>
 8007c50:	2f00      	cmp	r7, #0
 8007c52:	f000 80d8 	beq.w	8007e06 <_printf_i+0x1d2>
 8007c56:	2f58      	cmp	r7, #88	; 0x58
 8007c58:	f000 80a3 	beq.w	8007da2 <_printf_i+0x16e>
 8007c5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c64:	e03a      	b.n	8007cdc <_printf_i+0xa8>
 8007c66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c6a:	2b15      	cmp	r3, #21
 8007c6c:	d8f6      	bhi.n	8007c5c <_printf_i+0x28>
 8007c6e:	a101      	add	r1, pc, #4	; (adr r1, 8007c74 <_printf_i+0x40>)
 8007c70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c74:	08007ccd 	.word	0x08007ccd
 8007c78:	08007ce1 	.word	0x08007ce1
 8007c7c:	08007c5d 	.word	0x08007c5d
 8007c80:	08007c5d 	.word	0x08007c5d
 8007c84:	08007c5d 	.word	0x08007c5d
 8007c88:	08007c5d 	.word	0x08007c5d
 8007c8c:	08007ce1 	.word	0x08007ce1
 8007c90:	08007c5d 	.word	0x08007c5d
 8007c94:	08007c5d 	.word	0x08007c5d
 8007c98:	08007c5d 	.word	0x08007c5d
 8007c9c:	08007c5d 	.word	0x08007c5d
 8007ca0:	08007ded 	.word	0x08007ded
 8007ca4:	08007d11 	.word	0x08007d11
 8007ca8:	08007dcf 	.word	0x08007dcf
 8007cac:	08007c5d 	.word	0x08007c5d
 8007cb0:	08007c5d 	.word	0x08007c5d
 8007cb4:	08007e0f 	.word	0x08007e0f
 8007cb8:	08007c5d 	.word	0x08007c5d
 8007cbc:	08007d11 	.word	0x08007d11
 8007cc0:	08007c5d 	.word	0x08007c5d
 8007cc4:	08007c5d 	.word	0x08007c5d
 8007cc8:	08007dd7 	.word	0x08007dd7
 8007ccc:	682b      	ldr	r3, [r5, #0]
 8007cce:	1d1a      	adds	r2, r3, #4
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	602a      	str	r2, [r5, #0]
 8007cd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e0a3      	b.n	8007e28 <_printf_i+0x1f4>
 8007ce0:	6820      	ldr	r0, [r4, #0]
 8007ce2:	6829      	ldr	r1, [r5, #0]
 8007ce4:	0606      	lsls	r6, r0, #24
 8007ce6:	f101 0304 	add.w	r3, r1, #4
 8007cea:	d50a      	bpl.n	8007d02 <_printf_i+0xce>
 8007cec:	680e      	ldr	r6, [r1, #0]
 8007cee:	602b      	str	r3, [r5, #0]
 8007cf0:	2e00      	cmp	r6, #0
 8007cf2:	da03      	bge.n	8007cfc <_printf_i+0xc8>
 8007cf4:	232d      	movs	r3, #45	; 0x2d
 8007cf6:	4276      	negs	r6, r6
 8007cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cfc:	485e      	ldr	r0, [pc, #376]	; (8007e78 <_printf_i+0x244>)
 8007cfe:	230a      	movs	r3, #10
 8007d00:	e019      	b.n	8007d36 <_printf_i+0x102>
 8007d02:	680e      	ldr	r6, [r1, #0]
 8007d04:	602b      	str	r3, [r5, #0]
 8007d06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d0a:	bf18      	it	ne
 8007d0c:	b236      	sxthne	r6, r6
 8007d0e:	e7ef      	b.n	8007cf0 <_printf_i+0xbc>
 8007d10:	682b      	ldr	r3, [r5, #0]
 8007d12:	6820      	ldr	r0, [r4, #0]
 8007d14:	1d19      	adds	r1, r3, #4
 8007d16:	6029      	str	r1, [r5, #0]
 8007d18:	0601      	lsls	r1, r0, #24
 8007d1a:	d501      	bpl.n	8007d20 <_printf_i+0xec>
 8007d1c:	681e      	ldr	r6, [r3, #0]
 8007d1e:	e002      	b.n	8007d26 <_printf_i+0xf2>
 8007d20:	0646      	lsls	r6, r0, #25
 8007d22:	d5fb      	bpl.n	8007d1c <_printf_i+0xe8>
 8007d24:	881e      	ldrh	r6, [r3, #0]
 8007d26:	4854      	ldr	r0, [pc, #336]	; (8007e78 <_printf_i+0x244>)
 8007d28:	2f6f      	cmp	r7, #111	; 0x6f
 8007d2a:	bf0c      	ite	eq
 8007d2c:	2308      	moveq	r3, #8
 8007d2e:	230a      	movne	r3, #10
 8007d30:	2100      	movs	r1, #0
 8007d32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d36:	6865      	ldr	r5, [r4, #4]
 8007d38:	60a5      	str	r5, [r4, #8]
 8007d3a:	2d00      	cmp	r5, #0
 8007d3c:	bfa2      	ittt	ge
 8007d3e:	6821      	ldrge	r1, [r4, #0]
 8007d40:	f021 0104 	bicge.w	r1, r1, #4
 8007d44:	6021      	strge	r1, [r4, #0]
 8007d46:	b90e      	cbnz	r6, 8007d4c <_printf_i+0x118>
 8007d48:	2d00      	cmp	r5, #0
 8007d4a:	d04d      	beq.n	8007de8 <_printf_i+0x1b4>
 8007d4c:	4615      	mov	r5, r2
 8007d4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d52:	fb03 6711 	mls	r7, r3, r1, r6
 8007d56:	5dc7      	ldrb	r7, [r0, r7]
 8007d58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d5c:	4637      	mov	r7, r6
 8007d5e:	42bb      	cmp	r3, r7
 8007d60:	460e      	mov	r6, r1
 8007d62:	d9f4      	bls.n	8007d4e <_printf_i+0x11a>
 8007d64:	2b08      	cmp	r3, #8
 8007d66:	d10b      	bne.n	8007d80 <_printf_i+0x14c>
 8007d68:	6823      	ldr	r3, [r4, #0]
 8007d6a:	07de      	lsls	r6, r3, #31
 8007d6c:	d508      	bpl.n	8007d80 <_printf_i+0x14c>
 8007d6e:	6923      	ldr	r3, [r4, #16]
 8007d70:	6861      	ldr	r1, [r4, #4]
 8007d72:	4299      	cmp	r1, r3
 8007d74:	bfde      	ittt	le
 8007d76:	2330      	movle	r3, #48	; 0x30
 8007d78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d80:	1b52      	subs	r2, r2, r5
 8007d82:	6122      	str	r2, [r4, #16]
 8007d84:	f8cd a000 	str.w	sl, [sp]
 8007d88:	464b      	mov	r3, r9
 8007d8a:	aa03      	add	r2, sp, #12
 8007d8c:	4621      	mov	r1, r4
 8007d8e:	4640      	mov	r0, r8
 8007d90:	f7ff fee2 	bl	8007b58 <_printf_common>
 8007d94:	3001      	adds	r0, #1
 8007d96:	d14c      	bne.n	8007e32 <_printf_i+0x1fe>
 8007d98:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9c:	b004      	add	sp, #16
 8007d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007da2:	4835      	ldr	r0, [pc, #212]	; (8007e78 <_printf_i+0x244>)
 8007da4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007da8:	6829      	ldr	r1, [r5, #0]
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	f851 6b04 	ldr.w	r6, [r1], #4
 8007db0:	6029      	str	r1, [r5, #0]
 8007db2:	061d      	lsls	r5, r3, #24
 8007db4:	d514      	bpl.n	8007de0 <_printf_i+0x1ac>
 8007db6:	07df      	lsls	r7, r3, #31
 8007db8:	bf44      	itt	mi
 8007dba:	f043 0320 	orrmi.w	r3, r3, #32
 8007dbe:	6023      	strmi	r3, [r4, #0]
 8007dc0:	b91e      	cbnz	r6, 8007dca <_printf_i+0x196>
 8007dc2:	6823      	ldr	r3, [r4, #0]
 8007dc4:	f023 0320 	bic.w	r3, r3, #32
 8007dc8:	6023      	str	r3, [r4, #0]
 8007dca:	2310      	movs	r3, #16
 8007dcc:	e7b0      	b.n	8007d30 <_printf_i+0xfc>
 8007dce:	6823      	ldr	r3, [r4, #0]
 8007dd0:	f043 0320 	orr.w	r3, r3, #32
 8007dd4:	6023      	str	r3, [r4, #0]
 8007dd6:	2378      	movs	r3, #120	; 0x78
 8007dd8:	4828      	ldr	r0, [pc, #160]	; (8007e7c <_printf_i+0x248>)
 8007dda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007dde:	e7e3      	b.n	8007da8 <_printf_i+0x174>
 8007de0:	0659      	lsls	r1, r3, #25
 8007de2:	bf48      	it	mi
 8007de4:	b2b6      	uxthmi	r6, r6
 8007de6:	e7e6      	b.n	8007db6 <_printf_i+0x182>
 8007de8:	4615      	mov	r5, r2
 8007dea:	e7bb      	b.n	8007d64 <_printf_i+0x130>
 8007dec:	682b      	ldr	r3, [r5, #0]
 8007dee:	6826      	ldr	r6, [r4, #0]
 8007df0:	6961      	ldr	r1, [r4, #20]
 8007df2:	1d18      	adds	r0, r3, #4
 8007df4:	6028      	str	r0, [r5, #0]
 8007df6:	0635      	lsls	r5, r6, #24
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	d501      	bpl.n	8007e00 <_printf_i+0x1cc>
 8007dfc:	6019      	str	r1, [r3, #0]
 8007dfe:	e002      	b.n	8007e06 <_printf_i+0x1d2>
 8007e00:	0670      	lsls	r0, r6, #25
 8007e02:	d5fb      	bpl.n	8007dfc <_printf_i+0x1c8>
 8007e04:	8019      	strh	r1, [r3, #0]
 8007e06:	2300      	movs	r3, #0
 8007e08:	6123      	str	r3, [r4, #16]
 8007e0a:	4615      	mov	r5, r2
 8007e0c:	e7ba      	b.n	8007d84 <_printf_i+0x150>
 8007e0e:	682b      	ldr	r3, [r5, #0]
 8007e10:	1d1a      	adds	r2, r3, #4
 8007e12:	602a      	str	r2, [r5, #0]
 8007e14:	681d      	ldr	r5, [r3, #0]
 8007e16:	6862      	ldr	r2, [r4, #4]
 8007e18:	2100      	movs	r1, #0
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	f7f8 f9d8 	bl	80001d0 <memchr>
 8007e20:	b108      	cbz	r0, 8007e26 <_printf_i+0x1f2>
 8007e22:	1b40      	subs	r0, r0, r5
 8007e24:	6060      	str	r0, [r4, #4]
 8007e26:	6863      	ldr	r3, [r4, #4]
 8007e28:	6123      	str	r3, [r4, #16]
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e30:	e7a8      	b.n	8007d84 <_printf_i+0x150>
 8007e32:	6923      	ldr	r3, [r4, #16]
 8007e34:	462a      	mov	r2, r5
 8007e36:	4649      	mov	r1, r9
 8007e38:	4640      	mov	r0, r8
 8007e3a:	47d0      	blx	sl
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	d0ab      	beq.n	8007d98 <_printf_i+0x164>
 8007e40:	6823      	ldr	r3, [r4, #0]
 8007e42:	079b      	lsls	r3, r3, #30
 8007e44:	d413      	bmi.n	8007e6e <_printf_i+0x23a>
 8007e46:	68e0      	ldr	r0, [r4, #12]
 8007e48:	9b03      	ldr	r3, [sp, #12]
 8007e4a:	4298      	cmp	r0, r3
 8007e4c:	bfb8      	it	lt
 8007e4e:	4618      	movlt	r0, r3
 8007e50:	e7a4      	b.n	8007d9c <_printf_i+0x168>
 8007e52:	2301      	movs	r3, #1
 8007e54:	4632      	mov	r2, r6
 8007e56:	4649      	mov	r1, r9
 8007e58:	4640      	mov	r0, r8
 8007e5a:	47d0      	blx	sl
 8007e5c:	3001      	adds	r0, #1
 8007e5e:	d09b      	beq.n	8007d98 <_printf_i+0x164>
 8007e60:	3501      	adds	r5, #1
 8007e62:	68e3      	ldr	r3, [r4, #12]
 8007e64:	9903      	ldr	r1, [sp, #12]
 8007e66:	1a5b      	subs	r3, r3, r1
 8007e68:	42ab      	cmp	r3, r5
 8007e6a:	dcf2      	bgt.n	8007e52 <_printf_i+0x21e>
 8007e6c:	e7eb      	b.n	8007e46 <_printf_i+0x212>
 8007e6e:	2500      	movs	r5, #0
 8007e70:	f104 0619 	add.w	r6, r4, #25
 8007e74:	e7f5      	b.n	8007e62 <_printf_i+0x22e>
 8007e76:	bf00      	nop
 8007e78:	08008709 	.word	0x08008709
 8007e7c:	0800871a 	.word	0x0800871a

08007e80 <memcpy>:
 8007e80:	440a      	add	r2, r1
 8007e82:	4291      	cmp	r1, r2
 8007e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e88:	d100      	bne.n	8007e8c <memcpy+0xc>
 8007e8a:	4770      	bx	lr
 8007e8c:	b510      	push	{r4, lr}
 8007e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e96:	4291      	cmp	r1, r2
 8007e98:	d1f9      	bne.n	8007e8e <memcpy+0xe>
 8007e9a:	bd10      	pop	{r4, pc}

08007e9c <memmove>:
 8007e9c:	4288      	cmp	r0, r1
 8007e9e:	b510      	push	{r4, lr}
 8007ea0:	eb01 0402 	add.w	r4, r1, r2
 8007ea4:	d902      	bls.n	8007eac <memmove+0x10>
 8007ea6:	4284      	cmp	r4, r0
 8007ea8:	4623      	mov	r3, r4
 8007eaa:	d807      	bhi.n	8007ebc <memmove+0x20>
 8007eac:	1e43      	subs	r3, r0, #1
 8007eae:	42a1      	cmp	r1, r4
 8007eb0:	d008      	beq.n	8007ec4 <memmove+0x28>
 8007eb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007eb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007eba:	e7f8      	b.n	8007eae <memmove+0x12>
 8007ebc:	4402      	add	r2, r0
 8007ebe:	4601      	mov	r1, r0
 8007ec0:	428a      	cmp	r2, r1
 8007ec2:	d100      	bne.n	8007ec6 <memmove+0x2a>
 8007ec4:	bd10      	pop	{r4, pc}
 8007ec6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007eca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ece:	e7f7      	b.n	8007ec0 <memmove+0x24>

08007ed0 <_free_r>:
 8007ed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ed2:	2900      	cmp	r1, #0
 8007ed4:	d044      	beq.n	8007f60 <_free_r+0x90>
 8007ed6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007eda:	9001      	str	r0, [sp, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f1a1 0404 	sub.w	r4, r1, #4
 8007ee2:	bfb8      	it	lt
 8007ee4:	18e4      	addlt	r4, r4, r3
 8007ee6:	f000 f913 	bl	8008110 <__malloc_lock>
 8007eea:	4a1e      	ldr	r2, [pc, #120]	; (8007f64 <_free_r+0x94>)
 8007eec:	9801      	ldr	r0, [sp, #4]
 8007eee:	6813      	ldr	r3, [r2, #0]
 8007ef0:	b933      	cbnz	r3, 8007f00 <_free_r+0x30>
 8007ef2:	6063      	str	r3, [r4, #4]
 8007ef4:	6014      	str	r4, [r2, #0]
 8007ef6:	b003      	add	sp, #12
 8007ef8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007efc:	f000 b90e 	b.w	800811c <__malloc_unlock>
 8007f00:	42a3      	cmp	r3, r4
 8007f02:	d908      	bls.n	8007f16 <_free_r+0x46>
 8007f04:	6825      	ldr	r5, [r4, #0]
 8007f06:	1961      	adds	r1, r4, r5
 8007f08:	428b      	cmp	r3, r1
 8007f0a:	bf01      	itttt	eq
 8007f0c:	6819      	ldreq	r1, [r3, #0]
 8007f0e:	685b      	ldreq	r3, [r3, #4]
 8007f10:	1949      	addeq	r1, r1, r5
 8007f12:	6021      	streq	r1, [r4, #0]
 8007f14:	e7ed      	b.n	8007ef2 <_free_r+0x22>
 8007f16:	461a      	mov	r2, r3
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	b10b      	cbz	r3, 8007f20 <_free_r+0x50>
 8007f1c:	42a3      	cmp	r3, r4
 8007f1e:	d9fa      	bls.n	8007f16 <_free_r+0x46>
 8007f20:	6811      	ldr	r1, [r2, #0]
 8007f22:	1855      	adds	r5, r2, r1
 8007f24:	42a5      	cmp	r5, r4
 8007f26:	d10b      	bne.n	8007f40 <_free_r+0x70>
 8007f28:	6824      	ldr	r4, [r4, #0]
 8007f2a:	4421      	add	r1, r4
 8007f2c:	1854      	adds	r4, r2, r1
 8007f2e:	42a3      	cmp	r3, r4
 8007f30:	6011      	str	r1, [r2, #0]
 8007f32:	d1e0      	bne.n	8007ef6 <_free_r+0x26>
 8007f34:	681c      	ldr	r4, [r3, #0]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	6053      	str	r3, [r2, #4]
 8007f3a:	4421      	add	r1, r4
 8007f3c:	6011      	str	r1, [r2, #0]
 8007f3e:	e7da      	b.n	8007ef6 <_free_r+0x26>
 8007f40:	d902      	bls.n	8007f48 <_free_r+0x78>
 8007f42:	230c      	movs	r3, #12
 8007f44:	6003      	str	r3, [r0, #0]
 8007f46:	e7d6      	b.n	8007ef6 <_free_r+0x26>
 8007f48:	6825      	ldr	r5, [r4, #0]
 8007f4a:	1961      	adds	r1, r4, r5
 8007f4c:	428b      	cmp	r3, r1
 8007f4e:	bf04      	itt	eq
 8007f50:	6819      	ldreq	r1, [r3, #0]
 8007f52:	685b      	ldreq	r3, [r3, #4]
 8007f54:	6063      	str	r3, [r4, #4]
 8007f56:	bf04      	itt	eq
 8007f58:	1949      	addeq	r1, r1, r5
 8007f5a:	6021      	streq	r1, [r4, #0]
 8007f5c:	6054      	str	r4, [r2, #4]
 8007f5e:	e7ca      	b.n	8007ef6 <_free_r+0x26>
 8007f60:	b003      	add	sp, #12
 8007f62:	bd30      	pop	{r4, r5, pc}
 8007f64:	20001460 	.word	0x20001460

08007f68 <sbrk_aligned>:
 8007f68:	b570      	push	{r4, r5, r6, lr}
 8007f6a:	4e0e      	ldr	r6, [pc, #56]	; (8007fa4 <sbrk_aligned+0x3c>)
 8007f6c:	460c      	mov	r4, r1
 8007f6e:	6831      	ldr	r1, [r6, #0]
 8007f70:	4605      	mov	r5, r0
 8007f72:	b911      	cbnz	r1, 8007f7a <sbrk_aligned+0x12>
 8007f74:	f000 f8bc 	bl	80080f0 <_sbrk_r>
 8007f78:	6030      	str	r0, [r6, #0]
 8007f7a:	4621      	mov	r1, r4
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	f000 f8b7 	bl	80080f0 <_sbrk_r>
 8007f82:	1c43      	adds	r3, r0, #1
 8007f84:	d00a      	beq.n	8007f9c <sbrk_aligned+0x34>
 8007f86:	1cc4      	adds	r4, r0, #3
 8007f88:	f024 0403 	bic.w	r4, r4, #3
 8007f8c:	42a0      	cmp	r0, r4
 8007f8e:	d007      	beq.n	8007fa0 <sbrk_aligned+0x38>
 8007f90:	1a21      	subs	r1, r4, r0
 8007f92:	4628      	mov	r0, r5
 8007f94:	f000 f8ac 	bl	80080f0 <_sbrk_r>
 8007f98:	3001      	adds	r0, #1
 8007f9a:	d101      	bne.n	8007fa0 <sbrk_aligned+0x38>
 8007f9c:	f04f 34ff 	mov.w	r4, #4294967295
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	bd70      	pop	{r4, r5, r6, pc}
 8007fa4:	20001464 	.word	0x20001464

08007fa8 <_malloc_r>:
 8007fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fac:	1ccd      	adds	r5, r1, #3
 8007fae:	f025 0503 	bic.w	r5, r5, #3
 8007fb2:	3508      	adds	r5, #8
 8007fb4:	2d0c      	cmp	r5, #12
 8007fb6:	bf38      	it	cc
 8007fb8:	250c      	movcc	r5, #12
 8007fba:	2d00      	cmp	r5, #0
 8007fbc:	4607      	mov	r7, r0
 8007fbe:	db01      	blt.n	8007fc4 <_malloc_r+0x1c>
 8007fc0:	42a9      	cmp	r1, r5
 8007fc2:	d905      	bls.n	8007fd0 <_malloc_r+0x28>
 8007fc4:	230c      	movs	r3, #12
 8007fc6:	603b      	str	r3, [r7, #0]
 8007fc8:	2600      	movs	r6, #0
 8007fca:	4630      	mov	r0, r6
 8007fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fd0:	4e2e      	ldr	r6, [pc, #184]	; (800808c <_malloc_r+0xe4>)
 8007fd2:	f000 f89d 	bl	8008110 <__malloc_lock>
 8007fd6:	6833      	ldr	r3, [r6, #0]
 8007fd8:	461c      	mov	r4, r3
 8007fda:	bb34      	cbnz	r4, 800802a <_malloc_r+0x82>
 8007fdc:	4629      	mov	r1, r5
 8007fde:	4638      	mov	r0, r7
 8007fe0:	f7ff ffc2 	bl	8007f68 <sbrk_aligned>
 8007fe4:	1c43      	adds	r3, r0, #1
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	d14d      	bne.n	8008086 <_malloc_r+0xde>
 8007fea:	6834      	ldr	r4, [r6, #0]
 8007fec:	4626      	mov	r6, r4
 8007fee:	2e00      	cmp	r6, #0
 8007ff0:	d140      	bne.n	8008074 <_malloc_r+0xcc>
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	4631      	mov	r1, r6
 8007ff6:	4638      	mov	r0, r7
 8007ff8:	eb04 0803 	add.w	r8, r4, r3
 8007ffc:	f000 f878 	bl	80080f0 <_sbrk_r>
 8008000:	4580      	cmp	r8, r0
 8008002:	d13a      	bne.n	800807a <_malloc_r+0xd2>
 8008004:	6821      	ldr	r1, [r4, #0]
 8008006:	3503      	adds	r5, #3
 8008008:	1a6d      	subs	r5, r5, r1
 800800a:	f025 0503 	bic.w	r5, r5, #3
 800800e:	3508      	adds	r5, #8
 8008010:	2d0c      	cmp	r5, #12
 8008012:	bf38      	it	cc
 8008014:	250c      	movcc	r5, #12
 8008016:	4629      	mov	r1, r5
 8008018:	4638      	mov	r0, r7
 800801a:	f7ff ffa5 	bl	8007f68 <sbrk_aligned>
 800801e:	3001      	adds	r0, #1
 8008020:	d02b      	beq.n	800807a <_malloc_r+0xd2>
 8008022:	6823      	ldr	r3, [r4, #0]
 8008024:	442b      	add	r3, r5
 8008026:	6023      	str	r3, [r4, #0]
 8008028:	e00e      	b.n	8008048 <_malloc_r+0xa0>
 800802a:	6822      	ldr	r2, [r4, #0]
 800802c:	1b52      	subs	r2, r2, r5
 800802e:	d41e      	bmi.n	800806e <_malloc_r+0xc6>
 8008030:	2a0b      	cmp	r2, #11
 8008032:	d916      	bls.n	8008062 <_malloc_r+0xba>
 8008034:	1961      	adds	r1, r4, r5
 8008036:	42a3      	cmp	r3, r4
 8008038:	6025      	str	r5, [r4, #0]
 800803a:	bf18      	it	ne
 800803c:	6059      	strne	r1, [r3, #4]
 800803e:	6863      	ldr	r3, [r4, #4]
 8008040:	bf08      	it	eq
 8008042:	6031      	streq	r1, [r6, #0]
 8008044:	5162      	str	r2, [r4, r5]
 8008046:	604b      	str	r3, [r1, #4]
 8008048:	4638      	mov	r0, r7
 800804a:	f104 060b 	add.w	r6, r4, #11
 800804e:	f000 f865 	bl	800811c <__malloc_unlock>
 8008052:	f026 0607 	bic.w	r6, r6, #7
 8008056:	1d23      	adds	r3, r4, #4
 8008058:	1af2      	subs	r2, r6, r3
 800805a:	d0b6      	beq.n	8007fca <_malloc_r+0x22>
 800805c:	1b9b      	subs	r3, r3, r6
 800805e:	50a3      	str	r3, [r4, r2]
 8008060:	e7b3      	b.n	8007fca <_malloc_r+0x22>
 8008062:	6862      	ldr	r2, [r4, #4]
 8008064:	42a3      	cmp	r3, r4
 8008066:	bf0c      	ite	eq
 8008068:	6032      	streq	r2, [r6, #0]
 800806a:	605a      	strne	r2, [r3, #4]
 800806c:	e7ec      	b.n	8008048 <_malloc_r+0xa0>
 800806e:	4623      	mov	r3, r4
 8008070:	6864      	ldr	r4, [r4, #4]
 8008072:	e7b2      	b.n	8007fda <_malloc_r+0x32>
 8008074:	4634      	mov	r4, r6
 8008076:	6876      	ldr	r6, [r6, #4]
 8008078:	e7b9      	b.n	8007fee <_malloc_r+0x46>
 800807a:	230c      	movs	r3, #12
 800807c:	603b      	str	r3, [r7, #0]
 800807e:	4638      	mov	r0, r7
 8008080:	f000 f84c 	bl	800811c <__malloc_unlock>
 8008084:	e7a1      	b.n	8007fca <_malloc_r+0x22>
 8008086:	6025      	str	r5, [r4, #0]
 8008088:	e7de      	b.n	8008048 <_malloc_r+0xa0>
 800808a:	bf00      	nop
 800808c:	20001460 	.word	0x20001460

08008090 <_realloc_r>:
 8008090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008094:	4680      	mov	r8, r0
 8008096:	4614      	mov	r4, r2
 8008098:	460e      	mov	r6, r1
 800809a:	b921      	cbnz	r1, 80080a6 <_realloc_r+0x16>
 800809c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080a0:	4611      	mov	r1, r2
 80080a2:	f7ff bf81 	b.w	8007fa8 <_malloc_r>
 80080a6:	b92a      	cbnz	r2, 80080b4 <_realloc_r+0x24>
 80080a8:	f7ff ff12 	bl	8007ed0 <_free_r>
 80080ac:	4625      	mov	r5, r4
 80080ae:	4628      	mov	r0, r5
 80080b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080b4:	f000 f838 	bl	8008128 <_malloc_usable_size_r>
 80080b8:	4284      	cmp	r4, r0
 80080ba:	4607      	mov	r7, r0
 80080bc:	d802      	bhi.n	80080c4 <_realloc_r+0x34>
 80080be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80080c2:	d812      	bhi.n	80080ea <_realloc_r+0x5a>
 80080c4:	4621      	mov	r1, r4
 80080c6:	4640      	mov	r0, r8
 80080c8:	f7ff ff6e 	bl	8007fa8 <_malloc_r>
 80080cc:	4605      	mov	r5, r0
 80080ce:	2800      	cmp	r0, #0
 80080d0:	d0ed      	beq.n	80080ae <_realloc_r+0x1e>
 80080d2:	42bc      	cmp	r4, r7
 80080d4:	4622      	mov	r2, r4
 80080d6:	4631      	mov	r1, r6
 80080d8:	bf28      	it	cs
 80080da:	463a      	movcs	r2, r7
 80080dc:	f7ff fed0 	bl	8007e80 <memcpy>
 80080e0:	4631      	mov	r1, r6
 80080e2:	4640      	mov	r0, r8
 80080e4:	f7ff fef4 	bl	8007ed0 <_free_r>
 80080e8:	e7e1      	b.n	80080ae <_realloc_r+0x1e>
 80080ea:	4635      	mov	r5, r6
 80080ec:	e7df      	b.n	80080ae <_realloc_r+0x1e>
	...

080080f0 <_sbrk_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	4d06      	ldr	r5, [pc, #24]	; (800810c <_sbrk_r+0x1c>)
 80080f4:	2300      	movs	r3, #0
 80080f6:	4604      	mov	r4, r0
 80080f8:	4608      	mov	r0, r1
 80080fa:	602b      	str	r3, [r5, #0]
 80080fc:	f7fa f864 	bl	80021c8 <_sbrk>
 8008100:	1c43      	adds	r3, r0, #1
 8008102:	d102      	bne.n	800810a <_sbrk_r+0x1a>
 8008104:	682b      	ldr	r3, [r5, #0]
 8008106:	b103      	cbz	r3, 800810a <_sbrk_r+0x1a>
 8008108:	6023      	str	r3, [r4, #0]
 800810a:	bd38      	pop	{r3, r4, r5, pc}
 800810c:	20001468 	.word	0x20001468

08008110 <__malloc_lock>:
 8008110:	4801      	ldr	r0, [pc, #4]	; (8008118 <__malloc_lock+0x8>)
 8008112:	f000 b811 	b.w	8008138 <__retarget_lock_acquire_recursive>
 8008116:	bf00      	nop
 8008118:	2000146c 	.word	0x2000146c

0800811c <__malloc_unlock>:
 800811c:	4801      	ldr	r0, [pc, #4]	; (8008124 <__malloc_unlock+0x8>)
 800811e:	f000 b80c 	b.w	800813a <__retarget_lock_release_recursive>
 8008122:	bf00      	nop
 8008124:	2000146c 	.word	0x2000146c

08008128 <_malloc_usable_size_r>:
 8008128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800812c:	1f18      	subs	r0, r3, #4
 800812e:	2b00      	cmp	r3, #0
 8008130:	bfbc      	itt	lt
 8008132:	580b      	ldrlt	r3, [r1, r0]
 8008134:	18c0      	addlt	r0, r0, r3
 8008136:	4770      	bx	lr

08008138 <__retarget_lock_acquire_recursive>:
 8008138:	4770      	bx	lr

0800813a <__retarget_lock_release_recursive>:
 800813a:	4770      	bx	lr

0800813c <_init>:
 800813c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813e:	bf00      	nop
 8008140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008142:	bc08      	pop	{r3}
 8008144:	469e      	mov	lr, r3
 8008146:	4770      	bx	lr

08008148 <_fini>:
 8008148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814a:	bf00      	nop
 800814c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800814e:	bc08      	pop	{r3}
 8008150:	469e      	mov	lr, r3
 8008152:	4770      	bx	lr
