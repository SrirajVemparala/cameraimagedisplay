
LCDSDNEWTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  08007fb8  08007fb8  00017fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085a8  080085a8  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080085a8  080085a8  000185a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085b0  080085b0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085b0  080085b0  000185b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085b4  080085b4  000185b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080085b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          000045bc  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004644  20004644  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000120d8  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c7b  00000000  00000000  00032190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b90  00000000  00000000  00034e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a48  00000000  00000000  000359a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023b54  00000000  00000000  000363e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000106fb  00000000  00000000  00059f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5c8c  00000000  00000000  0006a637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000a3  00000000  00000000  001302c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000034d0  00000000  00000000  00130368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007fa0 	.word	0x08007fa0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08007fa0 	.word	0x08007fa0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <SELECT>:
* @Description: chip select pin set to 0
* @input param : void
* @return: void
*******************************************************************************/
static void SELECT(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000572:	4802      	ldr	r0, [pc, #8]	; (800057c <SELECT+0x14>)
 8000574:	f002 fb0c 	bl	8002b90 <HAL_GPIO_WritePin>
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40020400 	.word	0x40020400

08000580 <DESELECT>:
* @input param : void
* @return: void
*******************************************************************************/
/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800058a:	4802      	ldr	r0, [pc, #8]	; (8000594 <DESELECT+0x14>)
 800058c:	f002 fb00 	bl	8002b90 <HAL_GPIO_WritePin>
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40020400 	.word	0x40020400

08000598 <SPI_TxByte>:
* @Description: Transmit SPI data
* @input param :unsigned char
* @return: static void
*******************************************************************************/
static void SPI_TxByte(BYTE data)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 80005a2:	bf00      	nop
 80005a4:	4808      	ldr	r0, [pc, #32]	; (80005c8 <SPI_TxByte+0x30>)
 80005a6:	f003 fad8 	bl	8003b5a <HAL_SPI_GetState>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d1f9      	bne.n	80005a4 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 80005b0:	1df9      	adds	r1, r7, #7
 80005b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b6:	2201      	movs	r2, #1
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <SPI_TxByte+0x30>)
 80005ba:	f002 fff0 	bl	800359e <HAL_SPI_Transmit>
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200002f0 	.word	0x200002f0

080005cc <SPI_RxByte>:
* @Description: Receive SPI data
* @input param : void
* @return: static uint8_t
*******************************************************************************/
static uint8_t SPI_RxByte(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80005d2:	23ff      	movs	r3, #255	; 0xff
 80005d4:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 80005da:	bf00      	nop
 80005dc:	4809      	ldr	r0, [pc, #36]	; (8000604 <SPI_RxByte+0x38>)
 80005de:	f003 fabc 	bl	8003b5a <HAL_SPI_GetState>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d1f9      	bne.n	80005dc <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 80005e8:	1dba      	adds	r2, r7, #6
 80005ea:	1df9      	adds	r1, r7, #7
 80005ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2301      	movs	r3, #1
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <SPI_RxByte+0x38>)
 80005f6:	f003 f90e 	bl	8003816 <HAL_SPI_TransmitReceive>

  return data;
 80005fa:	79bb      	ldrb	r3, [r7, #6]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200002f0 	.word	0x200002f0

08000608 <SPI_RxBytePtr>:
* @Description: Receive SPI data and store the address
* @input param : uint8_t*
* @return: static void
*******************************************************************************/
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000610:	f7ff ffdc 	bl	80005cc <SPI_RxByte>
 8000614:	4603      	mov	r3, r0
 8000616:	461a      	mov	r2, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	701a      	strb	r2, [r3, #0]
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <SD_ReadyWait>:
* @Description: Wait till the data is received
* @input param : uint8_t
* @return: static void
*******************************************************************************/
static uint8_t SD_ReadyWait(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms timer */
  Timer2 = 50;
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <SD_ReadyWait+0x34>)
 800062c:	2232      	movs	r2, #50	; 0x32
 800062e:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000630:	f7ff ffcc 	bl	80005cc <SPI_RxByte>

  do
  {
    /* 0xFF  SPI Rx*/
    res = SPI_RxByte();
 8000634:	f7ff ffca 	bl	80005cc <SPI_RxByte>
 8000638:	4603      	mov	r3, r0
 800063a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	2bff      	cmp	r3, #255	; 0xff
 8000640:	d004      	beq.n	800064c <SD_ReadyWait+0x28>
 8000642:	4b05      	ldr	r3, [pc, #20]	; (8000658 <SD_ReadyWait+0x34>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	2b00      	cmp	r3, #0
 800064a:	d1f3      	bne.n	8000634 <SD_ReadyWait+0x10>

  return res;
 800064c:	79fb      	ldrb	r3, [r7, #7]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	200025c0 	.word	0x200025c0

0800065c <SD_PowerOn>:
* @Description: Enable SD card
* @input param : void
* @return: static void
*******************************************************************************/
static void SD_PowerOn(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];

  /* Deselect SPI communication */
  DESELECT();
 8000662:	f7ff ff8d 	bl	8000580 <DESELECT>
  //send the cmd 6 to 7 times to make sd card reset
  for(int i = 0; i < 10; i++)
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	e005      	b.n	8000678 <SD_PowerOn+0x1c>
  {
    SPI_TxByte(0xFF);
 800066c:	20ff      	movs	r0, #255	; 0xff
 800066e:	f7ff ff93 	bl	8000598 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3301      	adds	r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	2b09      	cmp	r3, #9
 800067c:	ddf6      	ble.n	800066c <SD_PowerOn+0x10>
  }

  /* SPI Chips Select */
  SELECT();
 800067e:	f7ff ff73 	bl	8000568 <SELECT>

  /*Go_to_IDLE_STATE  */
  cmd_arg[0] = (CMD0 | 0x40);
 8000682:	2340      	movs	r3, #64	; 0x40
 8000684:	703b      	strb	r3, [r7, #0]
  cmd_arg[1] = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	707b      	strb	r3, [r7, #1]
  cmd_arg[2] = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	70bb      	strb	r3, [r7, #2]
  cmd_arg[3] = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	70fb      	strb	r3, [r7, #3]
  cmd_arg[4] = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	713b      	strb	r3, [r7, #4]
  cmd_arg[5] = 0x95;//CRC
 8000696:	2395      	movs	r3, #149	; 0x95
 8000698:	717b      	strb	r3, [r7, #5]
//Transmit the data
  for (int i = 0; i < 6; i++)
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	e009      	b.n	80006b4 <SD_PowerOn+0x58>
  {
    SPI_TxByte(cmd_arg[i]);//Transmit all the data
 80006a0:	463a      	mov	r2, r7
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	4413      	add	r3, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ff75 	bl	8000598 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	3301      	adds	r3, #1
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	2b05      	cmp	r3, #5
 80006b8:	ddf2      	ble.n	80006a0 <SD_PowerOn+0x44>
  }

  while ((SPI_RxByte() != 0x01))//Verify if the acknowledge is correct
 80006ba:	bf00      	nop
 80006bc:	f7ff ff86 	bl	80005cc <SPI_RxByte>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d1fa      	bne.n	80006bc <SD_PowerOn+0x60>
  {

  }

  DESELECT();
 80006c6:	f7ff ff5b 	bl	8000580 <DESELECT>


  PowerFlag = 1;
 80006ca:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <SD_PowerOn+0x7c>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200000a5 	.word	0x200000a5

080006dc <SD_PowerOff>:
* @Description: Reset the SD card
* @input param : void
* @return: static void
*******************************************************************************/
static void SD_PowerOff(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <SD_PowerOff+0x14>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	200000a5 	.word	0x200000a5

080006f4 <SD_CheckPower>:
* @Description: Get the power status on SD card
* @input param : void
* @return: static void
*******************************************************************************/
static uint8_t SD_CheckPower(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <SD_CheckPower+0x14>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	200000a5 	.word	0x200000a5

0800070c <SD_RxDataBlock>:
* @Description: Get complete block information
* @input param : unsigned char *, unsigned int
* @return: static bool
*******************************************************************************/
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms*/
  Timer1 = 10;
 8000716:	4b17      	ldr	r3, [pc, #92]	; (8000774 <SD_RxDataBlock+0x68>)
 8000718:	220a      	movs	r2, #10
 800071a:	701a      	strb	r2, [r3, #0]

  do
  {
    token = SPI_RxByte();
 800071c:	f7ff ff56 	bl	80005cc <SPI_RxByte>
 8000720:	4603      	mov	r3, r0
 8000722:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000724:	7bfb      	ldrb	r3, [r7, #15]
 8000726:	2bff      	cmp	r3, #255	; 0xff
 8000728:	d104      	bne.n	8000734 <SD_RxDataBlock+0x28>
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <SD_RxDataBlock+0x68>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	2b00      	cmp	r3, #0
 8000732:	d1f3      	bne.n	800071c <SD_RxDataBlock+0x10>

  /* 0xFE  Token*/
  if(token != 0xFE)
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	2bfe      	cmp	r3, #254	; 0xfe
 8000738:	d001      	beq.n	800073e <SD_RxDataBlock+0x32>
    return FALSE;
 800073a:	2300      	movs	r3, #0
 800073c:	e016      	b.n	800076c <SD_RxDataBlock+0x60>


  do
  {
    SPI_RxBytePtr(buff++);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	1c5a      	adds	r2, r3, #1
 8000742:	607a      	str	r2, [r7, #4]
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ff5f 	bl	8000608 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	1c5a      	adds	r2, r3, #1
 800074e:	607a      	str	r2, [r7, #4]
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff59 	bl	8000608 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	3b02      	subs	r3, #2
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d1ed      	bne.n	800073e <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC */
 8000762:	f7ff ff33 	bl	80005cc <SPI_RxByte>
  SPI_RxByte();
 8000766:	f7ff ff31 	bl	80005cc <SPI_RxByte>

  return TRUE;
 800076a:	2301      	movs	r3, #1
}
 800076c:	4618      	mov	r0, r3
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	200025c1 	.word	0x200025c1

08000778 <SD_TxDataBlock>:
* @input param : unsigned char *, unsigned int
* @return: static bool
*******************************************************************************/
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	460b      	mov	r3, r1
 8000782:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;//response, wait
  uint8_t i = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	737b      	strb	r3, [r7, #13]

  /* SD*/
  if (SD_ReadyWait() != 0xFF)
 8000788:	f7ff ff4c 	bl	8000624 <SD_ReadyWait>
 800078c:	4603      	mov	r3, r0
 800078e:	2bff      	cmp	r3, #255	; 0xff
 8000790:	d001      	beq.n	8000796 <SD_TxDataBlock+0x1e>
    return FALSE;
 8000792:	2300      	movs	r3, #0
 8000794:	e040      	b.n	8000818 <SD_TxDataBlock+0xa0>

  SPI_TxByte(token);
 8000796:	78fb      	ldrb	r3, [r7, #3]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff fefd 	bl	8000598 <SPI_TxByte>

  if (token != 0xFD)
 800079e:	78fb      	ldrb	r3, [r7, #3]
 80007a0:	2bfd      	cmp	r3, #253	; 0xfd
 80007a2:	d031      	beq.n	8000808 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	73bb      	strb	r3, [r7, #14]

    do
    {
      SPI_TxByte(*buff++);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fef1 	bl	8000598 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	1c5a      	adds	r2, r3, #1
 80007ba:	607a      	str	r2, [r7, #4]
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff feea 	bl	8000598 <SPI_TxByte>
    } while (--wc);
 80007c4:	7bbb      	ldrb	r3, [r7, #14]
 80007c6:	3b01      	subs	r3, #1
 80007c8:	73bb      	strb	r3, [r7, #14]
 80007ca:	7bbb      	ldrb	r3, [r7, #14]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d1eb      	bne.n	80007a8 <SD_TxDataBlock+0x30>

    SPI_RxByte();
 80007d0:	f7ff fefc 	bl	80005cc <SPI_RxByte>
    SPI_RxByte();
 80007d4:	f7ff fefa 	bl	80005cc <SPI_RxByte>

    while (i <= 64)
 80007d8:	e00b      	b.n	80007f2 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80007da:	f7ff fef7 	bl	80005cc <SPI_RxByte>
 80007de:	4603      	mov	r3, r0
 80007e0:	73fb      	strb	r3, [r7, #15]

      if ((resp & 0x1F) == 0x05)
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	f003 031f 	and.w	r3, r3, #31
 80007e8:	2b05      	cmp	r3, #5
 80007ea:	d006      	beq.n	80007fa <SD_TxDataBlock+0x82>
        break;

      i++;
 80007ec:	7b7b      	ldrb	r3, [r7, #13]
 80007ee:	3301      	adds	r3, #1
 80007f0:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 80007f2:	7b7b      	ldrb	r3, [r7, #13]
 80007f4:	2b40      	cmp	r3, #64	; 0x40
 80007f6:	d9f0      	bls.n	80007da <SD_TxDataBlock+0x62>
 80007f8:	e000      	b.n	80007fc <SD_TxDataBlock+0x84>
        break;
 80007fa:	bf00      	nop
    }

    /* SPI Clear */
    while (SPI_RxByte() == 0);
 80007fc:	bf00      	nop
 80007fe:	f7ff fee5 	bl	80005cc <SPI_RxByte>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d0fa      	beq.n	80007fe <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	f003 031f 	and.w	r3, r3, #31
 800080e:	2b05      	cmp	r3, #5
 8000810:	d101      	bne.n	8000816 <SD_TxDataBlock+0x9e>
    return TRUE;
 8000812:	2301      	movs	r3, #1
 8000814:	e000      	b.n	8000818 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000816:	2300      	movs	r3, #0
}
 8000818:	4618      	mov	r0, r3
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <SD_SendCmd>:
* @Description:  Transmit command
* @input param : unsigned char , unsigned long
* @return: static unsigned char
*******************************************************************************/
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	6039      	str	r1, [r7, #0]
 800082a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* Wait and receive the data*/
  if (SD_ReadyWait() != 0xFF)
 800082c:	f7ff fefa 	bl	8000624 <SD_ReadyWait>
 8000830:	4603      	mov	r3, r0
 8000832:	2bff      	cmp	r3, #255	; 0xff
 8000834:	d001      	beq.n	800083a <SD_SendCmd+0x1a>
    return 0xFF;
 8000836:	23ff      	movs	r3, #255	; 0xff
 8000838:	e040      	b.n	80008bc <SD_SendCmd+0x9c>

//Send data and the argument received
  SPI_TxByte(cmd); 			/* Command */
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff feab 	bl	8000598 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	0e1b      	lsrs	r3, r3, #24
 8000846:	b2db      	uxtb	r3, r3
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fea5 	bl	8000598 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	0c1b      	lsrs	r3, r3, #16
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff fe9f 	bl	8000598 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	0a1b      	lsrs	r3, r3, #8
 800085e:	b2db      	uxtb	r3, r3
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fe99 	bl	8000598 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fe94 	bl	8000598 <SPI_TxByte>

  crc = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	2b40      	cmp	r3, #64	; 0x40
 8000878:	d101      	bne.n	800087e <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800087a:	2395      	movs	r3, #149	; 0x95
 800087c:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b48      	cmp	r3, #72	; 0x48
 8000882:	d101      	bne.n	8000888 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000884:	2387      	movs	r3, #135	; 0x87
 8000886:	73fb      	strb	r3, [r7, #15]

  /* CRC */
  SPI_TxByte(crc);
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fe84 	bl	8000598 <SPI_TxByte>

  /* CMD12 Stop Reading */
  if (cmd == CMD12)
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	2b4c      	cmp	r3, #76	; 0x4c
 8000894:	d101      	bne.n	800089a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000896:	f7ff fe99 	bl	80005cc <SPI_RxByte>

  uint8_t n = 10;
 800089a:	230a      	movs	r3, #10
 800089c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800089e:	f7ff fe95 	bl	80005cc <SPI_RxByte>
 80008a2:	4603      	mov	r3, r0
 80008a4:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80008a6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	da05      	bge.n	80008ba <SD_SendCmd+0x9a>
 80008ae:	7bbb      	ldrb	r3, [r7, #14]
 80008b0:	3b01      	subs	r3, #1
 80008b2:	73bb      	strb	r3, [r7, #14]
 80008b4:	7bbb      	ldrb	r3, [r7, #14]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1f1      	bne.n	800089e <SD_SendCmd+0x7e>

  return res;
 80008ba:	7b7b      	ldrb	r3, [r7, #13]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <SD_disk_initialize>:
* @Description: Initialize the SD card
* @input param : unsigned char
* @return: unsigned char
*******************************************************************************/
DSTATUS SD_disk_initialize(BYTE drv)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];


  if(drv)
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 80008d4:	2301      	movs	r3, #1
 80008d6:	e091      	b.n	80009fc <SD_disk_initialize+0x138>

  /* SD*/
  if(Stat & STA_NODISK)
 80008d8:	4b4a      	ldr	r3, [pc, #296]	; (8000a04 <SD_disk_initialize+0x140>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d003      	beq.n	80008ee <SD_disk_initialize+0x2a>
    return Stat;
 80008e6:	4b47      	ldr	r3, [pc, #284]	; (8000a04 <SD_disk_initialize+0x140>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	e086      	b.n	80009fc <SD_disk_initialize+0x138>

  /* SD Power On */
  SD_PowerOn();
 80008ee:	f7ff feb5 	bl	800065c <SD_PowerOn>

  /* SPI Chip Select */
  SELECT();
 80008f2:	f7ff fe39 	bl	8000568 <SELECT>

  /* SD */
  type = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	73bb      	strb	r3, [r7, #14]

  /* Idle */
  if (SD_SendCmd(CMD0, 0) == 1)
 80008fa:	2100      	movs	r1, #0
 80008fc:	2040      	movs	r0, #64	; 0x40
 80008fe:	f7ff ff8f 	bl	8000820 <SD_SendCmd>
 8000902:	4603      	mov	r3, r0
 8000904:	2b01      	cmp	r3, #1
 8000906:	d161      	bne.n	80009cc <SD_disk_initialize+0x108>
  {
    /* Timer 1*/
    Timer1 = 100;
 8000908:	4b3f      	ldr	r3, [pc, #252]	; (8000a08 <SD_disk_initialize+0x144>)
 800090a:	2264      	movs	r2, #100	; 0x64
 800090c:	701a      	strb	r2, [r3, #0]

    /* SD */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800090e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000912:	2048      	movs	r0, #72	; 0x48
 8000914:	f7ff ff84 	bl	8000820 <SD_SendCmd>
 8000918:	4603      	mov	r3, r0
 800091a:	2b01      	cmp	r3, #1
 800091c:	d156      	bne.n	80009cc <SD_disk_initialize+0x108>
    {
      for (n = 0; n < 4; n++)
 800091e:	2300      	movs	r3, #0
 8000920:	73fb      	strb	r3, [r7, #15]
 8000922:	e00c      	b.n	800093e <SD_disk_initialize+0x7a>
      {
        ocr[n] = SPI_RxByte();
 8000924:	7bfc      	ldrb	r4, [r7, #15]
 8000926:	f7ff fe51 	bl	80005cc <SPI_RxByte>
 800092a:	4603      	mov	r3, r0
 800092c:	461a      	mov	r2, r3
 800092e:	f107 0310 	add.w	r3, r7, #16
 8000932:	4423      	add	r3, r4
 8000934:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000938:	7bfb      	ldrb	r3, [r7, #15]
 800093a:	3301      	adds	r3, #1
 800093c:	73fb      	strb	r3, [r7, #15]
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	2b03      	cmp	r3, #3
 8000942:	d9ef      	bls.n	8000924 <SD_disk_initialize+0x60>
      }
      /*check if echo is received properly*/
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000944:	7abb      	ldrb	r3, [r7, #10]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d140      	bne.n	80009cc <SD_disk_initialize+0x108>
 800094a:	7afb      	ldrb	r3, [r7, #11]
 800094c:	2baa      	cmp	r3, #170	; 0xaa
 800094e:	d13d      	bne.n	80009cc <SD_disk_initialize+0x108>
      {
        /* Check the voltage level and also check if the card is HC */
        do {
          if ((SD_SendCmd(CMD55, 0) <= 1) &&( SD_SendCmd(CMD41, 1 << 30)) == 0)
 8000950:	2100      	movs	r1, #0
 8000952:	2077      	movs	r0, #119	; 0x77
 8000954:	f7ff ff64 	bl	8000820 <SD_SendCmd>
 8000958:	4603      	mov	r3, r0
 800095a:	2b01      	cmp	r3, #1
 800095c:	d807      	bhi.n	800096e <SD_disk_initialize+0xaa>
 800095e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000962:	2069      	movs	r0, #105	; 0x69
 8000964:	f7ff ff5c 	bl	8000820 <SD_SendCmd>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d005      	beq.n	800097a <SD_disk_initialize+0xb6>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800096e:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <SD_disk_initialize+0x144>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	b2db      	uxtb	r3, r3
 8000974:	2b00      	cmp	r3, #0
 8000976:	d1eb      	bne.n	8000950 <SD_disk_initialize+0x8c>
 8000978:	e000      	b.n	800097c <SD_disk_initialize+0xb8>
            break; /* ACMD41 with HCS bit */
 800097a:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <SD_disk_initialize+0x144>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	b2db      	uxtb	r3, r3
 8000982:	2b00      	cmp	r3, #0
 8000984:	d022      	beq.n	80009cc <SD_disk_initialize+0x108>
 8000986:	2100      	movs	r1, #0
 8000988:	207a      	movs	r0, #122	; 0x7a
 800098a:	f7ff ff49 	bl	8000820 <SD_SendCmd>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d11b      	bne.n	80009cc <SD_disk_initialize+0x108>
        {
          /* Check CCS bit */
          for (n = 0; n < 1; n++)
 8000994:	2300      	movs	r3, #0
 8000996:	73fb      	strb	r3, [r7, #15]
 8000998:	e00c      	b.n	80009b4 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800099a:	7bfc      	ldrb	r4, [r7, #15]
 800099c:	f7ff fe16 	bl	80005cc <SPI_RxByte>
 80009a0:	4603      	mov	r3, r0
 80009a2:	461a      	mov	r2, r3
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	4423      	add	r3, r4
 80009aa:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 1; n++)
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	3301      	adds	r3, #1
 80009b2:	73fb      	strb	r3, [r7, #15]
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d0ef      	beq.n	800099a <SD_disk_initialize+0xd6>
          }
          //Check if Card is HSC and CCS is set to 1
          type = (ocr[0] & 0x40) ? 6 : 2;
 80009ba:	7a3b      	ldrb	r3, [r7, #8]
 80009bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SD_disk_initialize+0x104>
 80009c4:	2306      	movs	r3, #6
 80009c6:	e000      	b.n	80009ca <SD_disk_initialize+0x106>
 80009c8:	2302      	movs	r3, #2
 80009ca:	73bb      	strb	r3, [r7, #14]
    else
    {

    }
}
  CardType = type;
 80009cc:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <SD_disk_initialize+0x148>)
 80009ce:	7bbb      	ldrb	r3, [r7, #14]
 80009d0:	7013      	strb	r3, [r2, #0]

  DESELECT();
 80009d2:	f7ff fdd5 	bl	8000580 <DESELECT>

  SPI_RxByte(); /* Idle (Release DO) */
 80009d6:	f7ff fdf9 	bl	80005cc <SPI_RxByte>

  if (type)
 80009da:	7bbb      	ldrb	r3, [r7, #14]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d008      	beq.n	80009f2 <SD_disk_initialize+0x12e>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <SD_disk_initialize+0x140>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	f023 0301 	bic.w	r3, r3, #1
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <SD_disk_initialize+0x140>)
 80009ee:	701a      	strb	r2, [r3, #0]
 80009f0:	e001      	b.n	80009f6 <SD_disk_initialize+0x132>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80009f2:	f7ff fe73 	bl	80006dc <SD_PowerOff>
  }

  return Stat;
 80009f6:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <SD_disk_initialize+0x140>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	b2db      	uxtb	r3, r3
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd90      	pop	{r4, r7, pc}
 8000a04:	20000000 	.word	0x20000000
 8000a08:	200025c1 	.word	0x200025c1
 8000a0c:	200000a4 	.word	0x200000a4

08000a10 <SD_disk_status>:
* @Description: get disk status
* @input param : unsigned char
* @return: unsigned char
*******************************************************************************/
DSTATUS SD_disk_status(BYTE drv)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SD_disk_status+0x14>
    return STA_NOINIT;
 8000a20:	2301      	movs	r3, #1
 8000a22:	e002      	b.n	8000a2a <SD_disk_status+0x1a>

  return Stat;
 8000a24:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <SD_disk_status+0x28>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	b2db      	uxtb	r3, r3
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000000 	.word	0x20000000

08000a3c <SD_disk_read>:
* @Description: read data from disk
* @input param : unsigned char, unsigned char*, unsigned long, unsigned int
* @return: enum
*******************************************************************************/
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	4603      	mov	r3, r0
 8000a4a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d102      	bne.n	8000a58 <SD_disk_read+0x1c>
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d101      	bne.n	8000a5c <SD_disk_read+0x20>
    return RES_PARERR;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	e051      	b.n	8000b00 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8000a5c:	4b2a      	ldr	r3, [pc, #168]	; (8000b08 <SD_disk_read+0xcc>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	e048      	b.n	8000b00 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8000a6e:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <SD_disk_read+0xd0>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d102      	bne.n	8000a80 <SD_disk_read+0x44>
    sector *= 512;      /*sector Byte addressing */
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	025b      	lsls	r3, r3, #9
 8000a7e:	607b      	str	r3, [r7, #4]

  SELECT();
 8000a80:	f7ff fd72 	bl	8000568 <SELECT>

  if (count == 1)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d111      	bne.n	8000aae <SD_disk_read+0x72>
  {
    /*Tranmit command 17*/
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	2051      	movs	r0, #81	; 0x51
 8000a8e:	f7ff fec7 	bl	8000820 <SD_SendCmd>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d129      	bne.n	8000aec <SD_disk_read+0xb0>
 8000a98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a9c:	68b8      	ldr	r0, [r7, #8]
 8000a9e:	f7ff fe35 	bl	800070c <SD_RxDataBlock>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d021      	beq.n	8000aec <SD_disk_read+0xb0>
      count = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	e01e      	b.n	8000aec <SD_disk_read+0xb0>
  }
  else
  {
    /*Tranmit command 18 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	2052      	movs	r0, #82	; 0x52
 8000ab2:	f7ff feb5 	bl	8000820 <SD_SendCmd>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d117      	bne.n	8000aec <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))//Read block of 512 bytes
 8000abc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac0:	68b8      	ldr	r0, [r7, #8]
 8000ac2:	f7ff fe23 	bl	800070c <SD_RxDataBlock>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d00a      	beq.n	8000ae2 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ad2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d1ed      	bne.n	8000abc <SD_disk_read+0x80>
 8000ae0:	e000      	b.n	8000ae4 <SD_disk_read+0xa8>
          break;
 8000ae2:	bf00      	nop

      /* STOP_TRANSMISSION*/
      SD_SendCmd(CMD12, 0);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	204c      	movs	r0, #76	; 0x4c
 8000ae8:	f7ff fe9a 	bl	8000820 <SD_SendCmd>
    }
  }

  DESELECT();
 8000aec:	f7ff fd48 	bl	8000580 <DESELECT>
  SPI_RxByte(); /* Idle (Release DO) */
 8000af0:	f7ff fd6c 	bl	80005cc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	bf14      	ite	ne
 8000afa:	2301      	movne	r3, #1
 8000afc:	2300      	moveq	r3, #0
 8000afe:	b2db      	uxtb	r3, r3
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	200000a4 	.word	0x200000a4

08000b10 <SD_disk_write>:
* @input param : unsigned char, unsigned char*, unsigned long, unsigned int
* @return: enum
*******************************************************************************/
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d102      	bne.n	8000b2c <SD_disk_write+0x1c>
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d101      	bne.n	8000b30 <SD_disk_write+0x20>
    return RES_PARERR;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	e06b      	b.n	8000c08 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8000b30:	4b37      	ldr	r3, [pc, #220]	; (8000c10 <SD_disk_write+0x100>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	e062      	b.n	8000c08 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8000b42:	4b33      	ldr	r3, [pc, #204]	; (8000c10 <SD_disk_write+0x100>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <SD_disk_write+0x44>
    return RES_WRPRT;
 8000b50:	2302      	movs	r3, #2
 8000b52:	e059      	b.n	8000c08 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8000b54:	4b2f      	ldr	r3, [pc, #188]	; (8000c14 <SD_disk_write+0x104>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	f003 0304 	and.w	r3, r3, #4
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d102      	bne.n	8000b66 <SD_disk_write+0x56>
    sector *= 512; /*sector Byte addressing */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	025b      	lsls	r3, r3, #9
 8000b64:	607b      	str	r3, [r7, #4]

  SELECT();
 8000b66:	f7ff fcff 	bl	8000568 <SELECT>

  if (count == 1)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d110      	bne.n	8000b92 <SD_disk_write+0x82>
  {
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b70:	6879      	ldr	r1, [r7, #4]
 8000b72:	2058      	movs	r0, #88	; 0x58
 8000b74:	f7ff fe54 	bl	8000820 <SD_SendCmd>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d13a      	bne.n	8000bf4 <SD_disk_write+0xe4>
 8000b7e:	21fe      	movs	r1, #254	; 0xfe
 8000b80:	68b8      	ldr	r0, [r7, #8]
 8000b82:	f7ff fdf9 	bl	8000778 <SD_TxDataBlock>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d033      	beq.n	8000bf4 <SD_disk_write+0xe4>
      count = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	e030      	b.n	8000bf4 <SD_disk_write+0xe4>
  }
  else
  {

    if (CardType & 2)
 8000b92:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <SD_disk_write+0x104>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d007      	beq.n	8000bae <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	2077      	movs	r0, #119	; 0x77
 8000ba2:	f7ff fe3d 	bl	8000820 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000ba6:	6839      	ldr	r1, [r7, #0]
 8000ba8:	2057      	movs	r0, #87	; 0x57
 8000baa:	f7ff fe39 	bl	8000820 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	2059      	movs	r0, #89	; 0x59
 8000bb2:	f7ff fe35 	bl	8000820 <SD_SendCmd>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d11b      	bne.n	8000bf4 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000bbc:	21fc      	movs	r1, #252	; 0xfc
 8000bbe:	68b8      	ldr	r0, [r7, #8]
 8000bc0:	f7ff fdda 	bl	8000778 <SD_TxDataBlock>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d00a      	beq.n	8000be0 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bd0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d1ee      	bne.n	8000bbc <SD_disk_write+0xac>
 8000bde:	e000      	b.n	8000be2 <SD_disk_write+0xd2>
          break;
 8000be0:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8000be2:	21fd      	movs	r1, #253	; 0xfd
 8000be4:	2000      	movs	r0, #0
 8000be6:	f7ff fdc7 	bl	8000778 <SD_TxDataBlock>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d101      	bne.n	8000bf4 <SD_disk_write+0xe4>
      {
        count = 1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8000bf4:	f7ff fcc4 	bl	8000580 <DESELECT>
  SPI_RxByte();
 8000bf8:	f7ff fce8 	bl	80005cc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	bf14      	ite	ne
 8000c02:	2301      	movne	r3, #1
 8000c04:	2300      	moveq	r3, #0
 8000c06:	b2db      	uxtb	r3, r3
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000000 	.word	0x20000000
 8000c14:	200000a4 	.word	0x200000a4

08000c18 <SD_disk_ioctl>:
* @Description: Used to send SD card commands
* @input param : unsigned char, unsigned char, void
* @return: enum
*******************************************************************************/
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b08b      	sub	sp, #44	; 0x2c
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	603a      	str	r2, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
 8000c24:	460b      	mov	r3, r1
 8000c26:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000c32:	2304      	movs	r3, #4
 8000c34:	e11b      	b.n	8000e6e <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8000c3c:	79bb      	ldrb	r3, [r7, #6]
 8000c3e:	2b05      	cmp	r3, #5
 8000c40:	d129      	bne.n	8000c96 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8000c42:	6a3b      	ldr	r3, [r7, #32]
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d017      	beq.n	8000c7a <SD_disk_ioctl+0x62>
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	dc1f      	bgt.n	8000c8e <SD_disk_ioctl+0x76>
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d002      	beq.n	8000c58 <SD_disk_ioctl+0x40>
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d00b      	beq.n	8000c6e <SD_disk_ioctl+0x56>
 8000c56:	e01a      	b.n	8000c8e <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8000c58:	f7ff fd4c 	bl	80006f4 <SD_CheckPower>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8000c62:	f7ff fd3b 	bl	80006dc <SD_PowerOff>
      res = RES_OK;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000c6c:	e0fd      	b.n	8000e6a <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8000c6e:	f7ff fcf5 	bl	800065c <SD_PowerOn>
      res = RES_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000c78:	e0f7      	b.n	8000e6a <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000c7a:	6a3b      	ldr	r3, [r7, #32]
 8000c7c:	1c5c      	adds	r4, r3, #1
 8000c7e:	f7ff fd39 	bl	80006f4 <SD_CheckPower>
 8000c82:	4603      	mov	r3, r0
 8000c84:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000c86:	2300      	movs	r3, #0
 8000c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000c8c:	e0ed      	b.n	8000e6a <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8000c8e:	2304      	movs	r3, #4
 8000c90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c94:	e0e9      	b.n	8000e6a <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8000c96:	4b78      	ldr	r3, [pc, #480]	; (8000e78 <SD_disk_ioctl+0x260>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	e0e2      	b.n	8000e6e <SD_disk_ioctl+0x256>

    SELECT();
 8000ca8:	f7ff fc5e 	bl	8000568 <SELECT>

    switch (ctrl)
 8000cac:	79bb      	ldrb	r3, [r7, #6]
 8000cae:	2b0d      	cmp	r3, #13
 8000cb0:	f200 80cc 	bhi.w	8000e4c <SD_disk_ioctl+0x234>
 8000cb4:	a201      	add	r2, pc, #4	; (adr r2, 8000cbc <SD_disk_ioctl+0xa4>)
 8000cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cba:	bf00      	nop
 8000cbc:	08000db7 	.word	0x08000db7
 8000cc0:	08000cf5 	.word	0x08000cf5
 8000cc4:	08000da7 	.word	0x08000da7
 8000cc8:	08000e4d 	.word	0x08000e4d
 8000ccc:	08000e4d 	.word	0x08000e4d
 8000cd0:	08000e4d 	.word	0x08000e4d
 8000cd4:	08000e4d 	.word	0x08000e4d
 8000cd8:	08000e4d 	.word	0x08000e4d
 8000cdc:	08000e4d 	.word	0x08000e4d
 8000ce0:	08000e4d 	.word	0x08000e4d
 8000ce4:	08000e4d 	.word	0x08000e4d
 8000ce8:	08000dc9 	.word	0x08000dc9
 8000cec:	08000ded 	.word	0x08000ded
 8000cf0:	08000e11 	.word	0x08000e11
    {
    case GET_SECTOR_COUNT:
      /* SD Sector (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2049      	movs	r0, #73	; 0x49
 8000cf8:	f7ff fd92 	bl	8000820 <SD_SendCmd>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f040 80a8 	bne.w	8000e54 <SD_disk_ioctl+0x23c>
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	2110      	movs	r1, #16
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fcfe 	bl	800070c <SD_RxDataBlock>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f000 809e 	beq.w	8000e54 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8000d18:	7b3b      	ldrb	r3, [r7, #12]
 8000d1a:	099b      	lsrs	r3, r3, #6
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d10e      	bne.n	8000d40 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d22:	7d7b      	ldrb	r3, [r7, #21]
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	7d3b      	ldrb	r3, [r7, #20]
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	021b      	lsls	r3, r3, #8
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	4413      	add	r3, r2
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	3301      	adds	r3, #1
 8000d34:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000d36:	8bfb      	ldrh	r3, [r7, #30]
 8000d38:	029a      	lsls	r2, r3, #10
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	e02e      	b.n	8000d9e <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d40:	7c7b      	ldrb	r3, [r7, #17]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	7dbb      	ldrb	r3, [r7, #22]
 8000d4a:	09db      	lsrs	r3, r3, #7
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	4413      	add	r3, r2
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	7d7b      	ldrb	r3, [r7, #21]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	f003 0306 	and.w	r3, r3, #6
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	4413      	add	r3, r2
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	3302      	adds	r3, #2
 8000d64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d68:	7d3b      	ldrb	r3, [r7, #20]
 8000d6a:	099b      	lsrs	r3, r3, #6
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	7cfb      	ldrb	r3, [r7, #19]
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	4413      	add	r3, r2
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	7cbb      	ldrb	r3, [r7, #18]
 8000d7e:	029b      	lsls	r3, r3, #10
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	4413      	add	r3, r2
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d90:	8bfa      	ldrh	r2, [r7, #30]
 8000d92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d96:	3b09      	subs	r3, #9
 8000d98:	409a      	lsls	r2, r3
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000da4:	e056      	b.n	8000e54 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* (WORD) */
      *(WORD*) buff = 512;
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dac:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000dae:	2300      	movs	r3, #0
 8000db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000db4:	e055      	b.n	8000e62 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* */
      if (SD_ReadyWait() == 0xFF)
 8000db6:	f7ff fc35 	bl	8000624 <SD_ReadyWait>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2bff      	cmp	r3, #255	; 0xff
 8000dbe:	d14b      	bne.n	8000e58 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000dc6:	e047      	b.n	8000e58 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2049      	movs	r0, #73	; 0x49
 8000dcc:	f7ff fd28 	bl	8000820 <SD_SendCmd>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d142      	bne.n	8000e5c <SD_disk_ioctl+0x244>
 8000dd6:	2110      	movs	r1, #16
 8000dd8:	6a38      	ldr	r0, [r7, #32]
 8000dda:	f7ff fc97 	bl	800070c <SD_RxDataBlock>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d03b      	beq.n	8000e5c <SD_disk_ioctl+0x244>
        res = RES_OK;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000dea:	e037      	b.n	8000e5c <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000dec:	2100      	movs	r1, #0
 8000dee:	204a      	movs	r0, #74	; 0x4a
 8000df0:	f7ff fd16 	bl	8000820 <SD_SendCmd>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d132      	bne.n	8000e60 <SD_disk_ioctl+0x248>
 8000dfa:	2110      	movs	r1, #16
 8000dfc:	6a38      	ldr	r0, [r7, #32]
 8000dfe:	f7ff fc85 	bl	800070c <SD_RxDataBlock>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d02b      	beq.n	8000e60 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e0e:	e027      	b.n	8000e60 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000e10:	2100      	movs	r1, #0
 8000e12:	207a      	movs	r0, #122	; 0x7a
 8000e14:	f7ff fd04 	bl	8000820 <SD_SendCmd>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d116      	bne.n	8000e4c <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e24:	e00b      	b.n	8000e3e <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8000e26:	6a3c      	ldr	r4, [r7, #32]
 8000e28:	1c63      	adds	r3, r4, #1
 8000e2a:	623b      	str	r3, [r7, #32]
 8000e2c:	f7ff fbce 	bl	80005cc <SPI_RxByte>
 8000e30:	4603      	mov	r3, r0
 8000e32:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000e34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e38:	3301      	adds	r3, #1
 8000e3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	d9ef      	bls.n	8000e26 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e52:	e006      	b.n	8000e62 <SD_disk_ioctl+0x24a>
      break;
 8000e54:	bf00      	nop
 8000e56:	e004      	b.n	8000e62 <SD_disk_ioctl+0x24a>
      break;
 8000e58:	bf00      	nop
 8000e5a:	e002      	b.n	8000e62 <SD_disk_ioctl+0x24a>
      break;
 8000e5c:	bf00      	nop
 8000e5e:	e000      	b.n	8000e62 <SD_disk_ioctl+0x24a>
      break;
 8000e60:	bf00      	nop
    }

    DESELECT();
 8000e62:	f7ff fb8d 	bl	8000580 <DESELECT>
    SPI_RxByte();
 8000e66:	f7ff fbb1 	bl	80005cc <SPI_RxByte>
  }

  return res;
 8000e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	372c      	adds	r7, #44	; 0x2c
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd90      	pop	{r4, r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000000 	.word	0x20000000

08000e7c <ili9341_start>:
* @Description:Start Initialization ILI9341
* @input param : void
* @return: void
*******************************************************************************/
void ili9341_start()
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	ILI9341Reset();
 8000e80:	f000 f834 	bl	8000eec <ILI9341Reset>
	ILI9341Init();
 8000e84:	f000 f848 	bl	8000f18 <ILI9341Init>
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <WriteCommand>:
* @Description: writes commands to the ILI9341
* @input param : uint8_t
* @return: void
*******************************************************************************/
void WriteCommand(uint8_t command)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2120      	movs	r1, #32
 8000e9a:	4806      	ldr	r0, [pc, #24]	; (8000eb4 <WriteCommand+0x28>)
 8000e9c:	f001 fe78 	bl	8002b90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &command, 1U, 100U);
 8000ea0:	1df9      	adds	r1, r7, #7
 8000ea2:	2364      	movs	r3, #100	; 0x64
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <WriteCommand+0x2c>)
 8000ea8:	f002 fb79 	bl	800359e <HAL_SPI_Transmit>
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40020800 	.word	0x40020800
 8000eb8:	20002504 	.word	0x20002504

08000ebc <WriteData>:
* @Description: writes data to the ILI9341
* @input param : uint8_t
* @return: void
*******************************************************************************/
void WriteData(uint8_t data)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	2120      	movs	r1, #32
 8000eca:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <WriteData+0x28>)
 8000ecc:	f001 fe60 	bl	8002b90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1U, 100U);
 8000ed0:	1df9      	adds	r1, r7, #7
 8000ed2:	2364      	movs	r3, #100	; 0x64
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <WriteData+0x2c>)
 8000ed8:	f002 fb61 	bl	800359e <HAL_SPI_Transmit>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40020800 	.word	0x40020800
 8000ee8:	20002504 	.word	0x20002504

08000eec <ILI9341Reset>:
* @Description: Resets ILI9341 LCD
* @input param : void
* @return: void
*******************************************************************************/
void ILI9341Reset(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_RST_PORT, ILI9341_RST_PIN, GPIO_PIN_RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2110      	movs	r1, #16
 8000ef4:	4807      	ldr	r0, [pc, #28]	; (8000f14 <ILI9341Reset+0x28>)
 8000ef6:	f001 fe4b 	bl	8002b90 <HAL_GPIO_WritePin>
	HAL_Delay(200UL);
 8000efa:	20c8      	movs	r0, #200	; 0xc8
 8000efc:	f001 f874 	bl	8001fe8 <HAL_Delay>
	HAL_GPIO_WritePin(ILI9341_RST_PORT, ILI9341_RST_PIN, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	2110      	movs	r1, #16
 8000f04:	4803      	ldr	r0, [pc, #12]	; (8000f14 <ILI9341Reset+0x28>)
 8000f06:	f001 fe43 	bl	8002b90 <HAL_GPIO_WritePin>
	HAL_Delay(200UL);
 8000f0a:	20c8      	movs	r0, #200	; 0xc8
 8000f0c:	f001 f86c 	bl	8001fe8 <HAL_Delay>
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40020800 	.word	0x40020800

08000f18 <ILI9341Init>:
* @Description: Initializes ILI9341
* @input param : void
* @return: void
*******************************************************************************/
void ILI9341Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ILI9341_CS_PORT, ILI9341_CS_PIN, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2110      	movs	r1, #16
 8000f20:	484f      	ldr	r0, [pc, #316]	; (8001060 <ILI9341Init+0x148>)
 8000f22:	f001 fe35 	bl	8002b90 <HAL_GPIO_WritePin>

	//Software Reset command
	WriteCommand(0x01U);
 8000f26:	2001      	movs	r0, #1
 8000f28:	f7ff ffb0 	bl	8000e8c <WriteCommand>
	HAL_Delay(1000UL);
 8000f2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f30:	f001 f85a 	bl	8001fe8 <HAL_Delay>
	//Power control command
	WriteCommand(0xCBU);
 8000f34:	20cb      	movs	r0, #203	; 0xcb
 8000f36:	f7ff ffa9 	bl	8000e8c <WriteCommand>
	WriteData(0x39U);//Argument 1
 8000f3a:	2039      	movs	r0, #57	; 0x39
 8000f3c:	f7ff ffbe 	bl	8000ebc <WriteData>
	WriteData(0x2CU);//Argument 2
 8000f40:	202c      	movs	r0, #44	; 0x2c
 8000f42:	f7ff ffbb 	bl	8000ebc <WriteData>
	WriteData(0x00U);//Argument 3
 8000f46:	2000      	movs	r0, #0
 8000f48:	f7ff ffb8 	bl	8000ebc <WriteData>
	WriteData(0x34U);//Argument 4_Set Register VD
 8000f4c:	2034      	movs	r0, #52	; 0x34
 8000f4e:	f7ff ffb5 	bl	8000ebc <WriteData>
	WriteData(0x02U);//Argument 5_Set register DDVDH
 8000f52:	2002      	movs	r0, #2
 8000f54:	f7ff ffb2 	bl	8000ebc <WriteData>
	//Power Control B
	WriteCommand(0xCFU);
 8000f58:	20cf      	movs	r0, #207	; 0xcf
 8000f5a:	f7ff ff97 	bl	8000e8c <WriteCommand>
	WriteData(0x00U);//Arg 1
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f7ff ffac 	bl	8000ebc <WriteData>
	WriteData(0xC1U);//Arg 2
 8000f64:	20c1      	movs	r0, #193	; 0xc1
 8000f66:	f7ff ffa9 	bl	8000ebc <WriteData>
	WriteData(0x30U);//Arg 3
 8000f6a:	2030      	movs	r0, #48	; 0x30
 8000f6c:	f7ff ffa6 	bl	8000ebc <WriteData>
	//Drive Timing control
	WriteCommand(0xE8U);
 8000f70:	20e8      	movs	r0, #232	; 0xe8
 8000f72:	f7ff ff8b 	bl	8000e8c <WriteCommand>
	WriteData(0x85U);//Arg 1
 8000f76:	2085      	movs	r0, #133	; 0x85
 8000f78:	f7ff ffa0 	bl	8000ebc <WriteData>
	WriteData(0x00U);//Arg 2
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f7ff ff9d 	bl	8000ebc <WriteData>
	WriteData(0x78U);//Arg 3
 8000f82:	2078      	movs	r0, #120	; 0x78
 8000f84:	f7ff ff9a 	bl	8000ebc <WriteData>
	//Driver timing control B
	WriteCommand(0xEAU);
 8000f88:	20ea      	movs	r0, #234	; 0xea
 8000f8a:	f7ff ff7f 	bl	8000e8c <WriteCommand>
	WriteData(0x00U);//Arg 1
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f7ff ff94 	bl	8000ebc <WriteData>
	WriteData(0x00U);//Arg 2
 8000f94:	2000      	movs	r0, #0
 8000f96:	f7ff ff91 	bl	8000ebc <WriteData>
	//Power ON sequence
	WriteCommand(0xEDU);
 8000f9a:	20ed      	movs	r0, #237	; 0xed
 8000f9c:	f7ff ff76 	bl	8000e8c <WriteCommand>
	WriteData(0x64U);//Arg 1
 8000fa0:	2064      	movs	r0, #100	; 0x64
 8000fa2:	f7ff ff8b 	bl	8000ebc <WriteData>
	WriteData(0x03U);//Arg 2
 8000fa6:	2003      	movs	r0, #3
 8000fa8:	f7ff ff88 	bl	8000ebc <WriteData>
	WriteData(0x12U);//Arg 3
 8000fac:	2012      	movs	r0, #18
 8000fae:	f7ff ff85 	bl	8000ebc <WriteData>
	WriteData(0x81U);//Arg 4
 8000fb2:	2081      	movs	r0, #129	; 0x81
 8000fb4:	f7ff ff82 	bl	8000ebc <WriteData>
	//Pump Ratio control
	WriteCommand(0xF7U);
 8000fb8:	20f7      	movs	r0, #247	; 0xf7
 8000fba:	f7ff ff67 	bl	8000e8c <WriteCommand>
	WriteData(0x20U);//DDVDH - 2*VCI
 8000fbe:	2020      	movs	r0, #32
 8000fc0:	f7ff ff7c 	bl	8000ebc <WriteData>
    //Power control
	WriteCommand(0xC0U);
 8000fc4:	20c0      	movs	r0, #192	; 0xc0
 8000fc6:	f7ff ff61 	bl	8000e8c <WriteCommand>
	WriteData(0x23U);//Set VRH to 0x23 of pump circuit
 8000fca:	2023      	movs	r0, #35	; 0x23
 8000fcc:	f7ff ff76 	bl	8000ebc <WriteData>
	//Power control 2
	WriteCommand(0xC1U);
 8000fd0:	20c1      	movs	r0, #193	; 0xc1
 8000fd2:	f7ff ff5b 	bl	8000e8c <WriteCommand>
	WriteData(0x10U);
 8000fd6:	2010      	movs	r0, #16
 8000fd8:	f7ff ff70 	bl	8000ebc <WriteData>
	//Set VCOM
	WriteCommand(0xC5U);
 8000fdc:	20c5      	movs	r0, #197	; 0xc5
 8000fde:	f7ff ff55 	bl	8000e8c <WriteCommand>
	WriteData(0x3EU);
 8000fe2:	203e      	movs	r0, #62	; 0x3e
 8000fe4:	f7ff ff6a 	bl	8000ebc <WriteData>
	WriteData(0x28U);
 8000fe8:	2028      	movs	r0, #40	; 0x28
 8000fea:	f7ff ff67 	bl	8000ebc <WriteData>
	//VCOM control command
	WriteCommand(0xC7U);
 8000fee:	20c7      	movs	r0, #199	; 0xc7
 8000ff0:	f7ff ff4c 	bl	8000e8c <WriteCommand>
	WriteData(0x86U);
 8000ff4:	2086      	movs	r0, #134	; 0x86
 8000ff6:	f7ff ff61 	bl	8000ebc <WriteData>
	//Memory access
	WriteCommand(0x36U);
 8000ffa:	2036      	movs	r0, #54	; 0x36
 8000ffc:	f7ff ff46 	bl	8000e8c <WriteCommand>
	WriteData(0x48U);// Column address order and enavle BGR sequence
 8001000:	2048      	movs	r0, #72	; 0x48
 8001002:	f7ff ff5b 	bl	8000ebc <WriteData>
	//Pixel format
	WriteCommand(0x3AU);
 8001006:	203a      	movs	r0, #58	; 0x3a
 8001008:	f7ff ff40 	bl	8000e8c <WriteCommand>
	WriteData(0x55U);//16 bit pixel format- RGB and MCU interface
 800100c:	2055      	movs	r0, #85	; 0x55
 800100e:	f7ff ff55 	bl	8000ebc <WriteData>
	//Frame Rate control
	WriteCommand(0xB1U);
 8001012:	20b1      	movs	r0, #177	; 0xb1
 8001014:	f7ff ff3a 	bl	8000e8c <WriteCommand>
	WriteData(0x00U);//focs is considered as clock
 8001018:	2000      	movs	r0, #0
 800101a:	f7ff ff4f 	bl	8000ebc <WriteData>
	WriteData(0x18U);//frame rate is 63 Hz
 800101e:	2018      	movs	r0, #24
 8001020:	f7ff ff4c 	bl	8000ebc <WriteData>
	//Display Function control
	WriteCommand(0xB6U);
 8001024:	20b6      	movs	r0, #182	; 0xb6
 8001026:	f7ff ff31 	bl	8000e8c <WriteCommand>
	WriteData(0x08U);//Interval scan
 800102a:	2008      	movs	r0, #8
 800102c:	f7ff ff46 	bl	8000ebc <WriteData>
	WriteData(0x82U);//Scan cycle 5 frames and LCD type normally white
 8001030:	2082      	movs	r0, #130	; 0x82
 8001032:	f7ff ff43 	bl	8000ebc <WriteData>
	WriteData(0x27U);//162 Drive lines
 8001036:	2027      	movs	r0, #39	; 0x27
 8001038:	f7ff ff40 	bl	8000ebc <WriteData>
	//Gama control enable
	WriteCommand(0xF2U);
 800103c:	20f2      	movs	r0, #242	; 0xf2
 800103e:	f7ff ff25 	bl	8000e8c <WriteCommand>
	WriteData(0x00U);
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff ff3a 	bl	8000ebc <WriteData>
	//Sleep out mode
	WriteCommand(0x11U);
 8001048:	2011      	movs	r0, #17
 800104a:	f7ff ff1f 	bl	8000e8c <WriteCommand>
	HAL_Delay(120UL);//Delay is mandatory for coming out of sleep to do the next operation
 800104e:	2078      	movs	r0, #120	; 0x78
 8001050:	f000 ffca 	bl	8001fe8 <HAL_Delay>
	//Display ON
	WriteCommand(0x29U);
 8001054:	2029      	movs	r0, #41	; 0x29
 8001056:	f7ff ff19 	bl	8000e8c <WriteCommand>
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40020000 	.word	0x40020000

08001064 <setaddress>:
* @Description: Sets the start address and end address for adding pixels
* @input param : uint16_t, uint16_t, uint16_t,uint16_t
* @return: void
*******************************************************************************/
void setaddress(uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t yEnd)
{
 8001064:	b590      	push	{r4, r7, lr}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4604      	mov	r4, r0
 800106c:	4608      	mov	r0, r1
 800106e:	4611      	mov	r1, r2
 8001070:	461a      	mov	r2, r3
 8001072:	4623      	mov	r3, r4
 8001074:	80fb      	strh	r3, [r7, #6]
 8001076:	4603      	mov	r3, r0
 8001078:	80bb      	strh	r3, [r7, #4]
 800107a:	460b      	mov	r3, r1
 800107c:	807b      	strh	r3, [r7, #2]
 800107e:	4613      	mov	r3, r2
 8001080:	803b      	strh	r3, [r7, #0]
	//Set Column address
	WriteCommand(0x2AU);
 8001082:	202a      	movs	r0, #42	; 0x2a
 8001084:	f7ff ff02 	bl	8000e8c <WriteCommand>
	WriteData(xStart >> 8);//Starts at 00h
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	0a1b      	lsrs	r3, r3, #8
 800108c:	b29b      	uxth	r3, r3
 800108e:	b2db      	uxtb	r3, r3
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff13 	bl	8000ebc <WriteData>
	WriteData(xStart);
 8001096:	88fb      	ldrh	r3, [r7, #6]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff0e 	bl	8000ebc <WriteData>
	WriteData(xEnd >> 8);
 80010a0:	887b      	ldrh	r3, [r7, #2]
 80010a2:	0a1b      	lsrs	r3, r3, #8
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff07 	bl	8000ebc <WriteData>
	WriteData(xEnd);//Ends at pixel number 240(Width)
 80010ae:	887b      	ldrh	r3, [r7, #2]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff02 	bl	8000ebc <WriteData>
	//Set Row address
	WriteCommand(0x2BU);
 80010b8:	202b      	movs	r0, #43	; 0x2b
 80010ba:	f7ff fee7 	bl	8000e8c <WriteCommand>
	WriteData(yStart >> 8);
 80010be:	88bb      	ldrh	r3, [r7, #4]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fef8 	bl	8000ebc <WriteData>
	WriteData(yStart);//Starts at 00h
 80010cc:	88bb      	ldrh	r3, [r7, #4]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fef3 	bl	8000ebc <WriteData>
	WriteData(yEnd >> 8);
 80010d6:	883b      	ldrh	r3, [r7, #0]
 80010d8:	0a1b      	lsrs	r3, r3, #8
 80010da:	b29b      	uxth	r3, r3
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff feec 	bl	8000ebc <WriteData>
	WriteData(yEnd);//Ends at pixel number 320(Width)
 80010e4:	883b      	ldrh	r3, [r7, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fee7 	bl	8000ebc <WriteData>

	//Start writing the data
	WriteCommand(0x2CU);
 80010ee:	202c      	movs	r0, #44	; 0x2c
 80010f0:	f7ff fecc 	bl	8000e8c <WriteCommand>

	//Set the mode to Data write mode
	HAL_GPIO_WritePin(ILI9341_DC_PORT, ILI9341_DC_PIN, GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	2120      	movs	r1, #32
 80010f8:	4803      	ldr	r0, [pc, #12]	; (8001108 <setaddress+0xa4>)
 80010fa:	f001 fd49 	bl	8002b90 <HAL_GPIO_WritePin>
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	bd90      	pop	{r4, r7, pc}
 8001106:	bf00      	nop
 8001108:	40020800 	.word	0x40020800

0800110c <ILI9341_write_Pixel>:
* @Description: Transmit pixel data
* @input param : uint16_t, uint16_t, color_t
* @return: void
*******************************************************************************/
void ILI9341_write_Pixel(uint16_t x, uint16_t y, colour_t colour)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	80fb      	strh	r3, [r7, #6]
 8001116:	460b      	mov	r3, r1
 8001118:	80bb      	strh	r3, [r7, #4]
 800111a:	4613      	mov	r3, r2
 800111c:	807b      	strh	r3, [r7, #2]
	colour_t beColour = __builtin_bswap16(colour);
 800111e:	887b      	ldrh	r3, [r7, #2]
 8001120:	ba5b      	rev16	r3, r3
 8001122:	b29b      	uxth	r3, r3
 8001124:	81fb      	strh	r3, [r7, #14]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&beColour, 2U, 100UL);
 8001126:	f107 010e 	add.w	r1, r7, #14
 800112a:	2364      	movs	r3, #100	; 0x64
 800112c:	2202      	movs	r2, #2
 800112e:	4803      	ldr	r0, [pc, #12]	; (800113c <ILI9341_write_Pixel+0x30>)
 8001130:	f002 fa35 	bl	800359e <HAL_SPI_Transmit>
}
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20002504 	.word	0x20002504

08001140 <Image_display>:
* @Description: Extract the image and transfer it to LCD
* @input param : void
* @return: int
*******************************************************************************/
int Image_display(const char* fname)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	f5ad 5d9a 	sub.w	sp, sp, #4928	; 0x1340
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	f107 0318 	add.w	r3, r7, #24
 800114e:	3b14      	subs	r3, #20
 8001150:	6018      	str	r0, [r3, #0]
    FIL file;
    unsigned int data_read;
    uint8_t header[34];
    //Open the file
    FRESULT res = f_open(&file, fname, FA_READ);
 8001152:	f107 0318 	add.w	r3, r7, #24
 8001156:	3b14      	subs	r3, #20
 8001158:	f507 7046 	add.w	r0, r7, #792	; 0x318
 800115c:	3818      	subs	r0, #24
 800115e:	2201      	movs	r2, #1
 8001160:	6819      	ldr	r1, [r3, #0]
 8001162:	f005 f87b 	bl	800625c <f_open>
 8001166:	4603      	mov	r3, r0
 8001168:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800116c:	f102 020b 	add.w	r2, r2, #11
 8001170:	7013      	strb	r3, [r2, #0]
    if(res != FR_OK)
 8001172:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001176:	f103 030b 	add.w	r3, r3, #11
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d004      	beq.n	800118a <Image_display+0x4a>
    {
    	printf("Open operation failed");
 8001180:	4895      	ldr	r0, [pc, #596]	; (80013d8 <Image_display+0x298>)
 8001182:	f005 ffb7 	bl	80070f4 <iprintf>
        return 0;
 8001186:	2300      	movs	r3, #0
 8001188:	e1f3      	b.n	8001572 <Image_display+0x432>
    }
    //Read 34 bytes of header from the file
    res = f_read(&file, header, sizeof(header), &data_read);
 800118a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800118e:	3b1c      	subs	r3, #28
 8001190:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 8001194:	f507 7046 	add.w	r0, r7, #792	; 0x318
 8001198:	3818      	subs	r0, #24
 800119a:	2222      	movs	r2, #34	; 0x22
 800119c:	f005 fa2a 	bl	80065f4 <f_read>
 80011a0:	4603      	mov	r3, r0
 80011a2:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80011a6:	f102 020b 	add.w	r2, r2, #11
 80011aa:	7013      	strb	r3, [r2, #0]
    if(res != FR_OK)
 80011ac:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80011b0:	f103 030b 	add.w	r3, r3, #11
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00a      	beq.n	80011d0 <Image_display+0x90>
    {
    	printf("read failed");
 80011ba:	4888      	ldr	r0, [pc, #544]	; (80013dc <Image_display+0x29c>)
 80011bc:	f005 ff9a 	bl	80070f4 <iprintf>
        f_close(&file);
 80011c0:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80011c4:	3b18      	subs	r3, #24
 80011c6:	4618      	mov	r0, r3
 80011c8:	f005 fbf1 	bl	80069ae <f_close>
        return 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	e1d0      	b.n	8001572 <Image_display+0x432>
    }
    printf("Header value is%d",header[0]);
 80011d0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	4619      	mov	r1, r3
 80011d8:	4881      	ldr	r0, [pc, #516]	; (80013e0 <Image_display+0x2a0>)
 80011da:	f005 ff8b 	bl	80070f4 <iprintf>
    //Check if the file format is BMP
    if((header[0] != 0x42) || (header[1] != 0x4D))
 80011de:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b42      	cmp	r3, #66	; 0x42
 80011e6:	d104      	bne.n	80011f2 <Image_display+0xb2>
 80011e8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80011ec:	785b      	ldrb	r3, [r3, #1]
 80011ee:	2b4d      	cmp	r3, #77	; 0x4d
 80011f0:	d00a      	beq.n	8001208 <Image_display+0xc8>
    {
    	printf("Not a BITMAP file");
 80011f2:	487c      	ldr	r0, [pc, #496]	; (80013e4 <Image_display+0x2a4>)
 80011f4:	f005 ff7e 	bl	80070f4 <iprintf>
        f_close(&file);
 80011f8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80011fc:	3b18      	subs	r3, #24
 80011fe:	4618      	mov	r0, r3
 8001200:	f005 fbd5 	bl	80069ae <f_close>
        return 0;
 8001204:	2300      	movs	r3, #0
 8001206:	e1b4      	b.n	8001572 <Image_display+0x432>
    }
    //Obtain important information from the header
    uint32_t imageOffset = header[10] | (header[11] << 8) | (header[12] << 16) | (header[13] << 24);
 8001208:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800120c:	7a9b      	ldrb	r3, [r3, #10]
 800120e:	461a      	mov	r2, r3
 8001210:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001214:	7adb      	ldrb	r3, [r3, #11]
 8001216:	021b      	lsls	r3, r3, #8
 8001218:	431a      	orrs	r2, r3
 800121a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800121e:	7b1b      	ldrb	r3, [r3, #12]
 8001220:	041b      	lsls	r3, r3, #16
 8001222:	431a      	orrs	r2, r3
 8001224:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001228:	7b5b      	ldrb	r3, [r3, #13]
 800122a:	061b      	lsls	r3, r3, #24
 800122c:	4313      	orrs	r3, r2
 800122e:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8001232:	f102 0204 	add.w	r2, r2, #4
 8001236:	6013      	str	r3, [r2, #0]
    uint32_t imageWidth = header[18] | (header[19] << 8) | (header[20] << 16) | (header[21] << 24);
 8001238:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800123c:	7c9b      	ldrb	r3, [r3, #18]
 800123e:	461a      	mov	r2, r3
 8001240:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001244:	7cdb      	ldrb	r3, [r3, #19]
 8001246:	021b      	lsls	r3, r3, #8
 8001248:	431a      	orrs	r2, r3
 800124a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800124e:	7d1b      	ldrb	r3, [r3, #20]
 8001250:	041b      	lsls	r3, r3, #16
 8001252:	431a      	orrs	r2, r3
 8001254:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001258:	7d5b      	ldrb	r3, [r3, #21]
 800125a:	061b      	lsls	r3, r3, #24
 800125c:	4313      	orrs	r3, r2
 800125e:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8001262:	6013      	str	r3, [r2, #0]
    uint32_t imageHeight = header[22] | (header[23] << 8) | (header[24] << 16) | (header[25] << 24);
 8001264:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001268:	7d9b      	ldrb	r3, [r3, #22]
 800126a:	461a      	mov	r2, r3
 800126c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001270:	7ddb      	ldrb	r3, [r3, #23]
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	431a      	orrs	r2, r3
 8001276:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 800127a:	7e1b      	ldrb	r3, [r3, #24]
 800127c:	041b      	lsls	r3, r3, #16
 800127e:	431a      	orrs	r2, r3
 8001280:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001284:	7e5b      	ldrb	r3, [r3, #25]
 8001286:	061b      	lsls	r3, r3, #24
 8001288:	4313      	orrs	r3, r2
 800128a:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 800128e:	f102 021c 	add.w	r2, r2, #28
 8001292:	6013      	str	r3, [r2, #0]
    uint16_t imagePlanes = header[26] | (header[27] << 8);
 8001294:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001298:	7e9b      	ldrb	r3, [r3, #26]
 800129a:	b21a      	sxth	r2, r3
 800129c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80012a0:	7edb      	ldrb	r3, [r3, #27]
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	b21b      	sxth	r3, r3
 80012a6:	4313      	orrs	r3, r2
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80012ae:	f102 021a 	add.w	r2, r2, #26
 80012b2:	8013      	strh	r3, [r2, #0]
    uint16_t imageBitsPerPixel = header[28] | (header[29] << 8);
 80012b4:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80012b8:	7f1b      	ldrb	r3, [r3, #28]
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80012c0:	7f5b      	ldrb	r3, [r3, #29]
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	b21b      	sxth	r3, r3
 80012c6:	4313      	orrs	r3, r2
 80012c8:	b21b      	sxth	r3, r3
 80012ca:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80012ce:	f102 0218 	add.w	r2, r2, #24
 80012d2:	8013      	strh	r3, [r2, #0]
    //Check if the width and height of the image fits the LCD
    if((imageWidth != ILI9341_LCD_WIDTH) || (imageHeight != ILI9341_LCD_HEIGHT))
 80012d4:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2bf0      	cmp	r3, #240	; 0xf0
 80012dc:	d107      	bne.n	80012ee <Image_display+0x1ae>
 80012de:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80012e2:	f103 031c 	add.w	r3, r3, #28
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80012ec:	d007      	beq.n	80012fe <Image_display+0x1be>
    {
        f_close(&file);
 80012ee:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80012f2:	3b18      	subs	r3, #24
 80012f4:	4618      	mov	r0, r3
 80012f6:	f005 fb5a 	bl	80069ae <f_close>
        return 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e139      	b.n	8001572 <Image_display+0x432>
    }
    //Check if image planes is  1 and bits per pixel is  24
    if((imagePlanes != 1) || (imageBitsPerPixel != 24))
 80012fe:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8001302:	f103 031a 	add.w	r3, r3, #26
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d106      	bne.n	800131a <Image_display+0x1da>
 800130c:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8001310:	f103 0318 	add.w	r3, r3, #24
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	2b18      	cmp	r3, #24
 8001318:	d007      	beq.n	800132a <Image_display+0x1ea>
    {
        f_close(&file);
 800131a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800131e:	3b18      	subs	r3, #24
 8001320:	4618      	mov	r0, r3
 8001322:	f005 fb44 	bl	80069ae <f_close>
        return 0;
 8001326:	2300      	movs	r3, #0
 8001328:	e123      	b.n	8001572 <Image_display+0x432>
    }
    //Go to array place where image data is stored
    res = f_lseek(&file, imageOffset);
 800132a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800132e:	3b18      	subs	r3, #24
 8001330:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8001334:	f102 0204 	add.w	r2, r2, #4
 8001338:	6811      	ldr	r1, [r2, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f005 fb61 	bl	8006a02 <f_lseek>
 8001340:	4603      	mov	r3, r0
 8001342:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8001346:	f102 020b 	add.w	r2, r2, #11
 800134a:	7013      	strb	r3, [r2, #0]
    if(res != FR_OK)
 800134c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001350:	f103 030b 	add.w	r3, r3, #11
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d007      	beq.n	800136a <Image_display+0x22a>
    {

        f_close(&file);
 800135a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800135e:	3b18      	subs	r3, #24
 8001360:	4618      	mov	r0, r3
 8001362:	f005 fb24 	bl	80069ae <f_close>
        return 0;
 8001366:	2300      	movs	r3, #0
 8001368:	e103      	b.n	8001572 <Image_display+0x432>
    }

    // row size is aligned to 4 bytes
    uint8_t imageRow[(ILI9341_LCD_WIDTH * 3)];
    for(uint32_t y = 0; y < imageHeight; y++)
 800136a:	2300      	movs	r3, #0
 800136c:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8001370:	f102 0214 	add.w	r2, r2, #20
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e0d9      	b.n	800152c <Image_display+0x3ec>
    {
        uint32_t rowIdx = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800137e:	f102 0210 	add.w	r2, r2, #16
 8001382:	6013      	str	r3, [r2, #0]
        res = f_read(&file, imageRow, sizeof(imageRow), &data_read);
 8001384:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8001388:	3b1c      	subs	r3, #28
 800138a:	f107 0118 	add.w	r1, r7, #24
 800138e:	3910      	subs	r1, #16
 8001390:	f507 7046 	add.w	r0, r7, #792	; 0x318
 8001394:	3818      	subs	r0, #24
 8001396:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800139a:	f005 f92b 	bl	80065f4 <f_read>
 800139e:	4603      	mov	r3, r0
 80013a0:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80013a4:	f102 020b 	add.w	r2, r2, #11
 80013a8:	7013      	strb	r3, [r2, #0]
        if(res != FR_OK)
 80013aa:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80013ae:	f103 030b 	add.w	r3, r3, #11
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d007      	beq.n	80013c8 <Image_display+0x288>
        {
            f_close(&file);
 80013b8:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80013bc:	3b18      	subs	r3, #24
 80013be:	4618      	mov	r0, r3
 80013c0:	f005 faf5 	bl	80069ae <f_close>
            return 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	e0d4      	b.n	8001572 <Image_display+0x432>
        }

        for(uint32_t x = 0; x < imageWidth; x++)
 80013c8:	2300      	movs	r3, #0
 80013ca:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80013ce:	f102 020c 	add.w	r2, r2, #12
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	e094      	b.n	8001500 <Image_display+0x3c0>
 80013d6:	bf00      	nop
 80013d8:	08007fb8 	.word	0x08007fb8
 80013dc:	08007fd0 	.word	0x08007fd0
 80013e0:	08007fdc 	.word	0x08007fdc
 80013e4:	08007ff0 	.word	0x08007ff0
        {
            uint8_t blue = imageRow[rowIdx++];
 80013e8:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80013ec:	f103 0310 	add.w	r3, r3, #16
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	1c53      	adds	r3, r2, #1
 80013f4:	f507 519a 	add.w	r1, r7, #4928	; 0x1340
 80013f8:	f101 0110 	add.w	r1, r1, #16
 80013fc:	600b      	str	r3, [r1, #0]
 80013fe:	f107 0318 	add.w	r3, r7, #24
 8001402:	3b10      	subs	r3, #16
 8001404:	5c9b      	ldrb	r3, [r3, r2]
 8001406:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 800140a:	f102 0217 	add.w	r2, r2, #23
 800140e:	7013      	strb	r3, [r2, #0]
            uint8_t green = imageRow[rowIdx++];
 8001410:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001414:	f103 0310 	add.w	r3, r3, #16
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	1c53      	adds	r3, r2, #1
 800141c:	f507 519a 	add.w	r1, r7, #4928	; 0x1340
 8001420:	f101 0110 	add.w	r1, r1, #16
 8001424:	600b      	str	r3, [r1, #0]
 8001426:	f107 0318 	add.w	r3, r7, #24
 800142a:	3b10      	subs	r3, #16
 800142c:	5c9b      	ldrb	r3, [r3, r2]
 800142e:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8001432:	f102 0216 	add.w	r2, r2, #22
 8001436:	7013      	strb	r3, [r2, #0]
            uint8_t red = imageRow[rowIdx++];
 8001438:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800143c:	f103 0310 	add.w	r3, r3, #16
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	1c53      	adds	r3, r2, #1
 8001444:	f507 519a 	add.w	r1, r7, #4928	; 0x1340
 8001448:	f101 0110 	add.w	r1, r1, #16
 800144c:	600b      	str	r3, [r1, #0]
 800144e:	f107 0318 	add.w	r3, r7, #24
 8001452:	3b10      	subs	r3, #16
 8001454:	5c9b      	ldrb	r3, [r3, r2]
 8001456:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 800145a:	f102 0215 	add.w	r2, r2, #21
 800145e:	7013      	strb	r3, [r2, #0]
            //Converting to 565 format
            uint16_t color565 = (((red & 0xF8) << 8) | ((green & 0xFC) << 3) | ((blue & 0xF8) >> 3));
 8001460:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8001464:	f103 0315 	add.w	r3, r3, #21
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	b21b      	sxth	r3, r3
 800146e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001472:	f023 0307 	bic.w	r3, r3, #7
 8001476:	b21a      	sxth	r2, r3
 8001478:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 800147c:	f103 0316 	add.w	r3, r3, #22
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	b21b      	sxth	r3, r3
 8001486:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800148a:	b21b      	sxth	r3, r3
 800148c:	4313      	orrs	r3, r2
 800148e:	b21a      	sxth	r2, r3
 8001490:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8001494:	f103 0317 	add.w	r3, r3, #23
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	08db      	lsrs	r3, r3, #3
 800149c:	b2db      	uxtb	r3, r3
 800149e:	b21b      	sxth	r3, r3
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80014a8:	f102 0212 	add.w	r2, r2, #18
 80014ac:	8013      	strh	r3, [r2, #0]
            ILI9341_write_Pixel(x, imageHeight - y - 1, color565);
 80014ae:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80014b2:	f103 030c 	add.w	r3, r3, #12
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	b298      	uxth	r0, r3
 80014ba:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80014be:	f103 031c 	add.w	r3, r3, #28
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80014ca:	f103 0314 	add.w	r3, r3, #20
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	3b01      	subs	r3, #1
 80014d8:	b29b      	uxth	r3, r3
 80014da:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80014de:	f102 0212 	add.w	r2, r2, #18
 80014e2:	8812      	ldrh	r2, [r2, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	f7ff fe11 	bl	800110c <ILI9341_write_Pixel>
        for(uint32_t x = 0; x < imageWidth; x++)
 80014ea:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80014ee:	f103 030c 	add.w	r3, r3, #12
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	3301      	adds	r3, #1
 80014f6:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80014fa:	f102 020c 	add.w	r2, r2, #12
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001504:	f103 030c 	add.w	r3, r3, #12
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	f4ff af69 	bcc.w	80013e8 <Image_display+0x2a8>
    for(uint32_t y = 0; y < imageHeight; y++)
 8001516:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800151a:	f103 0314 	add.w	r3, r3, #20
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	3301      	adds	r3, #1
 8001522:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8001526:	f102 0214 	add.w	r2, r2, #20
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001530:	f103 0314 	add.w	r3, r3, #20
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 800153a:	f103 031c 	add.w	r3, r3, #28
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	f4ff af19 	bcc.w	8001378 <Image_display+0x238>
        }
    }

    res = f_close(&file);
 8001546:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800154a:	3b18      	subs	r3, #24
 800154c:	4618      	mov	r0, r3
 800154e:	f005 fa2e 	bl	80069ae <f_close>
 8001552:	4603      	mov	r3, r0
 8001554:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8001558:	f102 020b 	add.w	r2, r2, #11
 800155c:	7013      	strb	r3, [r2, #0]
    if(res != FR_OK) {
 800155e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8001562:	f103 030b 	add.w	r3, r3, #11
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <Image_display+0x430>
        return 0;
 800156c:	2300      	movs	r3, #0
 800156e:	e000      	b.n	8001572 <Image_display+0x432>
    }

    return 0;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	f507 579a 	add.w	r7, r7, #4928	; 0x1340
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop

08001580 <main>:
* @input param : void
* @return: int
*******************************************************************************/

int main(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0

	int i = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
    int flag=0;//used to go to the next picture
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
	int flag1=0;//used to revert back to the starting picture
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001592:	f000 fcb7 	bl	8001f04 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 8001596:	f000 f8d7 	bl	8001748 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800159a:	f000 f9c9 	bl	8001930 <MX_GPIO_Init>
  MX_DMA_Init();
 800159e:	f000 f9a7 	bl	80018f0 <MX_DMA_Init>
  MX_SPI1_Init();
 80015a2:	f000 f939 	bl	8001818 <MX_SPI1_Init>
  MX_SPI2_Init();
 80015a6:	f000 f96d 	bl	8001884 <MX_SPI2_Init>
  MX_FATFS_Init();
 80015aa:	f002 fbaf 	bl	8003d0c <MX_FATFS_Init>
  //Start the ILI9341 initialization
  ili9341_start();
 80015ae:	f7ff fc65 	bl	8000e7c <ili9341_start>
  //Set the address position from where the data is to be written on LCD
  setaddress(0,0,LCD_WIDTH-1,LCD_HEIGHT-1);
 80015b2:	f240 133f 	movw	r3, #319	; 0x13f
 80015b6:	22ef      	movs	r2, #239	; 0xef
 80015b8:	2100      	movs	r1, #0
 80015ba:	2000      	movs	r0, #0
 80015bc:	f7ff fd52 	bl	8001064 <setaddress>
     FRESULT res = f_mount(&fs, "", 0);//mount SD card
 80015c0:	2200      	movs	r2, #0
 80015c2:	4956      	ldr	r1, [pc, #344]	; (800171c <main+0x19c>)
 80015c4:	4856      	ldr	r0, [pc, #344]	; (8001720 <main+0x1a0>)
 80015c6:	f004 fe03 	bl	80061d0 <f_mount>
 80015ca:	4603      	mov	r3, r0
 80015cc:	70fb      	strb	r3, [r7, #3]
     if(res != FR_OK)
 80015ce:	78fb      	ldrb	r3, [r7, #3]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d004      	beq.n	80015de <main+0x5e>
     {
    	 printf("Mounting_Successful");
 80015d4:	4853      	ldr	r0, [pc, #332]	; (8001724 <main+0x1a4>)
 80015d6:	f005 fd8d 	bl	80070f4 <iprintf>
         return 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	e099      	b.n	8001712 <main+0x192>
     }
     while (1)
     {
    	 //Check if PinB1 is set
    		 if( HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1 )== GPIO_PIN_SET)
 80015de:	2102      	movs	r1, #2
 80015e0:	4851      	ldr	r0, [pc, #324]	; (8001728 <main+0x1a8>)
 80015e2:	f001 fabd 	bl	8002b60 <HAL_GPIO_ReadPin>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d109      	bne.n	8001600 <main+0x80>
    		 {
    			 if(flag==0)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d106      	bne.n	8001600 <main+0x80>
    			 {
    				 	 i++;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	3301      	adds	r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
    				 	 flag=1;
 80015f8:	2301      	movs	r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
    				 	 flag1=0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	607b      	str	r3, [r7, #4]
    	  	     }
    		 }
    		 //check if PINE7 is set
    		 if( HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7 )== GPIO_PIN_SET)
 8001600:	2180      	movs	r1, #128	; 0x80
 8001602:	484a      	ldr	r0, [pc, #296]	; (800172c <main+0x1ac>)
 8001604:	f001 faac 	bl	8002b60 <HAL_GPIO_ReadPin>
 8001608:	4603      	mov	r3, r0
 800160a:	2b01      	cmp	r3, #1
 800160c:	d109      	bne.n	8001622 <main+0xa2>
    		  {
    			 if(flag==0)
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d106      	bne.n	8001622 <main+0xa2>
    			 {
    		 			 i--;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	3b01      	subs	r3, #1
 8001618:	60fb      	str	r3, [r7, #12]
    		 			 flag=1;
 800161a:	2301      	movs	r3, #1
 800161c:	60bb      	str	r3, [r7, #8]
    		 			 flag1=0;
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
    		     }
    		  }
    		 if(i == 1)//Based on the push button press the data is changed
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d10d      	bne.n	8001644 <main+0xc4>
    		 {
                if(flag1==0)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10a      	bne.n	8001644 <main+0xc4>
                {
                	Image_display("design.bmp");
 800162e:	4840      	ldr	r0, [pc, #256]	; (8001730 <main+0x1b0>)
 8001630:	f7ff fd86 	bl	8001140 <Image_display>
    		        HAL_Delay(1000);
 8001634:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001638:	f000 fcd6 	bl	8001fe8 <HAL_Delay>
    		        flag=0;
 800163c:	2300      	movs	r3, #0
 800163e:	60bb      	str	r3, [r7, #8]
    		        flag1=1;
 8001640:	2301      	movs	r3, #1
 8001642:	607b      	str	r3, [r7, #4]
    		    }
    		 }
    		 if(i == 2)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d10d      	bne.n	8001666 <main+0xe6>
    		 {
    			 if(flag1==0)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10a      	bne.n	8001666 <main+0xe6>
    			 {
    				 Image_display("cartoon.bmp");
 8001650:	4838      	ldr	r0, [pc, #224]	; (8001734 <main+0x1b4>)
 8001652:	f7ff fd75 	bl	8001140 <Image_display>
    				 HAL_Delay(1000);
 8001656:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800165a:	f000 fcc5 	bl	8001fe8 <HAL_Delay>
    				 flag=0;
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
    				 flag1=1;
 8001662:	2301      	movs	r3, #1
 8001664:	607b      	str	r3, [r7, #4]
    			 }
    		 }
    		 if(i == 3)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2b03      	cmp	r3, #3
 800166a:	d10d      	bne.n	8001688 <main+0x108>
    		 {
    			 if(flag1==0)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10a      	bne.n	8001688 <main+0x108>
    			 {
    				 Image_display("purpleflowers.bmp");
 8001672:	4831      	ldr	r0, [pc, #196]	; (8001738 <main+0x1b8>)
 8001674:	f7ff fd64 	bl	8001140 <Image_display>
    				 HAL_Delay(1000);
 8001678:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800167c:	f000 fcb4 	bl	8001fe8 <HAL_Delay>
    				 flag=0;
 8001680:	2300      	movs	r3, #0
 8001682:	60bb      	str	r3, [r7, #8]
    				 flag1=1;
 8001684:	2301      	movs	r3, #1
 8001686:	607b      	str	r3, [r7, #4]
    			 }
    		 }
    		 if(i == 4)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2b04      	cmp	r3, #4
 800168c:	d10d      	bne.n	80016aa <main+0x12a>
    		 {
    			 if(flag1==0)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10a      	bne.n	80016aa <main+0x12a>
    			 {
    				 Image_display("rajesh.bmp");
 8001694:	4829      	ldr	r0, [pc, #164]	; (800173c <main+0x1bc>)
 8001696:	f7ff fd53 	bl	8001140 <Image_display>
    		  HAL_Delay(1000);
 800169a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800169e:	f000 fca3 	bl	8001fe8 <HAL_Delay>
    		  flag=0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
    		  flag1=1;
 80016a6:	2301      	movs	r3, #1
 80016a8:	607b      	str	r3, [r7, #4]
    			 }
    		 }
    		 if(i == 5)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2b05      	cmp	r3, #5
 80016ae:	d10d      	bne.n	80016cc <main+0x14c>
    		 {
    			 if(flag1==0)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10a      	bne.n	80016cc <main+0x14c>
    			 {
    				 Image_display("sriraj.bmp");
 80016b6:	4822      	ldr	r0, [pc, #136]	; (8001740 <main+0x1c0>)
 80016b8:	f7ff fd42 	bl	8001140 <Image_display>
    		  HAL_Delay(1000);
 80016bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016c0:	f000 fc92 	bl	8001fe8 <HAL_Delay>
    		  flag=0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
    		  flag1=1;
 80016c8:	2301      	movs	r3, #1
 80016ca:	607b      	str	r3, [r7, #4]
    			 }
    		 }
    		 if(i == 6)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2b06      	cmp	r3, #6
 80016d0:	d10f      	bne.n	80016f2 <main+0x172>
    		 {
    			 if(flag1==0)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d10c      	bne.n	80016f2 <main+0x172>
    			{
    				 Image_display("gokucorrect.bmp");
 80016d8:	481a      	ldr	r0, [pc, #104]	; (8001744 <main+0x1c4>)
 80016da:	f7ff fd31 	bl	8001140 <Image_display>
    		  HAL_Delay(1000);
 80016de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016e2:	f000 fc81 	bl	8001fe8 <HAL_Delay>
    		  flag=0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
    		  flag1=1;
 80016ea:	2301      	movs	r3, #1
 80016ec:	607b      	str	r3, [r7, #4]
    		  i=0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
    		 }
    		 }
    		 if(i<=0)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	dc03      	bgt.n	8001700 <main+0x180>
    		 {
    			 i=0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
    			 flag=0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]

    		 }
    		 if(i>=6)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b05      	cmp	r3, #5
 8001704:	f77f af6b 	ble.w	80015de <main+0x5e>
    		 {
    			 i=0;
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]
    			 flag=0;
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
    		 if( HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1 )== GPIO_PIN_SET)
 8001710:	e765      	b.n	80015de <main+0x5e>
    		 }
  /* USER CODE END 3 */
     }
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	08008004 	.word	0x08008004
 8001720:	20000460 	.word	0x20000460
 8001724:	08008008 	.word	0x08008008
 8001728:	40020400 	.word	0x40020400
 800172c:	40021000 	.word	0x40021000
 8001730:	0800801c 	.word	0x0800801c
 8001734:	08008028 	.word	0x08008028
 8001738:	08008034 	.word	0x08008034
 800173c:	08008048 	.word	0x08008048
 8001740:	08008054 	.word	0x08008054
 8001744:	08008060 	.word	0x08008060

08001748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b094      	sub	sp, #80	; 0x50
 800174c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800174e:	f107 0320 	add.w	r3, r7, #32
 8001752:	2230      	movs	r2, #48	; 0x30
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f005 fcc4 	bl	80070e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800175c:	f107 030c 	add.w	r3, r7, #12
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800176c:	2300      	movs	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	4b27      	ldr	r3, [pc, #156]	; (8001810 <SystemClock_Config+0xc8>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	4a26      	ldr	r2, [pc, #152]	; (8001810 <SystemClock_Config+0xc8>)
 8001776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800177a:	6413      	str	r3, [r2, #64]	; 0x40
 800177c:	4b24      	ldr	r3, [pc, #144]	; (8001810 <SystemClock_Config+0xc8>)
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001788:	2300      	movs	r3, #0
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	4b21      	ldr	r3, [pc, #132]	; (8001814 <SystemClock_Config+0xcc>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a20      	ldr	r2, [pc, #128]	; (8001814 <SystemClock_Config+0xcc>)
 8001792:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <SystemClock_Config+0xcc>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017a4:	2301      	movs	r3, #1
 80017a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ae:	2302      	movs	r3, #2
 80017b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017b8:	2304      	movs	r3, #4
 80017ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80017bc:	2390      	movs	r3, #144	; 0x90
 80017be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017c0:	2304      	movs	r3, #4
 80017c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017c4:	2304      	movs	r3, #4
 80017c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c8:	f107 0320 	add.w	r3, r7, #32
 80017cc:	4618      	mov	r0, r3
 80017ce:	f001 f9f9 	bl	8002bc4 <HAL_RCC_OscConfig>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017d8:	f000 f948 	bl	8001a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017dc:	230f      	movs	r3, #15
 80017de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017e0:	2302      	movs	r3, #2
 80017e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017f2:	f107 030c 	add.w	r3, r7, #12
 80017f6:	2102      	movs	r1, #2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f001 fc5b 	bl	80030b4 <HAL_RCC_ClockConfig>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001804:	f000 f932 	bl	8001a6c <Error_Handler>
  }
}
 8001808:	bf00      	nop
 800180a:	3750      	adds	r7, #80	; 0x50
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40023800 	.word	0x40023800
 8001814:	40007000 	.word	0x40007000

08001818 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800181c:	4b17      	ldr	r3, [pc, #92]	; (800187c <MX_SPI1_Init+0x64>)
 800181e:	4a18      	ldr	r2, [pc, #96]	; (8001880 <MX_SPI1_Init+0x68>)
 8001820:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <MX_SPI1_Init+0x64>)
 8001824:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001828:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800182a:	4b14      	ldr	r3, [pc, #80]	; (800187c <MX_SPI1_Init+0x64>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <MX_SPI1_Init+0x64>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001836:	4b11      	ldr	r3, [pc, #68]	; (800187c <MX_SPI1_Init+0x64>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <MX_SPI1_Init+0x64>)
 800183e:	2200      	movs	r2, #0
 8001840:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001842:	4b0e      	ldr	r3, [pc, #56]	; (800187c <MX_SPI1_Init+0x64>)
 8001844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001848:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <MX_SPI1_Init+0x64>)
 800184c:	2208      	movs	r2, #8
 800184e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001850:	4b0a      	ldr	r3, [pc, #40]	; (800187c <MX_SPI1_Init+0x64>)
 8001852:	2200      	movs	r2, #0
 8001854:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <MX_SPI1_Init+0x64>)
 8001858:	2200      	movs	r2, #0
 800185a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800185c:	4b07      	ldr	r3, [pc, #28]	; (800187c <MX_SPI1_Init+0x64>)
 800185e:	2200      	movs	r2, #0
 8001860:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <MX_SPI1_Init+0x64>)
 8001864:	220a      	movs	r2, #10
 8001866:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001868:	4804      	ldr	r0, [pc, #16]	; (800187c <MX_SPI1_Init+0x64>)
 800186a:	f001 fe0f 	bl	800348c <HAL_SPI_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001874:	f000 f8fa 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20002504 	.word	0x20002504
 8001880:	40013000 	.word	0x40013000

08001884 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001888:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <MX_SPI2_Init+0x64>)
 800188a:	4a18      	ldr	r2, [pc, #96]	; (80018ec <MX_SPI2_Init+0x68>)
 800188c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800188e:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <MX_SPI2_Init+0x64>)
 8001890:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001894:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001896:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <MX_SPI2_Init+0x64>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <MX_SPI2_Init+0x64>)
 800189e:	2200      	movs	r2, #0
 80018a0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_SPI2_Init+0x64>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <MX_SPI2_Init+0x64>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <MX_SPI2_Init+0x64>)
 80018b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018b4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <MX_SPI2_Init+0x64>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018bc:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <MX_SPI2_Init+0x64>)
 80018be:	2200      	movs	r2, #0
 80018c0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <MX_SPI2_Init+0x64>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018c8:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <MX_SPI2_Init+0x64>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <MX_SPI2_Init+0x64>)
 80018d0:	220a      	movs	r2, #10
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018d4:	4804      	ldr	r0, [pc, #16]	; (80018e8 <MX_SPI2_Init+0x64>)
 80018d6:	f001 fdd9 	bl	800348c <HAL_SPI_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80018e0:	f000 f8c4 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	200002f0 	.word	0x200002f0
 80018ec:	40003800 	.word	0x40003800

080018f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <MX_DMA_Init+0x3c>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a0b      	ldr	r2, [pc, #44]	; (800192c <MX_DMA_Init+0x3c>)
 8001900:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <MX_DMA_Init+0x3c>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	2100      	movs	r1, #0
 8001916:	203b      	movs	r0, #59	; 0x3b
 8001918:	f000 fc65 	bl	80021e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800191c:	203b      	movs	r0, #59	; 0x3b
 800191e:	f000 fc7e 	bl	800221e <HAL_NVIC_EnableIRQ>

}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800

08001930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08a      	sub	sp, #40	; 0x28
 8001934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
 8001944:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	4b43      	ldr	r3, [pc, #268]	; (8001a58 <MX_GPIO_Init+0x128>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a42      	ldr	r2, [pc, #264]	; (8001a58 <MX_GPIO_Init+0x128>)
 8001950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b40      	ldr	r3, [pc, #256]	; (8001a58 <MX_GPIO_Init+0x128>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	4b3c      	ldr	r3, [pc, #240]	; (8001a58 <MX_GPIO_Init+0x128>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a3b      	ldr	r2, [pc, #236]	; (8001a58 <MX_GPIO_Init+0x128>)
 800196c:	f043 0304 	orr.w	r3, r3, #4
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b39      	ldr	r3, [pc, #228]	; (8001a58 <MX_GPIO_Init+0x128>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	4b35      	ldr	r3, [pc, #212]	; (8001a58 <MX_GPIO_Init+0x128>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a34      	ldr	r2, [pc, #208]	; (8001a58 <MX_GPIO_Init+0x128>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b32      	ldr	r3, [pc, #200]	; (8001a58 <MX_GPIO_Init+0x128>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	4b2e      	ldr	r3, [pc, #184]	; (8001a58 <MX_GPIO_Init+0x128>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a2d      	ldr	r2, [pc, #180]	; (8001a58 <MX_GPIO_Init+0x128>)
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <MX_GPIO_Init+0x128>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	603b      	str	r3, [r7, #0]
 80019ba:	4b27      	ldr	r3, [pc, #156]	; (8001a58 <MX_GPIO_Init+0x128>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a26      	ldr	r2, [pc, #152]	; (8001a58 <MX_GPIO_Init+0x128>)
 80019c0:	f043 0310 	orr.w	r3, r3, #16
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <MX_GPIO_Init+0x128>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0310 	and.w	r3, r3, #16
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_CS_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2132      	movs	r1, #50	; 0x32
 80019d6:	4821      	ldr	r0, [pc, #132]	; (8001a5c <MX_GPIO_Init+0x12c>)
 80019d8:	f001 f8da 	bl	8002b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80019dc:	2200      	movs	r2, #0
 80019de:	2110      	movs	r1, #16
 80019e0:	481f      	ldr	r0, [pc, #124]	; (8001a60 <MX_GPIO_Init+0x130>)
 80019e2:	f001 f8d5 	bl	8002b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SD_CS_Pin PC4 PC5 */
  GPIO_InitStruct.Pin = SD_CS_Pin|GPIO_PIN_4|GPIO_PIN_5;
 80019e6:	2332      	movs	r3, #50	; 0x32
 80019e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ea:	2301      	movs	r3, #1
 80019ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4619      	mov	r1, r3
 80019fc:	4817      	ldr	r0, [pc, #92]	; (8001a5c <MX_GPIO_Init+0x12c>)
 80019fe:	f000 ff13 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a02:	2310      	movs	r3, #16
 8001a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a06:	2301      	movs	r3, #1
 8001a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4619      	mov	r1, r3
 8001a18:	4811      	ldr	r0, [pc, #68]	; (8001a60 <MX_GPIO_Init+0x130>)
 8001a1a:	f000 ff05 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480c      	ldr	r0, [pc, #48]	; (8001a64 <MX_GPIO_Init+0x134>)
 8001a32:	f000 fef9 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a42:	f107 0314 	add.w	r3, r7, #20
 8001a46:	4619      	mov	r1, r3
 8001a48:	4807      	ldr	r0, [pc, #28]	; (8001a68 <MX_GPIO_Init+0x138>)
 8001a4a:	f000 feed 	bl	8002828 <HAL_GPIO_Init>

}
 8001a4e:	bf00      	nop
 8001a50:	3728      	adds	r7, #40	; 0x28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40020800 	.word	0x40020800
 8001a60:	40020000 	.word	0x40020000
 8001a64:	40020400 	.word	0x40020400
 8001a68:	40021000 	.word	0x40021000

08001a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a70:	b672      	cpsid	i
}
 8001a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <Error_Handler+0x8>
	...

08001a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <HAL_MspInit+0x4c>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	4a0f      	ldr	r2, [pc, #60]	; (8001ac4 <HAL_MspInit+0x4c>)
 8001a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <HAL_MspInit+0x4c>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	603b      	str	r3, [r7, #0]
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_MspInit+0x4c>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	4a08      	ldr	r2, [pc, #32]	; (8001ac4 <HAL_MspInit+0x4c>)
 8001aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_MspInit+0x4c>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800

08001ac8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08c      	sub	sp, #48	; 0x30
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a59      	ldr	r2, [pc, #356]	; (8001c4c <HAL_SPI_MspInit+0x184>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d15b      	bne.n	8001ba2 <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
 8001aee:	4b58      	ldr	r3, [pc, #352]	; (8001c50 <HAL_SPI_MspInit+0x188>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	4a57      	ldr	r2, [pc, #348]	; (8001c50 <HAL_SPI_MspInit+0x188>)
 8001af4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001af8:	6453      	str	r3, [r2, #68]	; 0x44
 8001afa:	4b55      	ldr	r3, [pc, #340]	; (8001c50 <HAL_SPI_MspInit+0x188>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b02:	61bb      	str	r3, [r7, #24]
 8001b04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	4b51      	ldr	r3, [pc, #324]	; (8001c50 <HAL_SPI_MspInit+0x188>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a50      	ldr	r2, [pc, #320]	; (8001c50 <HAL_SPI_MspInit+0x188>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b4e      	ldr	r3, [pc, #312]	; (8001c50 <HAL_SPI_MspInit+0x188>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b22:	23e0      	movs	r3, #224	; 0xe0
 8001b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b32:	2305      	movs	r3, #5
 8001b34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	f107 031c 	add.w	r3, r7, #28
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4845      	ldr	r0, [pc, #276]	; (8001c54 <HAL_SPI_MspInit+0x18c>)
 8001b3e:	f000 fe73 	bl	8002828 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001b42:	4b45      	ldr	r3, [pc, #276]	; (8001c58 <HAL_SPI_MspInit+0x190>)
 8001b44:	4a45      	ldr	r2, [pc, #276]	; (8001c5c <HAL_SPI_MspInit+0x194>)
 8001b46:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001b48:	4b43      	ldr	r3, [pc, #268]	; (8001c58 <HAL_SPI_MspInit+0x190>)
 8001b4a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001b4e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b50:	4b41      	ldr	r3, [pc, #260]	; (8001c58 <HAL_SPI_MspInit+0x190>)
 8001b52:	2240      	movs	r2, #64	; 0x40
 8001b54:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b56:	4b40      	ldr	r3, [pc, #256]	; (8001c58 <HAL_SPI_MspInit+0x190>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b5c:	4b3e      	ldr	r3, [pc, #248]	; (8001c58 <HAL_SPI_MspInit+0x190>)
 8001b5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b62:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b64:	4b3c      	ldr	r3, [pc, #240]	; (8001c58 <HAL_SPI_MspInit+0x190>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b6a:	4b3b      	ldr	r3, [pc, #236]	; (8001c58 <HAL_SPI_MspInit+0x190>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001b70:	4b39      	ldr	r3, [pc, #228]	; (8001c58 <HAL_SPI_MspInit+0x190>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b76:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <HAL_SPI_MspInit+0x190>)
 8001b78:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b7c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b7e:	4b36      	ldr	r3, [pc, #216]	; (8001c58 <HAL_SPI_MspInit+0x190>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001b84:	4834      	ldr	r0, [pc, #208]	; (8001c58 <HAL_SPI_MspInit+0x190>)
 8001b86:	f000 fb65 	bl	8002254 <HAL_DMA_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001b90:	f7ff ff6c 	bl	8001a6c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a30      	ldr	r2, [pc, #192]	; (8001c58 <HAL_SPI_MspInit+0x190>)
 8001b98:	649a      	str	r2, [r3, #72]	; 0x48
 8001b9a:	4a2f      	ldr	r2, [pc, #188]	; (8001c58 <HAL_SPI_MspInit+0x190>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ba0:	e04f      	b.n	8001c42 <HAL_SPI_MspInit+0x17a>
  else if(hspi->Instance==SPI2)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a2e      	ldr	r2, [pc, #184]	; (8001c60 <HAL_SPI_MspInit+0x198>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d14a      	bne.n	8001c42 <HAL_SPI_MspInit+0x17a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <HAL_SPI_MspInit+0x188>)
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	4a26      	ldr	r2, [pc, #152]	; (8001c50 <HAL_SPI_MspInit+0x188>)
 8001bb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bba:	6413      	str	r3, [r2, #64]	; 0x40
 8001bbc:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <HAL_SPI_MspInit+0x188>)
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	4b20      	ldr	r3, [pc, #128]	; (8001c50 <HAL_SPI_MspInit+0x188>)
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd0:	4a1f      	ldr	r2, [pc, #124]	; (8001c50 <HAL_SPI_MspInit+0x188>)
 8001bd2:	f043 0304 	orr.w	r3, r3, #4
 8001bd6:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd8:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <HAL_SPI_MspInit+0x188>)
 8001bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be4:	2300      	movs	r3, #0
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <HAL_SPI_MspInit+0x188>)
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	4a18      	ldr	r2, [pc, #96]	; (8001c50 <HAL_SPI_MspInit+0x188>)
 8001bee:	f043 0302 	orr.w	r3, r3, #2
 8001bf2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf4:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <HAL_SPI_MspInit+0x188>)
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c00:	230c      	movs	r3, #12
 8001c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c10:	2305      	movs	r3, #5
 8001c12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4812      	ldr	r0, [pc, #72]	; (8001c64 <HAL_SPI_MspInit+0x19c>)
 8001c1c:	f000 fe04 	bl	8002828 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c32:	2305      	movs	r3, #5
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c36:	f107 031c 	add.w	r3, r7, #28
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	480a      	ldr	r0, [pc, #40]	; (8001c68 <HAL_SPI_MspInit+0x1a0>)
 8001c3e:	f000 fdf3 	bl	8002828 <HAL_GPIO_Init>
}
 8001c42:	bf00      	nop
 8001c44:	3730      	adds	r7, #48	; 0x30
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40013000 	.word	0x40013000
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40020000 	.word	0x40020000
 8001c58:	20002560 	.word	0x20002560
 8001c5c:	40026458 	.word	0x40026458
 8001c60:	40003800 	.word	0x40003800
 8001c64:	40020800 	.word	0x40020800
 8001c68:	40020400 	.word	0x40020400

08001c6c <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;
void SDTimer_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001c70:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <SDTimer_Handler+0x40>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d006      	beq.n	8001c88 <SDTimer_Handler+0x1c>
    Timer1--;
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <SDTimer_Handler+0x40>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	3b01      	subs	r3, #1
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <SDTimer_Handler+0x40>)
 8001c86:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <SDTimer_Handler+0x44>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d006      	beq.n	8001ca0 <SDTimer_Handler+0x34>
	  Timer2--;
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <SDTimer_Handler+0x44>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <SDTimer_Handler+0x44>)
 8001c9e:	701a      	strb	r2, [r3, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	200025c1 	.word	0x200025c1
 8001cb0:	200025c0 	.word	0x200025c0

08001cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <NMI_Handler+0x4>

08001cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <HardFault_Handler+0x4>

08001cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <MemManage_Handler+0x4>

08001cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <BusFault_Handler+0x4>

08001ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <UsageFault_Handler+0x4>

08001cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001d00:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <SysTick_Handler+0x30>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	3301      	adds	r3, #1
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <SysTick_Handler+0x30>)
 8001d0c:	701a      	strb	r2, [r3, #0]
		  if(FatFsCnt >= 10)
 8001d0e:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <SysTick_Handler+0x30>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b09      	cmp	r3, #9
 8001d16:	d904      	bls.n	8001d22 <SysTick_Handler+0x26>
		  {
		    FatFsCnt = 0;
 8001d18:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <SysTick_Handler+0x30>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
		    SDTimer_Handler();
 8001d1e:	f7ff ffa5 	bl	8001c6c <SDTimer_Handler>
		  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d22:	f000 f941 	bl	8001fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200000a6 	.word	0x200000a6

08001d30 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <DMA2_Stream3_IRQHandler+0x10>)
 8001d36:	f000 fb3b 	bl	80023b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20002560 	.word	0x20002560

08001d44 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	e00a      	b.n	8001d6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d56:	f3af 8000 	nop.w
 8001d5a:	4601      	mov	r1, r0
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	60ba      	str	r2, [r7, #8]
 8001d62:	b2ca      	uxtb	r2, r1
 8001d64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	dbf0      	blt.n	8001d56 <_read+0x12>
  }

  return len;
 8001d74:	687b      	ldr	r3, [r7, #4]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	e009      	b.n	8001da4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	60ba      	str	r2, [r7, #8]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	3301      	adds	r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	dbf1      	blt.n	8001d90 <_write+0x12>
  }
  return len;
 8001dac:	687b      	ldr	r3, [r7, #4]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <_close>:

int _close(int file)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dde:	605a      	str	r2, [r3, #4]
  return 0;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <_isatty>:

int _isatty(int file)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001df6:	2301      	movs	r3, #1
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e28:	4a14      	ldr	r2, [pc, #80]	; (8001e7c <_sbrk+0x5c>)
 8001e2a:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <_sbrk+0x60>)
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e34:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <_sbrk+0x64>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d102      	bne.n	8001e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e3c:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <_sbrk+0x64>)
 8001e3e:	4a12      	ldr	r2, [pc, #72]	; (8001e88 <_sbrk+0x68>)
 8001e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <_sbrk+0x64>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d207      	bcs.n	8001e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e50:	f005 f91e 	bl	8007090 <__errno>
 8001e54:	4603      	mov	r3, r0
 8001e56:	220c      	movs	r2, #12
 8001e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5e:	e009      	b.n	8001e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e60:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <_sbrk+0x64>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e66:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <_sbrk+0x64>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	4a05      	ldr	r2, [pc, #20]	; (8001e84 <_sbrk+0x64>)
 8001e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e72:	68fb      	ldr	r3, [r7, #12]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20020000 	.word	0x20020000
 8001e80:	00000400 	.word	0x00000400
 8001e84:	200000a8 	.word	0x200000a8
 8001e88:	20004648 	.word	0x20004648

08001e8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <SystemInit+0x20>)
 8001e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e96:	4a05      	ldr	r2, [pc, #20]	; (8001eac <SystemInit+0x20>)
 8001e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <Reset_Handler>:
 8001eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ee8 <LoopFillZerobss+0x12>
 8001eb4:	480d      	ldr	r0, [pc, #52]	; (8001eec <LoopFillZerobss+0x16>)
 8001eb6:	490e      	ldr	r1, [pc, #56]	; (8001ef0 <LoopFillZerobss+0x1a>)
 8001eb8:	4a0e      	ldr	r2, [pc, #56]	; (8001ef4 <LoopFillZerobss+0x1e>)
 8001eba:	2300      	movs	r3, #0
 8001ebc:	e002      	b.n	8001ec4 <LoopCopyDataInit>

08001ebe <CopyDataInit>:
 8001ebe:	58d4      	ldr	r4, [r2, r3]
 8001ec0:	50c4      	str	r4, [r0, r3]
 8001ec2:	3304      	adds	r3, #4

08001ec4 <LoopCopyDataInit>:
 8001ec4:	18c4      	adds	r4, r0, r3
 8001ec6:	428c      	cmp	r4, r1
 8001ec8:	d3f9      	bcc.n	8001ebe <CopyDataInit>
 8001eca:	4a0b      	ldr	r2, [pc, #44]	; (8001ef8 <LoopFillZerobss+0x22>)
 8001ecc:	4c0b      	ldr	r4, [pc, #44]	; (8001efc <LoopFillZerobss+0x26>)
 8001ece:	2300      	movs	r3, #0
 8001ed0:	e001      	b.n	8001ed6 <LoopFillZerobss>

08001ed2 <FillZerobss>:
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	3204      	adds	r2, #4

08001ed6 <LoopFillZerobss>:
 8001ed6:	42a2      	cmp	r2, r4
 8001ed8:	d3fb      	bcc.n	8001ed2 <FillZerobss>
 8001eda:	f7ff ffd7 	bl	8001e8c <SystemInit>
 8001ede:	f005 f8dd 	bl	800709c <__libc_init_array>
 8001ee2:	f7ff fb4d 	bl	8001580 <main>
 8001ee6:	4770      	bx	lr
 8001ee8:	20020000 	.word	0x20020000
 8001eec:	20000000 	.word	0x20000000
 8001ef0:	20000088 	.word	0x20000088
 8001ef4:	080085b8 	.word	0x080085b8
 8001ef8:	20000088 	.word	0x20000088
 8001efc:	20004644 	.word	0x20004644

08001f00 <ADC_IRQHandler>:
 8001f00:	e7fe      	b.n	8001f00 <ADC_IRQHandler>
	...

08001f04 <HAL_Init>:
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <HAL_Init+0x40>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0d      	ldr	r2, [pc, #52]	; (8001f44 <HAL_Init+0x40>)
 8001f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_Init+0x40>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <HAL_Init+0x40>)
 8001f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <HAL_Init+0x40>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a07      	ldr	r2, [pc, #28]	; (8001f44 <HAL_Init+0x40>)
 8001f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	2003      	movs	r0, #3
 8001f2e:	f000 f94f 	bl	80021d0 <HAL_NVIC_SetPriorityGrouping>
 8001f32:	200f      	movs	r0, #15
 8001f34:	f000 f808 	bl	8001f48 <HAL_InitTick>
 8001f38:	f7ff fd9e 	bl	8001a78 <HAL_MspInit>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40023c00 	.word	0x40023c00

08001f48 <HAL_InitTick>:
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_InitTick+0x54>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <HAL_InitTick+0x58>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 f967 	bl	800223a <HAL_SYSTICK_Config>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_InitTick+0x2e>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e00e      	b.n	8001f94 <HAL_InitTick+0x4c>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b0f      	cmp	r3, #15
 8001f7a:	d80a      	bhi.n	8001f92 <HAL_InitTick+0x4a>
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295
 8001f84:	f000 f92f 	bl	80021e6 <HAL_NVIC_SetPriority>
 8001f88:	4a06      	ldr	r2, [pc, #24]	; (8001fa4 <HAL_InitTick+0x5c>)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	2300      	movs	r3, #0
 8001f90:	e000      	b.n	8001f94 <HAL_InitTick+0x4c>
 8001f92:	2301      	movs	r3, #1
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000004 	.word	0x20000004
 8001fa0:	2000000c 	.word	0x2000000c
 8001fa4:	20000008 	.word	0x20000008

08001fa8 <HAL_IncTick>:
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_IncTick+0x20>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_IncTick+0x24>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	4a04      	ldr	r2, [pc, #16]	; (8001fcc <HAL_IncTick+0x24>)
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	2000000c 	.word	0x2000000c
 8001fcc:	200000ac 	.word	0x200000ac

08001fd0 <HAL_GetTick>:
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	4b03      	ldr	r3, [pc, #12]	; (8001fe4 <HAL_GetTick+0x14>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	200000ac 	.word	0x200000ac

08001fe8 <HAL_Delay>:
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	f7ff ffee 	bl	8001fd0 <HAL_GetTick>
 8001ff4:	60b8      	str	r0, [r7, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002000:	d005      	beq.n	800200e <HAL_Delay+0x26>
 8002002:	4b0a      	ldr	r3, [pc, #40]	; (800202c <HAL_Delay+0x44>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	461a      	mov	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4413      	add	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	bf00      	nop
 8002010:	f7ff ffde 	bl	8001fd0 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	429a      	cmp	r2, r3
 800201e:	d8f7      	bhi.n	8002010 <HAL_Delay+0x28>
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	2000000c 	.word	0x2000000c

08002030 <__NVIC_SetPriorityGrouping>:
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <__NVIC_SetPriorityGrouping+0x44>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800204c:	4013      	ands	r3, r2
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	021a      	lsls	r2, r3, #8
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	4313      	orrs	r3, r2
 8002058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800205c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	4a04      	ldr	r2, [pc, #16]	; (8002074 <__NVIC_SetPriorityGrouping+0x44>)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	60d3      	str	r3, [r2, #12]
 8002068:	bf00      	nop
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <__NVIC_GetPriorityGrouping>:
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
 800207c:	4b04      	ldr	r3, [pc, #16]	; (8002090 <__NVIC_GetPriorityGrouping+0x18>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	0a1b      	lsrs	r3, r3, #8
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	4618      	mov	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <__NVIC_EnableIRQ>:
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	71fb      	strb	r3, [r7, #7]
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	db0b      	blt.n	80020be <__NVIC_EnableIRQ+0x2a>
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	f003 021f 	and.w	r2, r3, #31
 80020ac:	4907      	ldr	r1, [pc, #28]	; (80020cc <__NVIC_EnableIRQ+0x38>)
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	095b      	lsrs	r3, r3, #5
 80020b4:	2001      	movs	r0, #1
 80020b6:	fa00 f202 	lsl.w	r2, r0, r2
 80020ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	e000e100 	.word	0xe000e100

080020d0 <__NVIC_SetPriority>:
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	6039      	str	r1, [r7, #0]
 80020da:	71fb      	strb	r3, [r7, #7]
 80020dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	db0a      	blt.n	80020fa <__NVIC_SetPriority+0x2a>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	490c      	ldr	r1, [pc, #48]	; (800211c <__NVIC_SetPriority+0x4c>)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	0112      	lsls	r2, r2, #4
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	440b      	add	r3, r1
 80020f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80020f8:	e00a      	b.n	8002110 <__NVIC_SetPriority+0x40>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	4908      	ldr	r1, [pc, #32]	; (8002120 <__NVIC_SetPriority+0x50>)
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	3b04      	subs	r3, #4
 8002108:	0112      	lsls	r2, r2, #4
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	440b      	add	r3, r1
 800210e:	761a      	strb	r2, [r3, #24]
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000e100 	.word	0xe000e100
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <NVIC_EncodePriority>:
 8002124:	b480      	push	{r7}
 8002126:	b089      	sub	sp, #36	; 0x24
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	61fb      	str	r3, [r7, #28]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f1c3 0307 	rsb	r3, r3, #7
 800213e:	2b04      	cmp	r3, #4
 8002140:	bf28      	it	cs
 8002142:	2304      	movcs	r3, #4
 8002144:	61bb      	str	r3, [r7, #24]
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3304      	adds	r3, #4
 800214a:	2b06      	cmp	r3, #6
 800214c:	d902      	bls.n	8002154 <NVIC_EncodePriority+0x30>
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3b03      	subs	r3, #3
 8002152:	e000      	b.n	8002156 <NVIC_EncodePriority+0x32>
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	f04f 32ff 	mov.w	r2, #4294967295
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43da      	mvns	r2, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	401a      	ands	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	409a      	lsls	r2, r3
 800216c:	f04f 31ff 	mov.w	r1, #4294967295
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	fa01 f303 	lsl.w	r3, r1, r3
 8002176:	43d9      	mvns	r1, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	400b      	ands	r3, r1
 800217c:	4313      	orrs	r3, r2
 800217e:	4618      	mov	r0, r3
 8002180:	3724      	adds	r7, #36	; 0x24
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <SysTick_Config>:
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3b01      	subs	r3, #1
 8002198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800219c:	d301      	bcc.n	80021a2 <SysTick_Config+0x16>
 800219e:	2301      	movs	r3, #1
 80021a0:	e00f      	b.n	80021c2 <SysTick_Config+0x36>
 80021a2:	4a0a      	ldr	r2, [pc, #40]	; (80021cc <SysTick_Config+0x40>)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	6053      	str	r3, [r2, #4]
 80021aa:	210f      	movs	r1, #15
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295
 80021b0:	f7ff ff8e 	bl	80020d0 <__NVIC_SetPriority>
 80021b4:	4b05      	ldr	r3, [pc, #20]	; (80021cc <SysTick_Config+0x40>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	4b04      	ldr	r3, [pc, #16]	; (80021cc <SysTick_Config+0x40>)
 80021bc:	2207      	movs	r2, #7
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	2300      	movs	r3, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	e000e010 	.word	0xe000e010

080021d0 <HAL_NVIC_SetPriorityGrouping>:
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff ff29 	bl	8002030 <__NVIC_SetPriorityGrouping>
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_NVIC_SetPriority>:
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b086      	sub	sp, #24
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	4603      	mov	r3, r0
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	73fb      	strb	r3, [r7, #15]
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	f7ff ff3e 	bl	8002078 <__NVIC_GetPriorityGrouping>
 80021fc:	6178      	str	r0, [r7, #20]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	6978      	ldr	r0, [r7, #20]
 8002204:	f7ff ff8e 	bl	8002124 <NVIC_EncodePriority>
 8002208:	4602      	mov	r2, r0
 800220a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800220e:	4611      	mov	r1, r2
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff ff5d 	bl	80020d0 <__NVIC_SetPriority>
 8002216:	bf00      	nop
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_NVIC_EnableIRQ>:
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	4603      	mov	r3, r0
 8002226:	71fb      	strb	r3, [r7, #7]
 8002228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff ff31 	bl	8002094 <__NVIC_EnableIRQ>
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_SYSTICK_Config>:
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff ffa2 	bl	800218c <SysTick_Config>
 8002248:	4603      	mov	r3, r0
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <HAL_DMA_Init>:
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	f7ff feb6 	bl	8001fd0 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_DMA_Init+0x1c>
 800226c:	2301      	movs	r3, #1
 800226e:	e099      	b.n	80023a4 <HAL_DMA_Init+0x150>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2202      	movs	r2, #2
 8002274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0201 	bic.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	e00f      	b.n	80022b2 <HAL_DMA_Init+0x5e>
 8002292:	f7ff fe9d 	bl	8001fd0 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b05      	cmp	r3, #5
 800229e:	d908      	bls.n	80022b2 <HAL_DMA_Init+0x5e>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2220      	movs	r2, #32
 80022a4:	655a      	str	r2, [r3, #84]	; 0x54
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2203      	movs	r2, #3
 80022aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80022ae:	2303      	movs	r3, #3
 80022b0:	e078      	b.n	80023a4 <HAL_DMA_Init+0x150>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1e8      	bne.n	8002292 <HAL_DMA_Init+0x3e>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	4b38      	ldr	r3, [pc, #224]	; (80023ac <HAL_DMA_Init+0x158>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	4313      	orrs	r3, r2
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	2b04      	cmp	r3, #4
 800230a:	d107      	bne.n	800231c <HAL_DMA_Init+0xc8>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	4313      	orrs	r3, r2
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4313      	orrs	r3, r2
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f023 0307 	bic.w	r3, r3, #7
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	4313      	orrs	r3, r2
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	2b04      	cmp	r3, #4
 8002344:	d117      	bne.n	8002376 <HAL_DMA_Init+0x122>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	4313      	orrs	r3, r2
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00e      	beq.n	8002376 <HAL_DMA_Init+0x122>
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f9e9 	bl	8002730 <DMA_CheckFifoParam>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d008      	beq.n	8002376 <HAL_DMA_Init+0x122>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2240      	movs	r2, #64	; 0x40
 8002368:	655a      	str	r2, [r3, #84]	; 0x54
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002372:	2301      	movs	r3, #1
 8002374:	e016      	b.n	80023a4 <HAL_DMA_Init+0x150>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	615a      	str	r2, [r3, #20]
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f9a0 	bl	80026c4 <DMA_CalcBaseAndBitshift>
 8002384:	4603      	mov	r3, r0
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238c:	223f      	movs	r2, #63	; 0x3f
 800238e:	409a      	lsls	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	655a      	str	r2, [r3, #84]	; 0x54
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80023a2:	2300      	movs	r3, #0
 80023a4:	4618      	mov	r0, r3
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	f010803f 	.word	0xf010803f

080023b0 <HAL_DMA_IRQHandler>:
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	2300      	movs	r3, #0
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	4b8e      	ldr	r3, [pc, #568]	; (80025f8 <HAL_DMA_IRQHandler+0x248>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a8e      	ldr	r2, [pc, #568]	; (80025fc <HAL_DMA_IRQHandler+0x24c>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	0a9b      	lsrs	r3, r3, #10
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023da:	2208      	movs	r2, #8
 80023dc:	409a      	lsls	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4013      	ands	r3, r2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d01a      	beq.n	800241c <HAL_DMA_IRQHandler+0x6c>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d013      	beq.n	800241c <HAL_DMA_IRQHandler+0x6c>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0204 	bic.w	r2, r2, #4
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002408:	2208      	movs	r2, #8
 800240a:	409a      	lsls	r2, r3
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002414:	f043 0201 	orr.w	r2, r3, #1
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	655a      	str	r2, [r3, #84]	; 0x54
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002420:	2201      	movs	r2, #1
 8002422:	409a      	lsls	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4013      	ands	r3, r2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d012      	beq.n	8002452 <HAL_DMA_IRQHandler+0xa2>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00b      	beq.n	8002452 <HAL_DMA_IRQHandler+0xa2>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243e:	2201      	movs	r2, #1
 8002440:	409a      	lsls	r2, r3
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	609a      	str	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244a:	f043 0202 	orr.w	r2, r3, #2
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	655a      	str	r2, [r3, #84]	; 0x54
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002456:	2204      	movs	r2, #4
 8002458:	409a      	lsls	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4013      	ands	r3, r2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d012      	beq.n	8002488 <HAL_DMA_IRQHandler+0xd8>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00b      	beq.n	8002488 <HAL_DMA_IRQHandler+0xd8>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002474:	2204      	movs	r2, #4
 8002476:	409a      	lsls	r2, r3
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002480:	f043 0204 	orr.w	r2, r3, #4
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	655a      	str	r2, [r3, #84]	; 0x54
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248c:	2210      	movs	r2, #16
 800248e:	409a      	lsls	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4013      	ands	r3, r2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d043      	beq.n	8002520 <HAL_DMA_IRQHandler+0x170>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d03c      	beq.n	8002520 <HAL_DMA_IRQHandler+0x170>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024aa:	2210      	movs	r2, #16
 80024ac:	409a      	lsls	r2, r3
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	609a      	str	r2, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d018      	beq.n	80024f2 <HAL_DMA_IRQHandler+0x142>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d108      	bne.n	80024e0 <HAL_DMA_IRQHandler+0x130>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d024      	beq.n	8002520 <HAL_DMA_IRQHandler+0x170>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	4798      	blx	r3
 80024de:	e01f      	b.n	8002520 <HAL_DMA_IRQHandler+0x170>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d01b      	beq.n	8002520 <HAL_DMA_IRQHandler+0x170>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	4798      	blx	r3
 80024f0:	e016      	b.n	8002520 <HAL_DMA_IRQHandler+0x170>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d107      	bne.n	8002510 <HAL_DMA_IRQHandler+0x160>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0208 	bic.w	r2, r2, #8
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_DMA_IRQHandler+0x170>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	4798      	blx	r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002524:	2220      	movs	r2, #32
 8002526:	409a      	lsls	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4013      	ands	r3, r2
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 808f 	beq.w	8002650 <HAL_DMA_IRQHandler+0x2a0>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 8087 	beq.w	8002650 <HAL_DMA_IRQHandler+0x2a0>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002546:	2220      	movs	r2, #32
 8002548:	409a      	lsls	r2, r3
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	609a      	str	r2, [r3, #8]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b05      	cmp	r3, #5
 8002558:	d136      	bne.n	80025c8 <HAL_DMA_IRQHandler+0x218>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0216 	bic.w	r2, r2, #22
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695a      	ldr	r2, [r3, #20]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002578:	615a      	str	r2, [r3, #20]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	d103      	bne.n	800258a <HAL_DMA_IRQHandler+0x1da>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002586:	2b00      	cmp	r3, #0
 8002588:	d007      	beq.n	800259a <HAL_DMA_IRQHandler+0x1ea>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0208 	bic.w	r2, r2, #8
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259e:	223f      	movs	r2, #63	; 0x3f
 80025a0:	409a      	lsls	r2, r3
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	609a      	str	r2, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d07e      	beq.n	80026bc <HAL_DMA_IRQHandler+0x30c>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	4798      	blx	r3
 80025c6:	e079      	b.n	80026bc <HAL_DMA_IRQHandler+0x30c>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d01d      	beq.n	8002612 <HAL_DMA_IRQHandler+0x262>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10d      	bne.n	8002600 <HAL_DMA_IRQHandler+0x250>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d031      	beq.n	8002650 <HAL_DMA_IRQHandler+0x2a0>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	4798      	blx	r3
 80025f4:	e02c      	b.n	8002650 <HAL_DMA_IRQHandler+0x2a0>
 80025f6:	bf00      	nop
 80025f8:	20000004 	.word	0x20000004
 80025fc:	1b4e81b5 	.word	0x1b4e81b5
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002604:	2b00      	cmp	r3, #0
 8002606:	d023      	beq.n	8002650 <HAL_DMA_IRQHandler+0x2a0>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	4798      	blx	r3
 8002610:	e01e      	b.n	8002650 <HAL_DMA_IRQHandler+0x2a0>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10f      	bne.n	8002640 <HAL_DMA_IRQHandler+0x290>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0210 	bic.w	r2, r2, #16
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_DMA_IRQHandler+0x2a0>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	4798      	blx	r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002654:	2b00      	cmp	r3, #0
 8002656:	d032      	beq.n	80026be <HAL_DMA_IRQHandler+0x30e>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d022      	beq.n	80026aa <HAL_DMA_IRQHandler+0x2fa>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2205      	movs	r2, #5
 8002668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0201 	bic.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	3301      	adds	r3, #1
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	429a      	cmp	r2, r3
 8002686:	d307      	bcc.n	8002698 <HAL_DMA_IRQHandler+0x2e8>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f2      	bne.n	800267c <HAL_DMA_IRQHandler+0x2cc>
 8002696:	e000      	b.n	800269a <HAL_DMA_IRQHandler+0x2ea>
 8002698:	bf00      	nop
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d005      	beq.n	80026be <HAL_DMA_IRQHandler+0x30e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	4798      	blx	r3
 80026ba:	e000      	b.n	80026be <HAL_DMA_IRQHandler+0x30e>
 80026bc:	bf00      	nop
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <DMA_CalcBaseAndBitshift>:
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	3b10      	subs	r3, #16
 80026d4:	4a14      	ldr	r2, [pc, #80]	; (8002728 <DMA_CalcBaseAndBitshift+0x64>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	4a13      	ldr	r2, [pc, #76]	; (800272c <DMA_CalcBaseAndBitshift+0x68>)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4413      	add	r3, r2
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d909      	bls.n	8002706 <DMA_CalcBaseAndBitshift+0x42>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026fa:	f023 0303 	bic.w	r3, r3, #3
 80026fe:	1d1a      	adds	r2, r3, #4
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	659a      	str	r2, [r3, #88]	; 0x58
 8002704:	e007      	b.n	8002716 <DMA_CalcBaseAndBitshift+0x52>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800270e:	f023 0303 	bic.w	r3, r3, #3
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6593      	str	r3, [r2, #88]	; 0x58
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271a:	4618      	mov	r0, r3
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	aaaaaaab 	.word	0xaaaaaaab
 800272c:	080080c8 	.word	0x080080c8

08002730 <DMA_CheckFifoParam>:
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	2300      	movs	r3, #0
 800273a:	73fb      	strb	r3, [r7, #15]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d11f      	bne.n	800278a <DMA_CheckFifoParam+0x5a>
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b03      	cmp	r3, #3
 800274e:	d856      	bhi.n	80027fe <DMA_CheckFifoParam+0xce>
 8002750:	a201      	add	r2, pc, #4	; (adr r2, 8002758 <DMA_CheckFifoParam+0x28>)
 8002752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002756:	bf00      	nop
 8002758:	08002769 	.word	0x08002769
 800275c:	0800277b 	.word	0x0800277b
 8002760:	08002769 	.word	0x08002769
 8002764:	080027ff 	.word	0x080027ff
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d046      	beq.n	8002802 <DMA_CheckFifoParam+0xd2>
 8002774:	2301      	movs	r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
 8002778:	e043      	b.n	8002802 <DMA_CheckFifoParam+0xd2>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002782:	d140      	bne.n	8002806 <DMA_CheckFifoParam+0xd6>
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
 8002788:	e03d      	b.n	8002806 <DMA_CheckFifoParam+0xd6>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002792:	d121      	bne.n	80027d8 <DMA_CheckFifoParam+0xa8>
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b03      	cmp	r3, #3
 8002798:	d837      	bhi.n	800280a <DMA_CheckFifoParam+0xda>
 800279a:	a201      	add	r2, pc, #4	; (adr r2, 80027a0 <DMA_CheckFifoParam+0x70>)
 800279c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a0:	080027b1 	.word	0x080027b1
 80027a4:	080027b7 	.word	0x080027b7
 80027a8:	080027b1 	.word	0x080027b1
 80027ac:	080027c9 	.word	0x080027c9
 80027b0:	2301      	movs	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
 80027b4:	e030      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d025      	beq.n	800280e <DMA_CheckFifoParam+0xde>
 80027c2:	2301      	movs	r3, #1
 80027c4:	73fb      	strb	r3, [r7, #15]
 80027c6:	e022      	b.n	800280e <DMA_CheckFifoParam+0xde>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027d0:	d11f      	bne.n	8002812 <DMA_CheckFifoParam+0xe2>
 80027d2:	2301      	movs	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
 80027d6:	e01c      	b.n	8002812 <DMA_CheckFifoParam+0xe2>
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d903      	bls.n	80027e6 <DMA_CheckFifoParam+0xb6>
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d003      	beq.n	80027ec <DMA_CheckFifoParam+0xbc>
 80027e4:	e018      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
 80027e6:	2301      	movs	r3, #1
 80027e8:	73fb      	strb	r3, [r7, #15]
 80027ea:	e015      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00e      	beq.n	8002816 <DMA_CheckFifoParam+0xe6>
 80027f8:	2301      	movs	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
 80027fc:	e00b      	b.n	8002816 <DMA_CheckFifoParam+0xe6>
 80027fe:	bf00      	nop
 8002800:	e00a      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
 8002802:	bf00      	nop
 8002804:	e008      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
 8002806:	bf00      	nop
 8002808:	e006      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
 800280a:	bf00      	nop
 800280c:	e004      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
 800280e:	bf00      	nop
 8002810:	e002      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
 8002812:	bf00      	nop
 8002814:	e000      	b.n	8002818 <DMA_CheckFifoParam+0xe8>
 8002816:	bf00      	nop
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	4618      	mov	r0, r3
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop

08002828 <HAL_GPIO_Init>:
 8002828:	b480      	push	{r7}
 800282a:	b089      	sub	sp, #36	; 0x24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	2300      	movs	r3, #0
 800283c:	61bb      	str	r3, [r7, #24]
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
 8002842:	e16b      	b.n	8002b1c <HAL_GPIO_Init+0x2f4>
 8002844:	2201      	movs	r2, #1
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	4013      	ands	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	429a      	cmp	r2, r3
 800285e:	f040 815a 	bne.w	8002b16 <HAL_GPIO_Init+0x2ee>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	2b01      	cmp	r3, #1
 800286c:	d005      	beq.n	800287a <HAL_GPIO_Init+0x52>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d130      	bne.n	80028dc <HAL_GPIO_Init+0xb4>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	61bb      	str	r3, [r7, #24]
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	2203      	movs	r2, #3
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	61bb      	str	r3, [r7, #24]
 80028b0:	2201      	movs	r2, #1
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 0201 	and.w	r2, r3, #1
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	605a      	str	r2, [r3, #4]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	d017      	beq.n	8002918 <HAL_GPIO_Init+0xf0>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	61bb      	str	r3, [r7, #24]
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	2203      	movs	r2, #3
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	60da      	str	r2, [r3, #12]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d123      	bne.n	800296c <HAL_GPIO_Init+0x144>
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	08da      	lsrs	r2, r3, #3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3208      	adds	r2, #8
 800292c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002930:	61bb      	str	r3, [r7, #24]
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	220f      	movs	r2, #15
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	08da      	lsrs	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3208      	adds	r2, #8
 8002966:	69b9      	ldr	r1, [r7, #24]
 8002968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	61bb      	str	r3, [r7, #24]
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	2203      	movs	r2, #3
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 0203 	and.w	r2, r3, #3
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80b4 	beq.w	8002b16 <HAL_GPIO_Init+0x2ee>
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	4b60      	ldr	r3, [pc, #384]	; (8002b34 <HAL_GPIO_Init+0x30c>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	4a5f      	ldr	r2, [pc, #380]	; (8002b34 <HAL_GPIO_Init+0x30c>)
 80029b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029bc:	6453      	str	r3, [r2, #68]	; 0x44
 80029be:	4b5d      	ldr	r3, [pc, #372]	; (8002b34 <HAL_GPIO_Init+0x30c>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4a5b      	ldr	r2, [pc, #364]	; (8002b38 <HAL_GPIO_Init+0x310>)
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	089b      	lsrs	r3, r3, #2
 80029d0:	3302      	adds	r3, #2
 80029d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d6:	61bb      	str	r3, [r7, #24]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	220f      	movs	r2, #15
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a52      	ldr	r2, [pc, #328]	; (8002b3c <HAL_GPIO_Init+0x314>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d02b      	beq.n	8002a4e <HAL_GPIO_Init+0x226>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a51      	ldr	r2, [pc, #324]	; (8002b40 <HAL_GPIO_Init+0x318>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d025      	beq.n	8002a4a <HAL_GPIO_Init+0x222>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a50      	ldr	r2, [pc, #320]	; (8002b44 <HAL_GPIO_Init+0x31c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d01f      	beq.n	8002a46 <HAL_GPIO_Init+0x21e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a4f      	ldr	r2, [pc, #316]	; (8002b48 <HAL_GPIO_Init+0x320>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d019      	beq.n	8002a42 <HAL_GPIO_Init+0x21a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a4e      	ldr	r2, [pc, #312]	; (8002b4c <HAL_GPIO_Init+0x324>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d013      	beq.n	8002a3e <HAL_GPIO_Init+0x216>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a4d      	ldr	r2, [pc, #308]	; (8002b50 <HAL_GPIO_Init+0x328>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00d      	beq.n	8002a3a <HAL_GPIO_Init+0x212>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a4c      	ldr	r2, [pc, #304]	; (8002b54 <HAL_GPIO_Init+0x32c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d007      	beq.n	8002a36 <HAL_GPIO_Init+0x20e>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a4b      	ldr	r2, [pc, #300]	; (8002b58 <HAL_GPIO_Init+0x330>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d101      	bne.n	8002a32 <HAL_GPIO_Init+0x20a>
 8002a2e:	2307      	movs	r3, #7
 8002a30:	e00e      	b.n	8002a50 <HAL_GPIO_Init+0x228>
 8002a32:	2308      	movs	r3, #8
 8002a34:	e00c      	b.n	8002a50 <HAL_GPIO_Init+0x228>
 8002a36:	2306      	movs	r3, #6
 8002a38:	e00a      	b.n	8002a50 <HAL_GPIO_Init+0x228>
 8002a3a:	2305      	movs	r3, #5
 8002a3c:	e008      	b.n	8002a50 <HAL_GPIO_Init+0x228>
 8002a3e:	2304      	movs	r3, #4
 8002a40:	e006      	b.n	8002a50 <HAL_GPIO_Init+0x228>
 8002a42:	2303      	movs	r3, #3
 8002a44:	e004      	b.n	8002a50 <HAL_GPIO_Init+0x228>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e002      	b.n	8002a50 <HAL_GPIO_Init+0x228>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <HAL_GPIO_Init+0x228>
 8002a4e:	2300      	movs	r3, #0
 8002a50:	69fa      	ldr	r2, [r7, #28]
 8002a52:	f002 0203 	and.w	r2, r2, #3
 8002a56:	0092      	lsls	r2, r2, #2
 8002a58:	4093      	lsls	r3, r2
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
 8002a60:	4935      	ldr	r1, [pc, #212]	; (8002b38 <HAL_GPIO_Init+0x310>)
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	089b      	lsrs	r3, r3, #2
 8002a66:	3302      	adds	r3, #2
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002a6e:	4b3b      	ldr	r3, [pc, #236]	; (8002b5c <HAL_GPIO_Init+0x334>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	61bb      	str	r3, [r7, #24]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	43db      	mvns	r3, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_GPIO_Init+0x26a>
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	4a32      	ldr	r2, [pc, #200]	; (8002b5c <HAL_GPIO_Init+0x334>)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	6093      	str	r3, [r2, #8]
 8002a98:	4b30      	ldr	r3, [pc, #192]	; (8002b5c <HAL_GPIO_Init+0x334>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	61bb      	str	r3, [r7, #24]
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_GPIO_Init+0x294>
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
 8002abc:	4a27      	ldr	r2, [pc, #156]	; (8002b5c <HAL_GPIO_Init+0x334>)
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	60d3      	str	r3, [r2, #12]
 8002ac2:	4b26      	ldr	r3, [pc, #152]	; (8002b5c <HAL_GPIO_Init+0x334>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	61bb      	str	r3, [r7, #24]
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	43db      	mvns	r3, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_GPIO_Init+0x2be>
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
 8002ae6:	4a1d      	ldr	r2, [pc, #116]	; (8002b5c <HAL_GPIO_Init+0x334>)
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	6053      	str	r3, [r2, #4]
 8002aec:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <HAL_GPIO_Init+0x334>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	61bb      	str	r3, [r7, #24]
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	43db      	mvns	r3, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4013      	ands	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_GPIO_Init+0x2e8>
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
 8002b10:	4a12      	ldr	r2, [pc, #72]	; (8002b5c <HAL_GPIO_Init+0x334>)
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	61fb      	str	r3, [r7, #28]
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	2b0f      	cmp	r3, #15
 8002b20:	f67f ae90 	bls.w	8002844 <HAL_GPIO_Init+0x1c>
 8002b24:	bf00      	nop
 8002b26:	bf00      	nop
 8002b28:	3724      	adds	r7, #36	; 0x24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40023800 	.word	0x40023800
 8002b38:	40013800 	.word	0x40013800
 8002b3c:	40020000 	.word	0x40020000
 8002b40:	40020400 	.word	0x40020400
 8002b44:	40020800 	.word	0x40020800
 8002b48:	40020c00 	.word	0x40020c00
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	40021400 	.word	0x40021400
 8002b54:	40021800 	.word	0x40021800
 8002b58:	40021c00 	.word	0x40021c00
 8002b5c:	40013c00 	.word	0x40013c00

08002b60 <HAL_GPIO_ReadPin>:
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	807b      	strh	r3, [r7, #2]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	887b      	ldrh	r3, [r7, #2]
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <HAL_GPIO_ReadPin+0x1e>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	73fb      	strb	r3, [r7, #15]
 8002b7c:	e001      	b.n	8002b82 <HAL_GPIO_ReadPin+0x22>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	73fb      	strb	r3, [r7, #15]
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	4618      	mov	r0, r3
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_GPIO_WritePin>:
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	807b      	strh	r3, [r7, #2]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	707b      	strb	r3, [r7, #1]
 8002ba0:	787b      	ldrb	r3, [r7, #1]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_GPIO_WritePin+0x1e>
 8002ba6:	887a      	ldrh	r2, [r7, #2]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	619a      	str	r2, [r3, #24]
 8002bac:	e003      	b.n	8002bb6 <HAL_GPIO_WritePin+0x26>
 8002bae:	887b      	ldrh	r3, [r7, #2]
 8002bb0:	041a      	lsls	r2, r3, #16
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	619a      	str	r2, [r3, #24]
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
	...

08002bc4 <HAL_RCC_OscConfig>:
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x12>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e267      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d075      	beq.n	8002cce <HAL_RCC_OscConfig+0x10a>
 8002be2:	4b88      	ldr	r3, [pc, #544]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d00c      	beq.n	8002c08 <HAL_RCC_OscConfig+0x44>
 8002bee:	4b85      	ldr	r3, [pc, #532]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d112      	bne.n	8002c20 <HAL_RCC_OscConfig+0x5c>
 8002bfa:	4b82      	ldr	r3, [pc, #520]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c06:	d10b      	bne.n	8002c20 <HAL_RCC_OscConfig+0x5c>
 8002c08:	4b7e      	ldr	r3, [pc, #504]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d05b      	beq.n	8002ccc <HAL_RCC_OscConfig+0x108>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d157      	bne.n	8002ccc <HAL_RCC_OscConfig+0x108>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e242      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c28:	d106      	bne.n	8002c38 <HAL_RCC_OscConfig+0x74>
 8002c2a:	4b76      	ldr	r3, [pc, #472]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a75      	ldr	r2, [pc, #468]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	e01d      	b.n	8002c74 <HAL_RCC_OscConfig+0xb0>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c40:	d10c      	bne.n	8002c5c <HAL_RCC_OscConfig+0x98>
 8002c42:	4b70      	ldr	r3, [pc, #448]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a6f      	ldr	r2, [pc, #444]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	4b6d      	ldr	r3, [pc, #436]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a6c      	ldr	r2, [pc, #432]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e00b      	b.n	8002c74 <HAL_RCC_OscConfig+0xb0>
 8002c5c:	4b69      	ldr	r3, [pc, #420]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a68      	ldr	r2, [pc, #416]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	4b66      	ldr	r3, [pc, #408]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a65      	ldr	r2, [pc, #404]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d013      	beq.n	8002ca4 <HAL_RCC_OscConfig+0xe0>
 8002c7c:	f7ff f9a8 	bl	8001fd0 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0xd2>
 8002c84:	f7ff f9a4 	bl	8001fd0 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	; 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0xd2>
 8002c92:	2303      	movs	r3, #3
 8002c94:	e207      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
 8002c96:	4b5b      	ldr	r3, [pc, #364]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0xc0>
 8002ca2:	e014      	b.n	8002cce <HAL_RCC_OscConfig+0x10a>
 8002ca4:	f7ff f994 	bl	8001fd0 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0xfa>
 8002cac:	f7ff f990 	bl	8001fd0 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b64      	cmp	r3, #100	; 0x64
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0xfa>
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e1f3      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
 8002cbe:	4b51      	ldr	r3, [pc, #324]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0xe8>
 8002cca:	e000      	b.n	8002cce <HAL_RCC_OscConfig+0x10a>
 8002ccc:	bf00      	nop
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d063      	beq.n	8002da2 <HAL_RCC_OscConfig+0x1de>
 8002cda:	4b4a      	ldr	r3, [pc, #296]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00b      	beq.n	8002cfe <HAL_RCC_OscConfig+0x13a>
 8002ce6:	4b47      	ldr	r3, [pc, #284]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d11c      	bne.n	8002d2c <HAL_RCC_OscConfig+0x168>
 8002cf2:	4b44      	ldr	r3, [pc, #272]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d116      	bne.n	8002d2c <HAL_RCC_OscConfig+0x168>
 8002cfe:	4b41      	ldr	r3, [pc, #260]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d005      	beq.n	8002d16 <HAL_RCC_OscConfig+0x152>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d001      	beq.n	8002d16 <HAL_RCC_OscConfig+0x152>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e1c7      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
 8002d16:	4b3b      	ldr	r3, [pc, #236]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4937      	ldr	r1, [pc, #220]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	600b      	str	r3, [r1, #0]
 8002d2a:	e03a      	b.n	8002da2 <HAL_RCC_OscConfig+0x1de>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d020      	beq.n	8002d76 <HAL_RCC_OscConfig+0x1b2>
 8002d34:	4b34      	ldr	r3, [pc, #208]	; (8002e08 <HAL_RCC_OscConfig+0x244>)
 8002d36:	2201      	movs	r2, #1
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	f7ff f949 	bl	8001fd0 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x190>
 8002d42:	f7ff f945 	bl	8001fd0 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x190>
 8002d50:	2303      	movs	r3, #3
 8002d52:	e1a8      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
 8002d54:	4b2b      	ldr	r3, [pc, #172]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0f0      	beq.n	8002d42 <HAL_RCC_OscConfig+0x17e>
 8002d60:	4b28      	ldr	r3, [pc, #160]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	4925      	ldr	r1, [pc, #148]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	600b      	str	r3, [r1, #0]
 8002d74:	e015      	b.n	8002da2 <HAL_RCC_OscConfig+0x1de>
 8002d76:	4b24      	ldr	r3, [pc, #144]	; (8002e08 <HAL_RCC_OscConfig+0x244>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	f7ff f928 	bl	8001fd0 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x1d2>
 8002d84:	f7ff f924 	bl	8001fd0 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x1d2>
 8002d92:	2303      	movs	r3, #3
 8002d94:	e187      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
 8002d96:	4b1b      	ldr	r3, [pc, #108]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x1c0>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d036      	beq.n	8002e1c <HAL_RCC_OscConfig+0x258>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d016      	beq.n	8002de4 <HAL_RCC_OscConfig+0x220>
 8002db6:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <HAL_RCC_OscConfig+0x248>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	f7ff f908 	bl	8001fd0 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x212>
 8002dc4:	f7ff f904 	bl	8001fd0 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x212>
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e167      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x200>
 8002de2:	e01b      	b.n	8002e1c <HAL_RCC_OscConfig+0x258>
 8002de4:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <HAL_RCC_OscConfig+0x248>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	f7ff f8f1 	bl	8001fd0 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]
 8002df0:	e00e      	b.n	8002e10 <HAL_RCC_OscConfig+0x24c>
 8002df2:	f7ff f8ed 	bl	8001fd0 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d907      	bls.n	8002e10 <HAL_RCC_OscConfig+0x24c>
 8002e00:	2303      	movs	r3, #3
 8002e02:	e150      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
 8002e04:	40023800 	.word	0x40023800
 8002e08:	42470000 	.word	0x42470000
 8002e0c:	42470e80 	.word	0x42470e80
 8002e10:	4b88      	ldr	r3, [pc, #544]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1ea      	bne.n	8002df2 <HAL_RCC_OscConfig+0x22e>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 8097 	beq.w	8002f58 <HAL_RCC_OscConfig+0x394>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	75fb      	strb	r3, [r7, #23]
 8002e2e:	4b81      	ldr	r3, [pc, #516]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10f      	bne.n	8002e5a <HAL_RCC_OscConfig+0x296>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	4b7d      	ldr	r3, [pc, #500]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	4a7c      	ldr	r2, [pc, #496]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e48:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4a:	4b7a      	ldr	r3, [pc, #488]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2301      	movs	r3, #1
 8002e58:	75fb      	strb	r3, [r7, #23]
 8002e5a:	4b77      	ldr	r3, [pc, #476]	; (8003038 <HAL_RCC_OscConfig+0x474>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d118      	bne.n	8002e98 <HAL_RCC_OscConfig+0x2d4>
 8002e66:	4b74      	ldr	r3, [pc, #464]	; (8003038 <HAL_RCC_OscConfig+0x474>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a73      	ldr	r2, [pc, #460]	; (8003038 <HAL_RCC_OscConfig+0x474>)
 8002e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	f7ff f8ad 	bl	8001fd0 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x2c8>
 8002e7a:	f7ff f8a9 	bl	8001fd0 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x2c8>
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e10c      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
 8002e8c:	4b6a      	ldr	r3, [pc, #424]	; (8003038 <HAL_RCC_OscConfig+0x474>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x2b6>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d106      	bne.n	8002eae <HAL_RCC_OscConfig+0x2ea>
 8002ea0:	4b64      	ldr	r3, [pc, #400]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	4a63      	ldr	r2, [pc, #396]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8002eac:	e01c      	b.n	8002ee8 <HAL_RCC_OscConfig+0x324>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b05      	cmp	r3, #5
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x30c>
 8002eb6:	4b5f      	ldr	r3, [pc, #380]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	4a5e      	ldr	r2, [pc, #376]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002ebc:	f043 0304 	orr.w	r3, r3, #4
 8002ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec2:	4b5c      	ldr	r3, [pc, #368]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec6:	4a5b      	ldr	r2, [pc, #364]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ece:	e00b      	b.n	8002ee8 <HAL_RCC_OscConfig+0x324>
 8002ed0:	4b58      	ldr	r3, [pc, #352]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed4:	4a57      	ldr	r2, [pc, #348]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002ed6:	f023 0301 	bic.w	r3, r3, #1
 8002eda:	6713      	str	r3, [r2, #112]	; 0x70
 8002edc:	4b55      	ldr	r3, [pc, #340]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee0:	4a54      	ldr	r2, [pc, #336]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002ee2:	f023 0304 	bic.w	r3, r3, #4
 8002ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d015      	beq.n	8002f1c <HAL_RCC_OscConfig+0x358>
 8002ef0:	f7ff f86e 	bl	8001fd0 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]
 8002ef6:	e00a      	b.n	8002f0e <HAL_RCC_OscConfig+0x34a>
 8002ef8:	f7ff f86a 	bl	8001fd0 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x34a>
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e0cb      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
 8002f0e:	4b49      	ldr	r3, [pc, #292]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0ee      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x334>
 8002f1a:	e014      	b.n	8002f46 <HAL_RCC_OscConfig+0x382>
 8002f1c:	f7ff f858 	bl	8001fd0 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]
 8002f22:	e00a      	b.n	8002f3a <HAL_RCC_OscConfig+0x376>
 8002f24:	f7ff f854 	bl	8001fd0 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x376>
 8002f36:	2303      	movs	r3, #3
 8002f38:	e0b5      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
 8002f3a:	4b3e      	ldr	r3, [pc, #248]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1ee      	bne.n	8002f24 <HAL_RCC_OscConfig+0x360>
 8002f46:	7dfb      	ldrb	r3, [r7, #23]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d105      	bne.n	8002f58 <HAL_RCC_OscConfig+0x394>
 8002f4c:	4b39      	ldr	r3, [pc, #228]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	4a38      	ldr	r2, [pc, #224]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002f52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f56:	6413      	str	r3, [r2, #64]	; 0x40
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 80a1 	beq.w	80030a4 <HAL_RCC_OscConfig+0x4e0>
 8002f62:	4b34      	ldr	r3, [pc, #208]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 030c 	and.w	r3, r3, #12
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d05c      	beq.n	8003028 <HAL_RCC_OscConfig+0x464>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d141      	bne.n	8002ffa <HAL_RCC_OscConfig+0x436>
 8002f76:	4b31      	ldr	r3, [pc, #196]	; (800303c <HAL_RCC_OscConfig+0x478>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	f7ff f828 	bl	8001fd0 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x3d2>
 8002f84:	f7ff f824 	bl	8001fd0 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x3d2>
 8002f92:	2303      	movs	r3, #3
 8002f94:	e087      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
 8002f96:	4b27      	ldr	r3, [pc, #156]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x3c0>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69da      	ldr	r2, [r3, #28]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	019b      	lsls	r3, r3, #6
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb8:	085b      	lsrs	r3, r3, #1
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	041b      	lsls	r3, r3, #16
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc4:	061b      	lsls	r3, r3, #24
 8002fc6:	491b      	ldr	r1, [pc, #108]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	604b      	str	r3, [r1, #4]
 8002fcc:	4b1b      	ldr	r3, [pc, #108]	; (800303c <HAL_RCC_OscConfig+0x478>)
 8002fce:	2201      	movs	r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	f7fe fffd 	bl	8001fd0 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x428>
 8002fda:	f7fe fff9 	bl	8001fd0 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x428>
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e05c      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
 8002fec:	4b11      	ldr	r3, [pc, #68]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0f0      	beq.n	8002fda <HAL_RCC_OscConfig+0x416>
 8002ff8:	e054      	b.n	80030a4 <HAL_RCC_OscConfig+0x4e0>
 8002ffa:	4b10      	ldr	r3, [pc, #64]	; (800303c <HAL_RCC_OscConfig+0x478>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	f7fe ffe6 	bl	8001fd0 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x456>
 8003008:	f7fe ffe2 	bl	8001fd0 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x456>
 8003016:	2303      	movs	r3, #3
 8003018:	e045      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <HAL_RCC_OscConfig+0x470>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0x444>
 8003026:	e03d      	b.n	80030a4 <HAL_RCC_OscConfig+0x4e0>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d107      	bne.n	8003040 <HAL_RCC_OscConfig+0x47c>
 8003030:	2301      	movs	r3, #1
 8003032:	e038      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
 8003034:	40023800 	.word	0x40023800
 8003038:	40007000 	.word	0x40007000
 800303c:	42470060 	.word	0x42470060
 8003040:	4b1b      	ldr	r3, [pc, #108]	; (80030b0 <HAL_RCC_OscConfig+0x4ec>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d028      	beq.n	80030a0 <HAL_RCC_OscConfig+0x4dc>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	429a      	cmp	r2, r3
 800305a:	d121      	bne.n	80030a0 <HAL_RCC_OscConfig+0x4dc>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	429a      	cmp	r2, r3
 8003068:	d11a      	bne.n	80030a0 <HAL_RCC_OscConfig+0x4dc>
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003070:	4013      	ands	r3, r2
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003076:	0192      	lsls	r2, r2, #6
 8003078:	4293      	cmp	r3, r2
 800307a:	d111      	bne.n	80030a0 <HAL_RCC_OscConfig+0x4dc>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	085b      	lsrs	r3, r3, #1
 8003088:	3b01      	subs	r3, #1
 800308a:	041b      	lsls	r3, r3, #16
 800308c:	429a      	cmp	r2, r3
 800308e:	d107      	bne.n	80030a0 <HAL_RCC_OscConfig+0x4dc>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309a:	061b      	lsls	r3, r3, #24
 800309c:	429a      	cmp	r2, r3
 800309e:	d001      	beq.n	80030a4 <HAL_RCC_OscConfig+0x4e0>
 80030a0:	2301      	movs	r3, #1
 80030a2:	e000      	b.n	80030a6 <HAL_RCC_OscConfig+0x4e2>
 80030a4:	2300      	movs	r3, #0
 80030a6:	4618      	mov	r0, r3
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40023800 	.word	0x40023800

080030b4 <HAL_RCC_ClockConfig>:
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x14>
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0cc      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ae>
 80030c8:	4b68      	ldr	r3, [pc, #416]	; (800326c <HAL_RCC_ClockConfig+0x1b8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d90c      	bls.n	80030f0 <HAL_RCC_ClockConfig+0x3c>
 80030d6:	4b65      	ldr	r3, [pc, #404]	; (800326c <HAL_RCC_ClockConfig+0x1b8>)
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	701a      	strb	r2, [r3, #0]
 80030de:	4b63      	ldr	r3, [pc, #396]	; (800326c <HAL_RCC_ClockConfig+0x1b8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x3c>
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0b8      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ae>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d020      	beq.n	800313e <HAL_RCC_ClockConfig+0x8a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <HAL_RCC_ClockConfig+0x60>
 8003108:	4b59      	ldr	r3, [pc, #356]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	4a58      	ldr	r2, [pc, #352]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003112:	6093      	str	r3, [r2, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0308 	and.w	r3, r3, #8
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_RCC_ClockConfig+0x78>
 8003120:	4b53      	ldr	r3, [pc, #332]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	4a52      	ldr	r2, [pc, #328]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800312a:	6093      	str	r3, [r2, #8]
 800312c:	4b50      	ldr	r3, [pc, #320]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	494d      	ldr	r1, [pc, #308]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	4313      	orrs	r3, r2
 800313c:	608b      	str	r3, [r1, #8]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d044      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x120>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d107      	bne.n	8003162 <HAL_RCC_ClockConfig+0xae>
 8003152:	4b47      	ldr	r3, [pc, #284]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d119      	bne.n	8003192 <HAL_RCC_ClockConfig+0xde>
 800315e:	2301      	movs	r3, #1
 8003160:	e07f      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ae>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d003      	beq.n	8003172 <HAL_RCC_ClockConfig+0xbe>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b03      	cmp	r3, #3
 8003170:	d107      	bne.n	8003182 <HAL_RCC_ClockConfig+0xce>
 8003172:	4b3f      	ldr	r3, [pc, #252]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d109      	bne.n	8003192 <HAL_RCC_ClockConfig+0xde>
 800317e:	2301      	movs	r3, #1
 8003180:	e06f      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ae>
 8003182:	4b3b      	ldr	r3, [pc, #236]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_RCC_ClockConfig+0xde>
 800318e:	2301      	movs	r3, #1
 8003190:	e067      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ae>
 8003192:	4b37      	ldr	r3, [pc, #220]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f023 0203 	bic.w	r2, r3, #3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	4934      	ldr	r1, [pc, #208]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	608b      	str	r3, [r1, #8]
 80031a4:	f7fe ff14 	bl	8001fd0 <HAL_GetTick>
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	e00a      	b.n	80031c2 <HAL_RCC_ClockConfig+0x10e>
 80031ac:	f7fe ff10 	bl	8001fd0 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_ClockConfig+0x10e>
 80031be:	2303      	movs	r3, #3
 80031c0:	e04f      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ae>
 80031c2:	4b2b      	ldr	r3, [pc, #172]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 020c 	and.w	r2, r3, #12
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d1eb      	bne.n	80031ac <HAL_RCC_ClockConfig+0xf8>
 80031d4:	4b25      	ldr	r3, [pc, #148]	; (800326c <HAL_RCC_ClockConfig+0x1b8>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d20c      	bcs.n	80031fc <HAL_RCC_ClockConfig+0x148>
 80031e2:	4b22      	ldr	r3, [pc, #136]	; (800326c <HAL_RCC_ClockConfig+0x1b8>)
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	701a      	strb	r2, [r3, #0]
 80031ea:	4b20      	ldr	r3, [pc, #128]	; (800326c <HAL_RCC_ClockConfig+0x1b8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d001      	beq.n	80031fc <HAL_RCC_ClockConfig+0x148>
 80031f8:	2301      	movs	r3, #1
 80031fa:	e032      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ae>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <HAL_RCC_ClockConfig+0x166>
 8003208:	4b19      	ldr	r3, [pc, #100]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	4916      	ldr	r1, [pc, #88]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	4313      	orrs	r3, r2
 8003218:	608b      	str	r3, [r1, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d009      	beq.n	800323a <HAL_RCC_ClockConfig+0x186>
 8003226:	4b12      	ldr	r3, [pc, #72]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	490e      	ldr	r1, [pc, #56]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	4313      	orrs	r3, r2
 8003238:	608b      	str	r3, [r1, #8]
 800323a:	f000 f821 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 800323e:	4602      	mov	r2, r0
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	091b      	lsrs	r3, r3, #4
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	490a      	ldr	r1, [pc, #40]	; (8003274 <HAL_RCC_ClockConfig+0x1c0>)
 800324c:	5ccb      	ldrb	r3, [r1, r3]
 800324e:	fa22 f303 	lsr.w	r3, r2, r3
 8003252:	4a09      	ldr	r2, [pc, #36]	; (8003278 <HAL_RCC_ClockConfig+0x1c4>)
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	4b09      	ldr	r3, [pc, #36]	; (800327c <HAL_RCC_ClockConfig+0x1c8>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7fe fe74 	bl	8001f48 <HAL_InitTick>
 8003260:	2300      	movs	r3, #0
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40023c00 	.word	0x40023c00
 8003270:	40023800 	.word	0x40023800
 8003274:	080080b8 	.word	0x080080b8
 8003278:	20000004 	.word	0x20000004
 800327c:	20000008 	.word	0x20000008

08003280 <HAL_RCC_GetSysClockFreq>:
 8003280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003284:	b094      	sub	sp, #80	; 0x50
 8003286:	af00      	add	r7, sp, #0
 8003288:	2300      	movs	r3, #0
 800328a:	647b      	str	r3, [r7, #68]	; 0x44
 800328c:	2300      	movs	r3, #0
 800328e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003290:	2300      	movs	r3, #0
 8003292:	643b      	str	r3, [r7, #64]	; 0x40
 8003294:	2300      	movs	r3, #0
 8003296:	64bb      	str	r3, [r7, #72]	; 0x48
 8003298:	4b79      	ldr	r3, [pc, #484]	; (8003480 <HAL_RCC_GetSysClockFreq+0x200>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 030c 	and.w	r3, r3, #12
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d00d      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0x40>
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	f200 80e1 	bhi.w	800346c <HAL_RCC_GetSysClockFreq+0x1ec>
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <HAL_RCC_GetSysClockFreq+0x34>
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d003      	beq.n	80032ba <HAL_RCC_GetSysClockFreq+0x3a>
 80032b2:	e0db      	b.n	800346c <HAL_RCC_GetSysClockFreq+0x1ec>
 80032b4:	4b73      	ldr	r3, [pc, #460]	; (8003484 <HAL_RCC_GetSysClockFreq+0x204>)
 80032b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80032b8:	e0db      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x1f2>
 80032ba:	4b73      	ldr	r3, [pc, #460]	; (8003488 <HAL_RCC_GetSysClockFreq+0x208>)
 80032bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80032be:	e0d8      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x1f2>
 80032c0:	4b6f      	ldr	r3, [pc, #444]	; (8003480 <HAL_RCC_GetSysClockFreq+0x200>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032c8:	647b      	str	r3, [r7, #68]	; 0x44
 80032ca:	4b6d      	ldr	r3, [pc, #436]	; (8003480 <HAL_RCC_GetSysClockFreq+0x200>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d063      	beq.n	800339e <HAL_RCC_GetSysClockFreq+0x11e>
 80032d6:	4b6a      	ldr	r3, [pc, #424]	; (8003480 <HAL_RCC_GetSysClockFreq+0x200>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	099b      	lsrs	r3, r3, #6
 80032dc:	2200      	movs	r2, #0
 80032de:	63bb      	str	r3, [r7, #56]	; 0x38
 80032e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032e8:	633b      	str	r3, [r7, #48]	; 0x30
 80032ea:	2300      	movs	r3, #0
 80032ec:	637b      	str	r3, [r7, #52]	; 0x34
 80032ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032f2:	4622      	mov	r2, r4
 80032f4:	462b      	mov	r3, r5
 80032f6:	f04f 0000 	mov.w	r0, #0
 80032fa:	f04f 0100 	mov.w	r1, #0
 80032fe:	0159      	lsls	r1, r3, #5
 8003300:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003304:	0150      	lsls	r0, r2, #5
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	4621      	mov	r1, r4
 800330c:	1a51      	subs	r1, r2, r1
 800330e:	6139      	str	r1, [r7, #16]
 8003310:	4629      	mov	r1, r5
 8003312:	eb63 0301 	sbc.w	r3, r3, r1
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003324:	4659      	mov	r1, fp
 8003326:	018b      	lsls	r3, r1, #6
 8003328:	4651      	mov	r1, sl
 800332a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800332e:	4651      	mov	r1, sl
 8003330:	018a      	lsls	r2, r1, #6
 8003332:	4651      	mov	r1, sl
 8003334:	ebb2 0801 	subs.w	r8, r2, r1
 8003338:	4659      	mov	r1, fp
 800333a:	eb63 0901 	sbc.w	r9, r3, r1
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800334a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800334e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003352:	4690      	mov	r8, r2
 8003354:	4699      	mov	r9, r3
 8003356:	4623      	mov	r3, r4
 8003358:	eb18 0303 	adds.w	r3, r8, r3
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	462b      	mov	r3, r5
 8003360:	eb49 0303 	adc.w	r3, r9, r3
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003372:	4629      	mov	r1, r5
 8003374:	024b      	lsls	r3, r1, #9
 8003376:	4621      	mov	r1, r4
 8003378:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800337c:	4621      	mov	r1, r4
 800337e:	024a      	lsls	r2, r1, #9
 8003380:	4610      	mov	r0, r2
 8003382:	4619      	mov	r1, r3
 8003384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003386:	2200      	movs	r2, #0
 8003388:	62bb      	str	r3, [r7, #40]	; 0x28
 800338a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800338c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003390:	f7fc ff6e 	bl	8000270 <__aeabi_uldivmod>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4613      	mov	r3, r2
 800339a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800339c:	e058      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0x1d0>
 800339e:	4b38      	ldr	r3, [pc, #224]	; (8003480 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	099b      	lsrs	r3, r3, #6
 80033a4:	2200      	movs	r2, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	4611      	mov	r1, r2
 80033aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033ae:	623b      	str	r3, [r7, #32]
 80033b0:	2300      	movs	r3, #0
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
 80033b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033b8:	4642      	mov	r2, r8
 80033ba:	464b      	mov	r3, r9
 80033bc:	f04f 0000 	mov.w	r0, #0
 80033c0:	f04f 0100 	mov.w	r1, #0
 80033c4:	0159      	lsls	r1, r3, #5
 80033c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ca:	0150      	lsls	r0, r2, #5
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4641      	mov	r1, r8
 80033d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80033d6:	4649      	mov	r1, r9
 80033d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	f04f 0300 	mov.w	r3, #0
 80033e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033f0:	ebb2 040a 	subs.w	r4, r2, sl
 80033f4:	eb63 050b 	sbc.w	r5, r3, fp
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	00eb      	lsls	r3, r5, #3
 8003402:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003406:	00e2      	lsls	r2, r4, #3
 8003408:	4614      	mov	r4, r2
 800340a:	461d      	mov	r5, r3
 800340c:	4643      	mov	r3, r8
 800340e:	18e3      	adds	r3, r4, r3
 8003410:	603b      	str	r3, [r7, #0]
 8003412:	464b      	mov	r3, r9
 8003414:	eb45 0303 	adc.w	r3, r5, r3
 8003418:	607b      	str	r3, [r7, #4]
 800341a:	f04f 0200 	mov.w	r2, #0
 800341e:	f04f 0300 	mov.w	r3, #0
 8003422:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003426:	4629      	mov	r1, r5
 8003428:	028b      	lsls	r3, r1, #10
 800342a:	4621      	mov	r1, r4
 800342c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003430:	4621      	mov	r1, r4
 8003432:	028a      	lsls	r2, r1, #10
 8003434:	4610      	mov	r0, r2
 8003436:	4619      	mov	r1, r3
 8003438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800343a:	2200      	movs	r2, #0
 800343c:	61bb      	str	r3, [r7, #24]
 800343e:	61fa      	str	r2, [r7, #28]
 8003440:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003444:	f7fc ff14 	bl	8000270 <__aeabi_uldivmod>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4613      	mov	r3, r2
 800344e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003450:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <HAL_RCC_GetSysClockFreq+0x200>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	0c1b      	lsrs	r3, r3, #16
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	3301      	adds	r3, #1
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	643b      	str	r3, [r7, #64]	; 0x40
 8003460:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003464:	fbb2 f3f3 	udiv	r3, r2, r3
 8003468:	64bb      	str	r3, [r7, #72]	; 0x48
 800346a:	e002      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x1f2>
 800346c:	4b05      	ldr	r3, [pc, #20]	; (8003484 <HAL_RCC_GetSysClockFreq+0x204>)
 800346e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003470:	bf00      	nop
 8003472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003474:	4618      	mov	r0, r3
 8003476:	3750      	adds	r7, #80	; 0x50
 8003478:	46bd      	mov	sp, r7
 800347a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800347e:	bf00      	nop
 8003480:	40023800 	.word	0x40023800
 8003484:	00f42400 	.word	0x00f42400
 8003488:	007a1200 	.word	0x007a1200

0800348c <HAL_SPI_Init>:
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_SPI_Init+0x12>
 800349a:	2301      	movs	r3, #1
 800349c:	e07b      	b.n	8003596 <HAL_SPI_Init+0x10a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d108      	bne.n	80034b8 <HAL_SPI_Init+0x2c>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ae:	d009      	beq.n	80034c4 <HAL_SPI_Init+0x38>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	61da      	str	r2, [r3, #28]
 80034b6:	e005      	b.n	80034c4 <HAL_SPI_Init+0x38>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	611a      	str	r2, [r3, #16]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	615a      	str	r2, [r3, #20]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	629a      	str	r2, [r3, #40]	; 0x28
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <HAL_SPI_Init+0x58>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7fe faf2 	bl	8001ac8 <HAL_SPI_MspInit>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003548:	ea42 0103 	orr.w	r1, r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003550:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	0c1b      	lsrs	r3, r3, #16
 8003562:	f003 0104 	and.w	r1, r3, #4
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	f003 0210 	and.w	r2, r3, #16
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	69da      	ldr	r2, [r3, #28]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003584:	61da      	str	r2, [r3, #28]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	655a      	str	r2, [r3, #84]	; 0x54
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003594:	2300      	movs	r3, #0
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_SPI_Transmit>:
 800359e:	b580      	push	{r7, lr}
 80035a0:	b088      	sub	sp, #32
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	603b      	str	r3, [r7, #0]
 80035aa:	4613      	mov	r3, r2
 80035ac:	80fb      	strh	r3, [r7, #6]
 80035ae:	2300      	movs	r3, #0
 80035b0:	77fb      	strb	r3, [r7, #31]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_SPI_Transmit+0x22>
 80035bc:	2302      	movs	r3, #2
 80035be:	e126      	b.n	800380e <HAL_SPI_Transmit+0x270>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80035c8:	f7fe fd02 	bl	8001fd0 <HAL_GetTick>
 80035cc:	61b8      	str	r0, [r7, #24]
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	82fb      	strh	r3, [r7, #22]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d002      	beq.n	80035e4 <HAL_SPI_Transmit+0x46>
 80035de:	2302      	movs	r3, #2
 80035e0:	77fb      	strb	r3, [r7, #31]
 80035e2:	e10b      	b.n	80037fc <HAL_SPI_Transmit+0x25e>
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <HAL_SPI_Transmit+0x52>
 80035ea:	88fb      	ldrh	r3, [r7, #6]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d102      	bne.n	80035f6 <HAL_SPI_Transmit+0x58>
 80035f0:	2301      	movs	r3, #1
 80035f2:	77fb      	strb	r3, [r7, #31]
 80035f4:	e102      	b.n	80037fc <HAL_SPI_Transmit+0x25e>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2203      	movs	r2, #3
 80035fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	655a      	str	r2, [r3, #84]	; 0x54
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	631a      	str	r2, [r3, #48]	; 0x30
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	88fa      	ldrh	r2, [r7, #6]
 800360e:	869a      	strh	r2, [r3, #52]	; 0x34
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	88fa      	ldrh	r2, [r7, #6]
 8003614:	86da      	strh	r2, [r3, #54]	; 0x36
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	639a      	str	r2, [r3, #56]	; 0x38
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	879a      	strh	r2, [r3, #60]	; 0x3c
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	645a      	str	r2, [r3, #68]	; 0x44
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	641a      	str	r2, [r3, #64]	; 0x40
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800363c:	d10f      	bne.n	800365e <HAL_SPI_Transmit+0xc0>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003668:	2b40      	cmp	r3, #64	; 0x40
 800366a:	d007      	beq.n	800367c <HAL_SPI_Transmit+0xde>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003684:	d14b      	bne.n	800371e <HAL_SPI_Transmit+0x180>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <HAL_SPI_Transmit+0xf6>
 800368e:	8afb      	ldrh	r3, [r7, #22]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d13e      	bne.n	8003712 <HAL_SPI_Transmit+0x174>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003698:	881a      	ldrh	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	60da      	str	r2, [r3, #12]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a4:	1c9a      	adds	r2, r3, #2
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	631a      	str	r2, [r3, #48]	; 0x30
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80036b8:	e02b      	b.n	8003712 <HAL_SPI_Transmit+0x174>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d112      	bne.n	80036ee <HAL_SPI_Transmit+0x150>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036cc:	881a      	ldrh	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	60da      	str	r2, [r3, #12]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	1c9a      	adds	r2, r3, #2
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	631a      	str	r2, [r3, #48]	; 0x30
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80036ec:	e011      	b.n	8003712 <HAL_SPI_Transmit+0x174>
 80036ee:	f7fe fc6f 	bl	8001fd0 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d803      	bhi.n	8003706 <HAL_SPI_Transmit+0x168>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003704:	d102      	bne.n	800370c <HAL_SPI_Transmit+0x16e>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d102      	bne.n	8003712 <HAL_SPI_Transmit+0x174>
 800370c:	2303      	movs	r3, #3
 800370e:	77fb      	strb	r3, [r7, #31]
 8003710:	e074      	b.n	80037fc <HAL_SPI_Transmit+0x25e>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003716:	b29b      	uxth	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1ce      	bne.n	80036ba <HAL_SPI_Transmit+0x11c>
 800371c:	e04c      	b.n	80037b8 <HAL_SPI_Transmit+0x21a>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <HAL_SPI_Transmit+0x18e>
 8003726:	8afb      	ldrh	r3, [r7, #22]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d140      	bne.n	80037ae <HAL_SPI_Transmit+0x210>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	330c      	adds	r3, #12
 8003736:	7812      	ldrb	r2, [r2, #0]
 8003738:	701a      	strb	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	631a      	str	r2, [r3, #48]	; 0x30
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003748:	b29b      	uxth	r3, r3
 800374a:	3b01      	subs	r3, #1
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	86da      	strh	r2, [r3, #54]	; 0x36
 8003752:	e02c      	b.n	80037ae <HAL_SPI_Transmit+0x210>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b02      	cmp	r3, #2
 8003760:	d113      	bne.n	800378a <HAL_SPI_Transmit+0x1ec>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	330c      	adds	r3, #12
 800376c:	7812      	ldrb	r2, [r2, #0]
 800376e:	701a      	strb	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	631a      	str	r2, [r3, #48]	; 0x30
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	86da      	strh	r2, [r3, #54]	; 0x36
 8003788:	e011      	b.n	80037ae <HAL_SPI_Transmit+0x210>
 800378a:	f7fe fc21 	bl	8001fd0 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d803      	bhi.n	80037a2 <HAL_SPI_Transmit+0x204>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a0:	d102      	bne.n	80037a8 <HAL_SPI_Transmit+0x20a>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d102      	bne.n	80037ae <HAL_SPI_Transmit+0x210>
 80037a8:	2303      	movs	r3, #3
 80037aa:	77fb      	strb	r3, [r7, #31]
 80037ac:	e026      	b.n	80037fc <HAL_SPI_Transmit+0x25e>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1cd      	bne.n	8003754 <HAL_SPI_Transmit+0x1b6>
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	6839      	ldr	r1, [r7, #0]
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 fa63 	bl	8003c88 <SPI_EndRxTxTransaction>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d002      	beq.n	80037ce <HAL_SPI_Transmit+0x230>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2220      	movs	r2, #32
 80037cc:	655a      	str	r2, [r3, #84]	; 0x54
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10a      	bne.n	80037ec <HAL_SPI_Transmit+0x24e>
 80037d6:	2300      	movs	r3, #0
 80037d8:	613b      	str	r3, [r7, #16]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	613b      	str	r3, [r7, #16]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	613b      	str	r3, [r7, #16]
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <HAL_SPI_Transmit+0x25c>
 80037f4:	2301      	movs	r3, #1
 80037f6:	77fb      	strb	r3, [r7, #31]
 80037f8:	e000      	b.n	80037fc <HAL_SPI_Transmit+0x25e>
 80037fa:	bf00      	nop
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800380c:	7ffb      	ldrb	r3, [r7, #31]
 800380e:	4618      	mov	r0, r3
 8003810:	3720      	adds	r7, #32
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_SPI_TransmitReceive>:
 8003816:	b580      	push	{r7, lr}
 8003818:	b08c      	sub	sp, #48	; 0x30
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	607a      	str	r2, [r7, #4]
 8003822:	807b      	strh	r3, [r7, #2]
 8003824:	2301      	movs	r3, #1
 8003826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003828:	2300      	movs	r3, #0
 800382a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_SPI_TransmitReceive+0x26>
 8003838:	2302      	movs	r3, #2
 800383a:	e18a      	b.n	8003b52 <HAL_SPI_TransmitReceive+0x33c>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003844:	f7fe fbc4 	bl	8001fd0 <HAL_GetTick>
 8003848:	6278      	str	r0, [r7, #36]	; 0x24
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003850:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	61fb      	str	r3, [r7, #28]
 800385a:	887b      	ldrh	r3, [r7, #2]
 800385c:	837b      	strh	r3, [r7, #26]
 800385e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003862:	2b01      	cmp	r3, #1
 8003864:	d00f      	beq.n	8003886 <HAL_SPI_TransmitReceive+0x70>
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800386c:	d107      	bne.n	800387e <HAL_SPI_TransmitReceive+0x68>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d103      	bne.n	800387e <HAL_SPI_TransmitReceive+0x68>
 8003876:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800387a:	2b04      	cmp	r3, #4
 800387c:	d003      	beq.n	8003886 <HAL_SPI_TransmitReceive+0x70>
 800387e:	2302      	movs	r3, #2
 8003880:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003884:	e15b      	b.n	8003b3e <HAL_SPI_TransmitReceive+0x328>
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <HAL_SPI_TransmitReceive+0x82>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <HAL_SPI_TransmitReceive+0x82>
 8003892:	887b      	ldrh	r3, [r7, #2]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d103      	bne.n	80038a0 <HAL_SPI_TransmitReceive+0x8a>
 8003898:	2301      	movs	r3, #1
 800389a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800389e:	e14e      	b.n	8003b3e <HAL_SPI_TransmitReceive+0x328>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d003      	beq.n	80038b4 <HAL_SPI_TransmitReceive+0x9e>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2205      	movs	r2, #5
 80038b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	655a      	str	r2, [r3, #84]	; 0x54
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	639a      	str	r2, [r3, #56]	; 0x38
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	887a      	ldrh	r2, [r7, #2]
 80038c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	887a      	ldrh	r2, [r7, #2]
 80038ca:	879a      	strh	r2, [r3, #60]	; 0x3c
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	631a      	str	r2, [r3, #48]	; 0x30
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	887a      	ldrh	r2, [r7, #2]
 80038d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	887a      	ldrh	r2, [r7, #2]
 80038dc:	869a      	strh	r2, [r3, #52]	; 0x34
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	641a      	str	r2, [r3, #64]	; 0x40
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	645a      	str	r2, [r3, #68]	; 0x44
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f4:	2b40      	cmp	r3, #64	; 0x40
 80038f6:	d007      	beq.n	8003908 <HAL_SPI_TransmitReceive+0xf2>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003910:	d178      	bne.n	8003a04 <HAL_SPI_TransmitReceive+0x1ee>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <HAL_SPI_TransmitReceive+0x10a>
 800391a:	8b7b      	ldrh	r3, [r7, #26]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d166      	bne.n	80039ee <HAL_SPI_TransmitReceive+0x1d8>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	881a      	ldrh	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	60da      	str	r2, [r3, #12]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003930:	1c9a      	adds	r2, r3, #2
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	631a      	str	r2, [r3, #48]	; 0x30
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800393a:	b29b      	uxth	r3, r3
 800393c:	3b01      	subs	r3, #1
 800393e:	b29a      	uxth	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	86da      	strh	r2, [r3, #54]	; 0x36
 8003944:	e053      	b.n	80039ee <HAL_SPI_TransmitReceive+0x1d8>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b02      	cmp	r3, #2
 8003952:	d11b      	bne.n	800398c <HAL_SPI_TransmitReceive+0x176>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003958:	b29b      	uxth	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d016      	beq.n	800398c <HAL_SPI_TransmitReceive+0x176>
 800395e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003960:	2b01      	cmp	r3, #1
 8003962:	d113      	bne.n	800398c <HAL_SPI_TransmitReceive+0x176>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	881a      	ldrh	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60da      	str	r2, [r3, #12]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	1c9a      	adds	r2, r3, #2
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	631a      	str	r2, [r3, #48]	; 0x30
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	86da      	strh	r2, [r3, #54]	; 0x36
 8003988:	2300      	movs	r3, #0
 800398a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b01      	cmp	r3, #1
 8003998:	d119      	bne.n	80039ce <HAL_SPI_TransmitReceive+0x1b8>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800399e:	b29b      	uxth	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d014      	beq.n	80039ce <HAL_SPI_TransmitReceive+0x1b8>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68da      	ldr	r2, [r3, #12]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ae:	b292      	uxth	r2, r2
 80039b0:	801a      	strh	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b6:	1c9a      	adds	r2, r3, #2
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	639a      	str	r2, [r3, #56]	; 0x38
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039ca:	2301      	movs	r3, #1
 80039cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ce:	f7fe faff 	bl	8001fd0 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039da:	429a      	cmp	r2, r3
 80039dc:	d807      	bhi.n	80039ee <HAL_SPI_TransmitReceive+0x1d8>
 80039de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e4:	d003      	beq.n	80039ee <HAL_SPI_TransmitReceive+0x1d8>
 80039e6:	2303      	movs	r3, #3
 80039e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ec:	e0a7      	b.n	8003b3e <HAL_SPI_TransmitReceive+0x328>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1a6      	bne.n	8003946 <HAL_SPI_TransmitReceive+0x130>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1a1      	bne.n	8003946 <HAL_SPI_TransmitReceive+0x130>
 8003a02:	e07c      	b.n	8003afe <HAL_SPI_TransmitReceive+0x2e8>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <HAL_SPI_TransmitReceive+0x1fc>
 8003a0c:	8b7b      	ldrh	r3, [r7, #26]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d16b      	bne.n	8003aea <HAL_SPI_TransmitReceive+0x2d4>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	330c      	adds	r3, #12
 8003a1c:	7812      	ldrb	r2, [r2, #0]
 8003a1e:	701a      	strb	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	631a      	str	r2, [r3, #48]	; 0x30
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a38:	e057      	b.n	8003aea <HAL_SPI_TransmitReceive+0x2d4>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d11c      	bne.n	8003a82 <HAL_SPI_TransmitReceive+0x26c>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d017      	beq.n	8003a82 <HAL_SPI_TransmitReceive+0x26c>
 8003a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d114      	bne.n	8003a82 <HAL_SPI_TransmitReceive+0x26c>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	330c      	adds	r3, #12
 8003a62:	7812      	ldrb	r2, [r2, #0]
 8003a64:	701a      	strb	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	3b01      	subs	r3, #1
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a7e:	2300      	movs	r3, #0
 8003a80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d119      	bne.n	8003ac4 <HAL_SPI_TransmitReceive+0x2ae>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d014      	beq.n	8003ac4 <HAL_SPI_TransmitReceive+0x2ae>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68da      	ldr	r2, [r3, #12]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	701a      	strb	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	639a      	str	r2, [r3, #56]	; 0x38
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ac4:	f7fe fa84 	bl	8001fd0 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d803      	bhi.n	8003adc <HAL_SPI_TransmitReceive+0x2c6>
 8003ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ada:	d102      	bne.n	8003ae2 <HAL_SPI_TransmitReceive+0x2cc>
 8003adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d103      	bne.n	8003aea <HAL_SPI_TransmitReceive+0x2d4>
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ae8:	e029      	b.n	8003b3e <HAL_SPI_TransmitReceive+0x328>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1a2      	bne.n	8003a3a <HAL_SPI_TransmitReceive+0x224>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d19d      	bne.n	8003a3a <HAL_SPI_TransmitReceive+0x224>
 8003afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 f8c0 	bl	8003c88 <SPI_EndRxTxTransaction>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d006      	beq.n	8003b1c <HAL_SPI_TransmitReceive+0x306>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2220      	movs	r2, #32
 8003b18:	655a      	str	r2, [r3, #84]	; 0x54
 8003b1a:	e010      	b.n	8003b3e <HAL_SPI_TransmitReceive+0x328>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10b      	bne.n	8003b3c <HAL_SPI_TransmitReceive+0x326>
 8003b24:	2300      	movs	r3, #0
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	e000      	b.n	8003b3e <HAL_SPI_TransmitReceive+0x328>
 8003b3c:	bf00      	nop
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003b4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b52:	4618      	mov	r0, r3
 8003b54:	3730      	adds	r7, #48	; 0x30
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_SPI_GetState>:
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
	...

08003b78 <SPI_WaitFlagStateUntilTimeout>:
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	603b      	str	r3, [r7, #0]
 8003b84:	4613      	mov	r3, r2
 8003b86:	71fb      	strb	r3, [r7, #7]
 8003b88:	f7fe fa22 	bl	8001fd0 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b90:	1a9b      	subs	r3, r3, r2
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	4413      	add	r3, r2
 8003b96:	61fb      	str	r3, [r7, #28]
 8003b98:	f7fe fa1a 	bl	8001fd0 <HAL_GetTick>
 8003b9c:	61b8      	str	r0, [r7, #24]
 8003b9e:	4b39      	ldr	r3, [pc, #228]	; (8003c84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	015b      	lsls	r3, r3, #5
 8003ba4:	0d1b      	lsrs	r3, r3, #20
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	fb02 f303 	mul.w	r3, r2, r3
 8003bac:	617b      	str	r3, [r7, #20]
 8003bae:	e054      	b.n	8003c5a <SPI_WaitFlagStateUntilTimeout+0xe2>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb6:	d050      	beq.n	8003c5a <SPI_WaitFlagStateUntilTimeout+0xe2>
 8003bb8:	f7fe fa0a 	bl	8001fd0 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	69fa      	ldr	r2, [r7, #28]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d902      	bls.n	8003bce <SPI_WaitFlagStateUntilTimeout+0x56>
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d13d      	bne.n	8003c4a <SPI_WaitFlagStateUntilTimeout+0xd2>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bdc:	605a      	str	r2, [r3, #4]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003be6:	d111      	bne.n	8003c0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bf0:	d004      	beq.n	8003bfc <SPI_WaitFlagStateUntilTimeout+0x84>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bfa:	d107      	bne.n	8003c0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c14:	d10f      	bne.n	8003c36 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003c46:	2303      	movs	r3, #3
 8003c48:	e017      	b.n	8003c7a <SPI_WaitFlagStateUntilTimeout+0x102>
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8003c50:	2300      	movs	r3, #0
 8003c52:	61fb      	str	r3, [r7, #28]
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	4013      	ands	r3, r2
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	bf0c      	ite	eq
 8003c6a:	2301      	moveq	r3, #1
 8003c6c:	2300      	movne	r3, #0
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	461a      	mov	r2, r3
 8003c72:	79fb      	ldrb	r3, [r7, #7]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d19b      	bne.n	8003bb0 <SPI_WaitFlagStateUntilTimeout+0x38>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3720      	adds	r7, #32
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000004 	.word	0x20000004

08003c88 <SPI_EndRxTxTransaction>:
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af02      	add	r7, sp, #8
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	4b1b      	ldr	r3, [pc, #108]	; (8003d04 <SPI_EndRxTxTransaction+0x7c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a1b      	ldr	r2, [pc, #108]	; (8003d08 <SPI_EndRxTxTransaction+0x80>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	0d5b      	lsrs	r3, r3, #21
 8003ca0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ca4:	fb02 f303 	mul.w	r3, r2, r3
 8003ca8:	617b      	str	r3, [r7, #20]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cb2:	d112      	bne.n	8003cda <SPI_EndRxTxTransaction+0x52>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2180      	movs	r1, #128	; 0x80
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f7ff ff5a 	bl	8003b78 <SPI_WaitFlagStateUntilTimeout>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d016      	beq.n	8003cf8 <SPI_EndRxTxTransaction+0x70>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cce:	f043 0220 	orr.w	r2, r3, #32
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	655a      	str	r2, [r3, #84]	; 0x54
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e00f      	b.n	8003cfa <SPI_EndRxTxTransaction+0x72>
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <SPI_EndRxTxTransaction+0x6e>
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf0:	2b80      	cmp	r3, #128	; 0x80
 8003cf2:	d0f2      	beq.n	8003cda <SPI_EndRxTxTransaction+0x52>
 8003cf4:	e000      	b.n	8003cf8 <SPI_EndRxTxTransaction+0x70>
 8003cf6:	bf00      	nop
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	20000004 	.word	0x20000004
 8003d08:	165e9f81 	.word	0x165e9f81

08003d0c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003d10:	4904      	ldr	r1, [pc, #16]	; (8003d24 <MX_FATFS_Init+0x18>)
 8003d12:	4805      	ldr	r0, [pc, #20]	; (8003d28 <MX_FATFS_Init+0x1c>)
 8003d14:	f003 f8e6 	bl	8006ee4 <FATFS_LinkDriver>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	4b03      	ldr	r3, [pc, #12]	; (8003d2c <MX_FATFS_Init+0x20>)
 8003d1e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003d20:	bf00      	nop
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	200025c4 	.word	0x200025c4
 8003d28:	20000010 	.word	0x20000010
 8003d2c:	200025c8 	.word	0x200025c8

08003d30 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003d34:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	Stat = SD_disk_initialize(pdrv);
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fc fdb9 	bl	80008c4 <SD_disk_initialize>
 8003d52:	4603      	mov	r3, r0
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <USER_initialize+0x28>)
 8003d58:	701a      	strb	r2, [r3, #0]
		    return Stat;
 8003d5a:	4b03      	ldr	r3, [pc, #12]	; (8003d68 <USER_initialize+0x28>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	2000000d 	.word	0x2000000d

08003d6c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	 Stat = SD_disk_status (pdrv);
 8003d76:	79fb      	ldrb	r3, [r7, #7]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fc fe49 	bl	8000a10 <SD_disk_status>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	4b04      	ldr	r3, [pc, #16]	; (8003d94 <USER_status+0x28>)
 8003d84:	701a      	strb	r2, [r3, #0]
	    return Stat;
 8003d86:	4b03      	ldr	r3, [pc, #12]	; (8003d94 <USER_status+0x28>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	2000000d 	.word	0x2000000d

08003d98 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60b9      	str	r1, [r7, #8]
 8003da0:	607a      	str	r2, [r7, #4]
 8003da2:	603b      	str	r3, [r7, #0]
 8003da4:	4603      	mov	r3, r0
 8003da6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff, sector, count);
 8003da8:	7bf8      	ldrb	r0, [r7, #15]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	68b9      	ldr	r1, [r7, #8]
 8003db0:	f7fc fe44 	bl	8000a3c <SD_disk_read>
 8003db4:	4603      	mov	r3, r0
 8003db6:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60b9      	str	r1, [r7, #8]
 8003dc8:	607a      	str	r2, [r7, #4]
 8003dca:	603b      	str	r3, [r7, #0]
 8003dcc:	4603      	mov	r3, r0
 8003dce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write (pdrv, buff, sector, count);
 8003dd0:	7bf8      	ldrb	r0, [r7, #15]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	68b9      	ldr	r1, [r7, #8]
 8003dd8:	f7fc fe9a 	bl	8000b10 <SD_disk_write>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	603a      	str	r2, [r7, #0]
 8003df2:	71fb      	strb	r3, [r7, #7]
 8003df4:	460b      	mov	r3, r1
 8003df6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = SD_disk_ioctl (pdrv, cmd, buff);
 8003df8:	79fb      	ldrb	r3, [r7, #7]
 8003dfa:	79b9      	ldrb	r1, [r7, #6]
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fc ff0a 	bl	8000c18 <SD_disk_ioctl>
 8003e04:	4603      	mov	r3, r0
 8003e06:	73fb      	strb	r3, [r7, #15]
    return res;
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003e1e:	79fb      	ldrb	r3, [r7, #7]
 8003e20:	4a08      	ldr	r2, [pc, #32]	; (8003e44 <disk_status+0x30>)
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	79fa      	ldrb	r2, [r7, #7]
 8003e2c:	4905      	ldr	r1, [pc, #20]	; (8003e44 <disk_status+0x30>)
 8003e2e:	440a      	add	r2, r1
 8003e30:	7a12      	ldrb	r2, [r2, #8]
 8003e32:	4610      	mov	r0, r2
 8003e34:	4798      	blx	r3
 8003e36:	4603      	mov	r3, r0
 8003e38:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	200002d8 	.word	0x200002d8

08003e48 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	4a0d      	ldr	r2, [pc, #52]	; (8003e90 <disk_initialize+0x48>)
 8003e5a:	5cd3      	ldrb	r3, [r2, r3]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d111      	bne.n	8003e84 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	4a0b      	ldr	r2, [pc, #44]	; (8003e90 <disk_initialize+0x48>)
 8003e64:	2101      	movs	r1, #1
 8003e66:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003e68:	79fb      	ldrb	r3, [r7, #7]
 8003e6a:	4a09      	ldr	r2, [pc, #36]	; (8003e90 <disk_initialize+0x48>)
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	79fa      	ldrb	r2, [r7, #7]
 8003e76:	4906      	ldr	r1, [pc, #24]	; (8003e90 <disk_initialize+0x48>)
 8003e78:	440a      	add	r2, r1
 8003e7a:	7a12      	ldrb	r2, [r2, #8]
 8003e7c:	4610      	mov	r0, r2
 8003e7e:	4798      	blx	r3
 8003e80:	4603      	mov	r3, r0
 8003e82:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	200002d8 	.word	0x200002d8

08003e94 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003e94:	b590      	push	{r4, r7, lr}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	4a0a      	ldr	r2, [pc, #40]	; (8003ed0 <disk_read+0x3c>)
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	689c      	ldr	r4, [r3, #8]
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	4a07      	ldr	r2, [pc, #28]	; (8003ed0 <disk_read+0x3c>)
 8003eb4:	4413      	add	r3, r2
 8003eb6:	7a18      	ldrb	r0, [r3, #8]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	68b9      	ldr	r1, [r7, #8]
 8003ebe:	47a0      	blx	r4
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	75fb      	strb	r3, [r7, #23]
  return res;
 8003ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd90      	pop	{r4, r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	200002d8 	.word	0x200002d8

08003ed4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003ed4:	b590      	push	{r4, r7, lr}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60b9      	str	r1, [r7, #8]
 8003edc:	607a      	str	r2, [r7, #4]
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
 8003ee6:	4a0a      	ldr	r2, [pc, #40]	; (8003f10 <disk_write+0x3c>)
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	68dc      	ldr	r4, [r3, #12]
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
 8003ef2:	4a07      	ldr	r2, [pc, #28]	; (8003f10 <disk_write+0x3c>)
 8003ef4:	4413      	add	r3, r2
 8003ef6:	7a18      	ldrb	r0, [r3, #8]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	68b9      	ldr	r1, [r7, #8]
 8003efe:	47a0      	blx	r4
 8003f00:	4603      	mov	r3, r0
 8003f02:	75fb      	strb	r3, [r7, #23]
  return res;
 8003f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	371c      	adds	r7, #28
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd90      	pop	{r4, r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	200002d8 	.word	0x200002d8

08003f14 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	603a      	str	r2, [r7, #0]
 8003f1e:	71fb      	strb	r3, [r7, #7]
 8003f20:	460b      	mov	r3, r1
 8003f22:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003f24:	79fb      	ldrb	r3, [r7, #7]
 8003f26:	4a09      	ldr	r2, [pc, #36]	; (8003f4c <disk_ioctl+0x38>)
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	79fa      	ldrb	r2, [r7, #7]
 8003f32:	4906      	ldr	r1, [pc, #24]	; (8003f4c <disk_ioctl+0x38>)
 8003f34:	440a      	add	r2, r1
 8003f36:	7a10      	ldrb	r0, [r2, #8]
 8003f38:	79b9      	ldrb	r1, [r7, #6]
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	4798      	blx	r3
 8003f3e:	4603      	mov	r3, r0
 8003f40:	73fb      	strb	r3, [r7, #15]
  return res;
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	200002d8 	.word	0x200002d8

08003f50 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003f60:	89fb      	ldrh	r3, [r7, #14]
 8003f62:	021b      	lsls	r3, r3, #8
 8003f64:	b21a      	sxth	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	b21b      	sxth	r3, r3
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	b21b      	sxth	r3, r3
 8003f70:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003f72:	89fb      	ldrh	r3, [r7, #14]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3303      	adds	r3, #3
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	021b      	lsls	r3, r3, #8
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	3202      	adds	r2, #2
 8003f98:	7812      	ldrb	r2, [r2, #0]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	021b      	lsls	r3, r3, #8
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	3201      	adds	r2, #1
 8003fa6:	7812      	ldrb	r2, [r2, #0]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	021b      	lsls	r3, r3, #8
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	7812      	ldrb	r2, [r2, #0]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]
	return rv;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	460b      	mov	r3, r1
 8003fd0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	887a      	ldrh	r2, [r7, #2]
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]
 8003fde:	887b      	ldrh	r3, [r7, #2]
 8003fe0:	0a1b      	lsrs	r3, r3, #8
 8003fe2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	607a      	str	r2, [r7, #4]
 8003fea:	887a      	ldrh	r2, [r7, #2]
 8003fec:	b2d2      	uxtb	r2, r2
 8003fee:	701a      	strb	r2, [r3, #0]
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	1c5a      	adds	r2, r3, #1
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	701a      	strb	r2, [r3, #0]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	0a1b      	lsrs	r3, r3, #8
 8004016:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	607a      	str	r2, [r7, #4]
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	701a      	strb	r2, [r3, #0]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	0a1b      	lsrs	r3, r3, #8
 8004028:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	701a      	strb	r2, [r3, #0]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	0a1b      	lsrs	r3, r3, #8
 800403a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	607a      	str	r2, [r7, #4]
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	701a      	strb	r2, [r3, #0]
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00d      	beq.n	800408a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	1c53      	adds	r3, r2, #1
 8004072:	613b      	str	r3, [r7, #16]
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	1c59      	adds	r1, r3, #1
 8004078:	6179      	str	r1, [r7, #20]
 800407a:	7812      	ldrb	r2, [r2, #0]
 800407c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3b01      	subs	r3, #1
 8004082:	607b      	str	r3, [r7, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f1      	bne.n	800406e <mem_cpy+0x1a>
	}
}
 800408a:	bf00      	nop
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004096:	b480      	push	{r7}
 8004098:	b087      	sub	sp, #28
 800409a:	af00      	add	r7, sp, #0
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	1c5a      	adds	r2, r3, #1
 80040aa:	617a      	str	r2, [r7, #20]
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3b01      	subs	r3, #1
 80040b6:	607b      	str	r3, [r7, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1f3      	bne.n	80040a6 <mem_set+0x10>
}
 80040be:	bf00      	nop
 80040c0:	bf00      	nop
 80040c2:	371c      	adds	r7, #28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80040cc:	b480      	push	{r7}
 80040ce:	b089      	sub	sp, #36	; 0x24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	61fb      	str	r3, [r7, #28]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	61fa      	str	r2, [r7, #28]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	4619      	mov	r1, r3
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	61ba      	str	r2, [r7, #24]
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	1acb      	subs	r3, r1, r3
 80040f8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3b01      	subs	r3, #1
 80040fe:	607b      	str	r3, [r7, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <mem_cmp+0x40>
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0eb      	beq.n	80040e4 <mem_cmp+0x18>

	return r;
 800410c:	697b      	ldr	r3, [r7, #20]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3724      	adds	r7, #36	; 0x24
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004124:	e002      	b.n	800412c <chk_chr+0x12>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3301      	adds	r3, #1
 800412a:	607b      	str	r3, [r7, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d005      	beq.n	8004140 <chk_chr+0x26>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	461a      	mov	r2, r3
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	4293      	cmp	r3, r2
 800413e:	d1f2      	bne.n	8004126 <chk_chr+0xc>
	return *str;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	781b      	ldrb	r3, [r3, #0]
}
 8004144:	4618      	mov	r0, r3
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800415a:	2300      	movs	r3, #0
 800415c:	60bb      	str	r3, [r7, #8]
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	e029      	b.n	80041b8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004164:	4a27      	ldr	r2, [pc, #156]	; (8004204 <chk_lock+0xb4>)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	011b      	lsls	r3, r3, #4
 800416a:	4413      	add	r3, r2
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d01d      	beq.n	80041ae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004172:	4a24      	ldr	r2, [pc, #144]	; (8004204 <chk_lock+0xb4>)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	4413      	add	r3, r2
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	429a      	cmp	r2, r3
 8004182:	d116      	bne.n	80041b2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004184:	4a1f      	ldr	r2, [pc, #124]	; (8004204 <chk_lock+0xb4>)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	4413      	add	r3, r2
 800418c:	3304      	adds	r3, #4
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004194:	429a      	cmp	r2, r3
 8004196:	d10c      	bne.n	80041b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004198:	4a1a      	ldr	r2, [pc, #104]	; (8004204 <chk_lock+0xb4>)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	4413      	add	r3, r2
 80041a0:	3308      	adds	r3, #8
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d102      	bne.n	80041b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80041ac:	e007      	b.n	80041be <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80041ae:	2301      	movs	r3, #1
 80041b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	3301      	adds	r3, #1
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d9d2      	bls.n	8004164 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d109      	bne.n	80041d8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d102      	bne.n	80041d0 <chk_lock+0x80>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d101      	bne.n	80041d4 <chk_lock+0x84>
 80041d0:	2300      	movs	r3, #0
 80041d2:	e010      	b.n	80041f6 <chk_lock+0xa6>
 80041d4:	2312      	movs	r3, #18
 80041d6:	e00e      	b.n	80041f6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d108      	bne.n	80041f0 <chk_lock+0xa0>
 80041de:	4a09      	ldr	r2, [pc, #36]	; (8004204 <chk_lock+0xb4>)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	4413      	add	r3, r2
 80041e6:	330c      	adds	r3, #12
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ee:	d101      	bne.n	80041f4 <chk_lock+0xa4>
 80041f0:	2310      	movs	r3, #16
 80041f2:	e000      	b.n	80041f6 <chk_lock+0xa6>
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	200000b8 	.word	0x200000b8

08004208 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800420e:	2300      	movs	r3, #0
 8004210:	607b      	str	r3, [r7, #4]
 8004212:	e002      	b.n	800421a <enq_lock+0x12>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3301      	adds	r3, #1
 8004218:	607b      	str	r3, [r7, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d806      	bhi.n	800422e <enq_lock+0x26>
 8004220:	4a09      	ldr	r2, [pc, #36]	; (8004248 <enq_lock+0x40>)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	4413      	add	r3, r2
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f2      	bne.n	8004214 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b02      	cmp	r3, #2
 8004232:	bf14      	ite	ne
 8004234:	2301      	movne	r3, #1
 8004236:	2300      	moveq	r3, #0
 8004238:	b2db      	uxtb	r3, r3
}
 800423a:	4618      	mov	r0, r3
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	200000b8 	.word	0x200000b8

0800424c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004256:	2300      	movs	r3, #0
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	e01f      	b.n	800429c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800425c:	4a41      	ldr	r2, [pc, #260]	; (8004364 <inc_lock+0x118>)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	4413      	add	r3, r2
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d113      	bne.n	8004296 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800426e:	4a3d      	ldr	r2, [pc, #244]	; (8004364 <inc_lock+0x118>)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	4413      	add	r3, r2
 8004276:	3304      	adds	r3, #4
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800427e:	429a      	cmp	r2, r3
 8004280:	d109      	bne.n	8004296 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004282:	4a38      	ldr	r2, [pc, #224]	; (8004364 <inc_lock+0x118>)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	4413      	add	r3, r2
 800428a:	3308      	adds	r3, #8
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004292:	429a      	cmp	r2, r3
 8004294:	d006      	beq.n	80042a4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3301      	adds	r3, #1
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d9dc      	bls.n	800425c <inc_lock+0x10>
 80042a2:	e000      	b.n	80042a6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80042a4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d132      	bne.n	8004312 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	e002      	b.n	80042b8 <inc_lock+0x6c>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	3301      	adds	r3, #1
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d806      	bhi.n	80042cc <inc_lock+0x80>
 80042be:	4a29      	ldr	r2, [pc, #164]	; (8004364 <inc_lock+0x118>)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	4413      	add	r3, r2
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1f2      	bne.n	80042b2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d101      	bne.n	80042d6 <inc_lock+0x8a>
 80042d2:	2300      	movs	r3, #0
 80042d4:	e040      	b.n	8004358 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	4922      	ldr	r1, [pc, #136]	; (8004364 <inc_lock+0x118>)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	440b      	add	r3, r1
 80042e2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	491e      	ldr	r1, [pc, #120]	; (8004364 <inc_lock+0x118>)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	440b      	add	r3, r1
 80042f0:	3304      	adds	r3, #4
 80042f2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	695a      	ldr	r2, [r3, #20]
 80042f8:	491a      	ldr	r1, [pc, #104]	; (8004364 <inc_lock+0x118>)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	440b      	add	r3, r1
 8004300:	3308      	adds	r3, #8
 8004302:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004304:	4a17      	ldr	r2, [pc, #92]	; (8004364 <inc_lock+0x118>)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	4413      	add	r3, r2
 800430c:	330c      	adds	r3, #12
 800430e:	2200      	movs	r2, #0
 8004310:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d009      	beq.n	800432c <inc_lock+0xe0>
 8004318:	4a12      	ldr	r2, [pc, #72]	; (8004364 <inc_lock+0x118>)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	4413      	add	r3, r2
 8004320:	330c      	adds	r3, #12
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <inc_lock+0xe0>
 8004328:	2300      	movs	r3, #0
 800432a:	e015      	b.n	8004358 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d108      	bne.n	8004344 <inc_lock+0xf8>
 8004332:	4a0c      	ldr	r2, [pc, #48]	; (8004364 <inc_lock+0x118>)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	4413      	add	r3, r2
 800433a:	330c      	adds	r3, #12
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	3301      	adds	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	e001      	b.n	8004348 <inc_lock+0xfc>
 8004344:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004348:	4906      	ldr	r1, [pc, #24]	; (8004364 <inc_lock+0x118>)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	440b      	add	r3, r1
 8004350:	330c      	adds	r3, #12
 8004352:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	3301      	adds	r3, #1
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	200000b8 	.word	0x200000b8

08004368 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3b01      	subs	r3, #1
 8004374:	607b      	str	r3, [r7, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d825      	bhi.n	80043c8 <dec_lock+0x60>
		n = Files[i].ctr;
 800437c:	4a17      	ldr	r2, [pc, #92]	; (80043dc <dec_lock+0x74>)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	4413      	add	r3, r2
 8004384:	330c      	adds	r3, #12
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800438a:	89fb      	ldrh	r3, [r7, #14]
 800438c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004390:	d101      	bne.n	8004396 <dec_lock+0x2e>
 8004392:	2300      	movs	r3, #0
 8004394:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004396:	89fb      	ldrh	r3, [r7, #14]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d002      	beq.n	80043a2 <dec_lock+0x3a>
 800439c:	89fb      	ldrh	r3, [r7, #14]
 800439e:	3b01      	subs	r3, #1
 80043a0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80043a2:	4a0e      	ldr	r2, [pc, #56]	; (80043dc <dec_lock+0x74>)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	4413      	add	r3, r2
 80043aa:	330c      	adds	r3, #12
 80043ac:	89fa      	ldrh	r2, [r7, #14]
 80043ae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80043b0:	89fb      	ldrh	r3, [r7, #14]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d105      	bne.n	80043c2 <dec_lock+0x5a>
 80043b6:	4a09      	ldr	r2, [pc, #36]	; (80043dc <dec_lock+0x74>)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	4413      	add	r3, r2
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80043c2:	2300      	movs	r3, #0
 80043c4:	737b      	strb	r3, [r7, #13]
 80043c6:	e001      	b.n	80043cc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80043c8:	2302      	movs	r3, #2
 80043ca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80043cc:	7b7b      	ldrb	r3, [r7, #13]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	200000b8 	.word	0x200000b8

080043e0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80043e8:	2300      	movs	r3, #0
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	e010      	b.n	8004410 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80043ee:	4a0d      	ldr	r2, [pc, #52]	; (8004424 <clear_lock+0x44>)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	4413      	add	r3, r2
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d105      	bne.n	800440a <clear_lock+0x2a>
 80043fe:	4a09      	ldr	r2, [pc, #36]	; (8004424 <clear_lock+0x44>)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	4413      	add	r3, r2
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	3301      	adds	r3, #1
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d9eb      	bls.n	80043ee <clear_lock+0xe>
	}
}
 8004416:	bf00      	nop
 8004418:	bf00      	nop
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	200000b8 	.word	0x200000b8

08004428 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004430:	2300      	movs	r3, #0
 8004432:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	78db      	ldrb	r3, [r3, #3]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d034      	beq.n	80044a6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004440:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	7858      	ldrb	r0, [r3, #1]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800444c:	2301      	movs	r3, #1
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	f7ff fd40 	bl	8003ed4 <disk_write>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d002      	beq.n	8004460 <sync_window+0x38>
			res = FR_DISK_ERR;
 800445a:	2301      	movs	r3, #1
 800445c:	73fb      	strb	r3, [r7, #15]
 800445e:	e022      	b.n	80044a6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	1ad2      	subs	r2, r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	429a      	cmp	r2, r3
 8004474:	d217      	bcs.n	80044a6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	789b      	ldrb	r3, [r3, #2]
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	e010      	b.n	80044a0 <sync_window+0x78>
					wsect += fs->fsize;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4413      	add	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	7858      	ldrb	r0, [r3, #1]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004492:	2301      	movs	r3, #1
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	f7ff fd1d 	bl	8003ed4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	3b01      	subs	r3, #1
 800449e:	613b      	str	r3, [r7, #16]
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d8eb      	bhi.n	800447e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d01b      	beq.n	8004500 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7ff ffad 	bl	8004428 <sync_window>
 80044ce:	4603      	mov	r3, r0
 80044d0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d113      	bne.n	8004500 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	7858      	ldrb	r0, [r3, #1]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80044e2:	2301      	movs	r3, #1
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	f7ff fcd5 	bl	8003e94 <disk_read>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d004      	beq.n	80044fa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80044f0:	f04f 33ff 	mov.w	r3, #4294967295
 80044f4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8004500:	7bfb      	ldrb	r3, [r7, #15]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
	...

0800450c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7ff ff87 	bl	8004428 <sync_window>
 800451a:	4603      	mov	r3, r0
 800451c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800451e:	7bfb      	ldrb	r3, [r7, #15]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d159      	bne.n	80045d8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b03      	cmp	r3, #3
 800452a:	d149      	bne.n	80045c0 <sync_fs+0xb4>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	791b      	ldrb	r3, [r3, #4]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d145      	bne.n	80045c0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	899b      	ldrh	r3, [r3, #12]
 800453e:	461a      	mov	r2, r3
 8004540:	2100      	movs	r1, #0
 8004542:	f7ff fda8 	bl	8004096 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3338      	adds	r3, #56	; 0x38
 800454a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800454e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff fd37 	bl	8003fc6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3338      	adds	r3, #56	; 0x38
 800455c:	4921      	ldr	r1, [pc, #132]	; (80045e4 <sync_fs+0xd8>)
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff fd4c 	bl	8003ffc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3338      	adds	r3, #56	; 0x38
 8004568:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800456c:	491e      	ldr	r1, [pc, #120]	; (80045e8 <sync_fs+0xdc>)
 800456e:	4618      	mov	r0, r3
 8004570:	f7ff fd44 	bl	8003ffc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3338      	adds	r3, #56	; 0x38
 8004578:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	4619      	mov	r1, r3
 8004582:	4610      	mov	r0, r2
 8004584:	f7ff fd3a 	bl	8003ffc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3338      	adds	r3, #56	; 0x38
 800458c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	4619      	mov	r1, r3
 8004596:	4610      	mov	r0, r2
 8004598:	f7ff fd30 	bl	8003ffc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	7858      	ldrb	r0, [r3, #1]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045b4:	2301      	movs	r3, #1
 80045b6:	f7ff fc8d 	bl	8003ed4 <disk_write>
			fs->fsi_flag = 0;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	785b      	ldrb	r3, [r3, #1]
 80045c4:	2200      	movs	r2, #0
 80045c6:	2100      	movs	r1, #0
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff fca3 	bl	8003f14 <disk_ioctl>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <sync_fs+0xcc>
 80045d4:	2301      	movs	r3, #1
 80045d6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	41615252 	.word	0x41615252
 80045e8:	61417272 	.word	0x61417272

080045ec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	3b02      	subs	r3, #2
 80045fa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	3b02      	subs	r3, #2
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	429a      	cmp	r2, r3
 8004606:	d301      	bcc.n	800460c <clust2sect+0x20>
 8004608:	2300      	movs	r3, #0
 800460a:	e008      	b.n	800461e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	895b      	ldrh	r3, [r3, #10]
 8004610:	461a      	mov	r2, r3
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	fb03 f202 	mul.w	r2, r3, r2
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461c:	4413      	add	r3, r2
}
 800461e:	4618      	mov	r0, r3
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b086      	sub	sp, #24
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d904      	bls.n	800464a <get_fat+0x20>
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d302      	bcc.n	8004650 <get_fat+0x26>
		val = 1;	/* Internal error */
 800464a:	2301      	movs	r3, #1
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	e0bb      	b.n	80047c8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004650:	f04f 33ff 	mov.w	r3, #4294967295
 8004654:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	2b03      	cmp	r3, #3
 800465c:	f000 8083 	beq.w	8004766 <get_fat+0x13c>
 8004660:	2b03      	cmp	r3, #3
 8004662:	f300 80a7 	bgt.w	80047b4 <get_fat+0x18a>
 8004666:	2b01      	cmp	r3, #1
 8004668:	d002      	beq.n	8004670 <get_fat+0x46>
 800466a:	2b02      	cmp	r3, #2
 800466c:	d056      	beq.n	800471c <get_fat+0xf2>
 800466e:	e0a1      	b.n	80047b4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	085b      	lsrs	r3, r3, #1
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	4413      	add	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	899b      	ldrh	r3, [r3, #12]
 8004686:	4619      	mov	r1, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	fbb3 f3f1 	udiv	r3, r3, r1
 800468e:	4413      	add	r3, r2
 8004690:	4619      	mov	r1, r3
 8004692:	6938      	ldr	r0, [r7, #16]
 8004694:	f7ff ff0c 	bl	80044b0 <move_window>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	f040 808d 	bne.w	80047ba <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	1c5a      	adds	r2, r3, #1
 80046a4:	60fa      	str	r2, [r7, #12]
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	8992      	ldrh	r2, [r2, #12]
 80046aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80046ae:	fb02 f201 	mul.w	r2, r2, r1
 80046b2:	1a9b      	subs	r3, r3, r2
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4413      	add	r3, r2
 80046b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046bc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	899b      	ldrh	r3, [r3, #12]
 80046c6:	4619      	mov	r1, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80046ce:	4413      	add	r3, r2
 80046d0:	4619      	mov	r1, r3
 80046d2:	6938      	ldr	r0, [r7, #16]
 80046d4:	f7ff feec 	bl	80044b0 <move_window>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d16f      	bne.n	80047be <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	899b      	ldrh	r3, [r3, #12]
 80046e2:	461a      	mov	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80046ea:	fb02 f201 	mul.w	r2, r2, r1
 80046ee:	1a9b      	subs	r3, r3, r2
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4413      	add	r3, r2
 80046f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046f8:	021b      	lsls	r3, r3, #8
 80046fa:	461a      	mov	r2, r3
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <get_fat+0xe8>
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	091b      	lsrs	r3, r3, #4
 8004710:	e002      	b.n	8004718 <get_fat+0xee>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004718:	617b      	str	r3, [r7, #20]
			break;
 800471a:	e055      	b.n	80047c8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	899b      	ldrh	r3, [r3, #12]
 8004724:	085b      	lsrs	r3, r3, #1
 8004726:	b29b      	uxth	r3, r3
 8004728:	4619      	mov	r1, r3
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004730:	4413      	add	r3, r2
 8004732:	4619      	mov	r1, r3
 8004734:	6938      	ldr	r0, [r7, #16]
 8004736:	f7ff febb 	bl	80044b0 <move_window>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d140      	bne.n	80047c2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	8992      	ldrh	r2, [r2, #12]
 800474e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004752:	fb02 f200 	mul.w	r2, r2, r0
 8004756:	1a9b      	subs	r3, r3, r2
 8004758:	440b      	add	r3, r1
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff fbf8 	bl	8003f50 <ld_word>
 8004760:	4603      	mov	r3, r0
 8004762:	617b      	str	r3, [r7, #20]
			break;
 8004764:	e030      	b.n	80047c8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	899b      	ldrh	r3, [r3, #12]
 800476e:	089b      	lsrs	r3, r3, #2
 8004770:	b29b      	uxth	r3, r3
 8004772:	4619      	mov	r1, r3
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	fbb3 f3f1 	udiv	r3, r3, r1
 800477a:	4413      	add	r3, r2
 800477c:	4619      	mov	r1, r3
 800477e:	6938      	ldr	r0, [r7, #16]
 8004780:	f7ff fe96 	bl	80044b0 <move_window>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d11d      	bne.n	80047c6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	8992      	ldrh	r2, [r2, #12]
 8004798:	fbb3 f0f2 	udiv	r0, r3, r2
 800479c:	fb02 f200 	mul.w	r2, r2, r0
 80047a0:	1a9b      	subs	r3, r3, r2
 80047a2:	440b      	add	r3, r1
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff fbeb 	bl	8003f80 <ld_dword>
 80047aa:	4603      	mov	r3, r0
 80047ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80047b0:	617b      	str	r3, [r7, #20]
			break;
 80047b2:	e009      	b.n	80047c8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80047b4:	2301      	movs	r3, #1
 80047b6:	617b      	str	r3, [r7, #20]
 80047b8:	e006      	b.n	80047c8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80047ba:	bf00      	nop
 80047bc:	e004      	b.n	80047c8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80047be:	bf00      	nop
 80047c0:	e002      	b.n	80047c8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80047c2:	bf00      	nop
 80047c4:	e000      	b.n	80047c8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80047c6:	bf00      	nop
		}
	}

	return val;
 80047c8:	697b      	ldr	r3, [r7, #20]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80047d2:	b590      	push	{r4, r7, lr}
 80047d4:	b089      	sub	sp, #36	; 0x24
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	60f8      	str	r0, [r7, #12]
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80047de:	2302      	movs	r3, #2
 80047e0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	f240 8102 	bls.w	80049ee <put_fat+0x21c>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	f080 80fc 	bcs.w	80049ee <put_fat+0x21c>
		switch (fs->fs_type) {
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	2b03      	cmp	r3, #3
 80047fc:	f000 80b6 	beq.w	800496c <put_fat+0x19a>
 8004800:	2b03      	cmp	r3, #3
 8004802:	f300 80fd 	bgt.w	8004a00 <put_fat+0x22e>
 8004806:	2b01      	cmp	r3, #1
 8004808:	d003      	beq.n	8004812 <put_fat+0x40>
 800480a:	2b02      	cmp	r3, #2
 800480c:	f000 8083 	beq.w	8004916 <put_fat+0x144>
 8004810:	e0f6      	b.n	8004a00 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	61bb      	str	r3, [r7, #24]
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	085b      	lsrs	r3, r3, #1
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	4413      	add	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	899b      	ldrh	r3, [r3, #12]
 8004828:	4619      	mov	r1, r3
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004830:	4413      	add	r3, r2
 8004832:	4619      	mov	r1, r3
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f7ff fe3b 	bl	80044b0 <move_window>
 800483a:	4603      	mov	r3, r0
 800483c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800483e:	7ffb      	ldrb	r3, [r7, #31]
 8004840:	2b00      	cmp	r3, #0
 8004842:	f040 80d6 	bne.w	80049f2 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	61ba      	str	r2, [r7, #24]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	8992      	ldrh	r2, [r2, #12]
 8004856:	fbb3 f0f2 	udiv	r0, r3, r2
 800485a:	fb02 f200 	mul.w	r2, r2, r0
 800485e:	1a9b      	subs	r3, r3, r2
 8004860:	440b      	add	r3, r1
 8004862:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00d      	beq.n	800488a <put_fat+0xb8>
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	b25b      	sxtb	r3, r3
 8004874:	f003 030f 	and.w	r3, r3, #15
 8004878:	b25a      	sxtb	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	b2db      	uxtb	r3, r3
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	b25b      	sxtb	r3, r3
 8004882:	4313      	orrs	r3, r2
 8004884:	b25b      	sxtb	r3, r3
 8004886:	b2db      	uxtb	r3, r3
 8004888:	e001      	b.n	800488e <put_fat+0xbc>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2201      	movs	r2, #1
 8004896:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	899b      	ldrh	r3, [r3, #12]
 80048a0:	4619      	mov	r1, r3
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80048a8:	4413      	add	r3, r2
 80048aa:	4619      	mov	r1, r3
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f7ff fdff 	bl	80044b0 <move_window>
 80048b2:	4603      	mov	r3, r0
 80048b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80048b6:	7ffb      	ldrb	r3, [r7, #31]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f040 809c 	bne.w	80049f6 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	899b      	ldrh	r3, [r3, #12]
 80048c8:	461a      	mov	r2, r3
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80048d0:	fb02 f200 	mul.w	r2, r2, r0
 80048d4:	1a9b      	subs	r3, r3, r2
 80048d6:	440b      	add	r3, r1
 80048d8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <put_fat+0x11a>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	091b      	lsrs	r3, r3, #4
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	e00e      	b.n	800490a <put_fat+0x138>
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	b25b      	sxtb	r3, r3
 80048f2:	f023 030f 	bic.w	r3, r3, #15
 80048f6:	b25a      	sxtb	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	0a1b      	lsrs	r3, r3, #8
 80048fc:	b25b      	sxtb	r3, r3
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	b25b      	sxtb	r3, r3
 8004904:	4313      	orrs	r3, r2
 8004906:	b25b      	sxtb	r3, r3
 8004908:	b2db      	uxtb	r3, r3
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2201      	movs	r2, #1
 8004912:	70da      	strb	r2, [r3, #3]
			break;
 8004914:	e074      	b.n	8004a00 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	899b      	ldrh	r3, [r3, #12]
 800491e:	085b      	lsrs	r3, r3, #1
 8004920:	b29b      	uxth	r3, r3
 8004922:	4619      	mov	r1, r3
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	fbb3 f3f1 	udiv	r3, r3, r1
 800492a:	4413      	add	r3, r2
 800492c:	4619      	mov	r1, r3
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f7ff fdbe 	bl	80044b0 <move_window>
 8004934:	4603      	mov	r3, r0
 8004936:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004938:	7ffb      	ldrb	r3, [r7, #31]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d15d      	bne.n	80049fa <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	8992      	ldrh	r2, [r2, #12]
 800494c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004950:	fb02 f200 	mul.w	r2, r2, r0
 8004954:	1a9b      	subs	r3, r3, r2
 8004956:	440b      	add	r3, r1
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	b292      	uxth	r2, r2
 800495c:	4611      	mov	r1, r2
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff fb31 	bl	8003fc6 <st_word>
			fs->wflag = 1;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2201      	movs	r2, #1
 8004968:	70da      	strb	r2, [r3, #3]
			break;
 800496a:	e049      	b.n	8004a00 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	899b      	ldrh	r3, [r3, #12]
 8004974:	089b      	lsrs	r3, r3, #2
 8004976:	b29b      	uxth	r3, r3
 8004978:	4619      	mov	r1, r3
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004980:	4413      	add	r3, r2
 8004982:	4619      	mov	r1, r3
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f7ff fd93 	bl	80044b0 <move_window>
 800498a:	4603      	mov	r3, r0
 800498c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800498e:	7ffb      	ldrb	r3, [r7, #31]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d134      	bne.n	80049fe <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	8992      	ldrh	r2, [r2, #12]
 80049a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80049ac:	fb02 f200 	mul.w	r2, r2, r0
 80049b0:	1a9b      	subs	r3, r3, r2
 80049b2:	440b      	add	r3, r1
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff fae3 	bl	8003f80 <ld_dword>
 80049ba:	4603      	mov	r3, r0
 80049bc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80049c0:	4323      	orrs	r3, r4
 80049c2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	8992      	ldrh	r2, [r2, #12]
 80049d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80049d6:	fb02 f200 	mul.w	r2, r2, r0
 80049da:	1a9b      	subs	r3, r3, r2
 80049dc:	440b      	add	r3, r1
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fb0b 	bl	8003ffc <st_dword>
			fs->wflag = 1;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2201      	movs	r2, #1
 80049ea:	70da      	strb	r2, [r3, #3]
			break;
 80049ec:	e008      	b.n	8004a00 <put_fat+0x22e>
		}
	}
 80049ee:	bf00      	nop
 80049f0:	e006      	b.n	8004a00 <put_fat+0x22e>
			if (res != FR_OK) break;
 80049f2:	bf00      	nop
 80049f4:	e004      	b.n	8004a00 <put_fat+0x22e>
			if (res != FR_OK) break;
 80049f6:	bf00      	nop
 80049f8:	e002      	b.n	8004a00 <put_fat+0x22e>
			if (res != FR_OK) break;
 80049fa:	bf00      	nop
 80049fc:	e000      	b.n	8004a00 <put_fat+0x22e>
			if (res != FR_OK) break;
 80049fe:	bf00      	nop
	return res;
 8004a00:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3724      	adds	r7, #36	; 0x24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd90      	pop	{r4, r7, pc}

08004a0a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b088      	sub	sp, #32
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d904      	bls.n	8004a30 <remove_chain+0x26>
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d301      	bcc.n	8004a34 <remove_chain+0x2a>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e04b      	b.n	8004acc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00c      	beq.n	8004a54 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	69b8      	ldr	r0, [r7, #24]
 8004a42:	f7ff fec6 	bl	80047d2 <put_fat>
 8004a46:	4603      	mov	r3, r0
 8004a48:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004a4a:	7ffb      	ldrb	r3, [r7, #31]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <remove_chain+0x4a>
 8004a50:	7ffb      	ldrb	r3, [r7, #31]
 8004a52:	e03b      	b.n	8004acc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004a54:	68b9      	ldr	r1, [r7, #8]
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f7ff fde7 	bl	800462a <get_fat>
 8004a5c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d031      	beq.n	8004ac8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <remove_chain+0x64>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	e02e      	b.n	8004acc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a74:	d101      	bne.n	8004a7a <remove_chain+0x70>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e028      	b.n	8004acc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	68b9      	ldr	r1, [r7, #8]
 8004a7e:	69b8      	ldr	r0, [r7, #24]
 8004a80:	f7ff fea7 	bl	80047d2 <put_fat>
 8004a84:	4603      	mov	r3, r0
 8004a86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004a88:	7ffb      	ldrb	r3, [r7, #31]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <remove_chain+0x88>
 8004a8e:	7ffb      	ldrb	r3, [r7, #31]
 8004a90:	e01c      	b.n	8004acc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	699a      	ldr	r2, [r3, #24]
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	3b02      	subs	r3, #2
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d20b      	bcs.n	8004ab8 <remove_chain+0xae>
			fs->free_clst++;
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	791b      	ldrb	r3, [r3, #4]
 8004aae:	f043 0301 	orr.w	r3, r3, #1
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d3c6      	bcc.n	8004a54 <remove_chain+0x4a>
 8004ac6:	e000      	b.n	8004aca <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004ac8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3720      	adds	r7, #32
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10d      	bne.n	8004b06 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d004      	beq.n	8004b00 <create_chain+0x2c>
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d31b      	bcc.n	8004b38 <create_chain+0x64>
 8004b00:	2301      	movs	r3, #1
 8004b02:	61bb      	str	r3, [r7, #24]
 8004b04:	e018      	b.n	8004b38 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004b06:	6839      	ldr	r1, [r7, #0]
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff fd8e 	bl	800462a <get_fat>
 8004b0e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d801      	bhi.n	8004b1a <create_chain+0x46>
 8004b16:	2301      	movs	r3, #1
 8004b18:	e070      	b.n	8004bfc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b20:	d101      	bne.n	8004b26 <create_chain+0x52>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	e06a      	b.n	8004bfc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d201      	bcs.n	8004b34 <create_chain+0x60>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	e063      	b.n	8004bfc <create_chain+0x128>
		scl = clst;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	69fa      	ldr	r2, [r7, #28]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d307      	bcc.n	8004b5c <create_chain+0x88>
				ncl = 2;
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004b50:	69fa      	ldr	r2, [r7, #28]
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d901      	bls.n	8004b5c <create_chain+0x88>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	e04f      	b.n	8004bfc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004b5c:	69f9      	ldr	r1, [r7, #28]
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7ff fd63 	bl	800462a <get_fat>
 8004b64:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00e      	beq.n	8004b8a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d003      	beq.n	8004b7a <create_chain+0xa6>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b78:	d101      	bne.n	8004b7e <create_chain+0xaa>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	e03e      	b.n	8004bfc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004b7e:	69fa      	ldr	r2, [r7, #28]
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d1da      	bne.n	8004b3c <create_chain+0x68>
 8004b86:	2300      	movs	r3, #0
 8004b88:	e038      	b.n	8004bfc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004b8a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b90:	69f9      	ldr	r1, [r7, #28]
 8004b92:	6938      	ldr	r0, [r7, #16]
 8004b94:	f7ff fe1d 	bl	80047d2 <put_fat>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004b9c:	7dfb      	ldrb	r3, [r7, #23]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d109      	bne.n	8004bb6 <create_chain+0xe2>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d006      	beq.n	8004bb6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	6839      	ldr	r1, [r7, #0]
 8004bac:	6938      	ldr	r0, [r7, #16]
 8004bae:	f7ff fe10 	bl	80047d2 <put_fat>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004bb6:	7dfb      	ldrb	r3, [r7, #23]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d116      	bne.n	8004bea <create_chain+0x116>
		fs->last_clst = ncl;
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	69fa      	ldr	r2, [r7, #28]
 8004bc0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	699a      	ldr	r2, [r3, #24]
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	3b02      	subs	r3, #2
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d804      	bhi.n	8004bda <create_chain+0x106>
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	1e5a      	subs	r2, r3, #1
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	791b      	ldrb	r3, [r3, #4]
 8004bde:	f043 0301 	orr.w	r3, r3, #1
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	711a      	strb	r2, [r3, #4]
 8004be8:	e007      	b.n	8004bfa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004bea:	7dfb      	ldrb	r3, [r7, #23]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d102      	bne.n	8004bf6 <create_chain+0x122>
 8004bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf4:	e000      	b.n	8004bf8 <create_chain+0x124>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004bfa:	69fb      	ldr	r3, [r7, #28]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3720      	adds	r7, #32
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c18:	3304      	adds	r3, #4
 8004c1a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	899b      	ldrh	r3, [r3, #12]
 8004c20:	461a      	mov	r2, r3
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	8952      	ldrh	r2, [r2, #10]
 8004c2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c30:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1d1a      	adds	r2, r3, #4
 8004c36:	613a      	str	r2, [r7, #16]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <clmt_clust+0x42>
 8004c42:	2300      	movs	r3, #0
 8004c44:	e010      	b.n	8004c68 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d307      	bcc.n	8004c5e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	617b      	str	r3, [r7, #20]
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004c5c:	e7e9      	b.n	8004c32 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004c5e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	4413      	add	r3, r2
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	371c      	adds	r7, #28
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c8a:	d204      	bcs.n	8004c96 <dir_sdi+0x22>
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	f003 031f 	and.w	r3, r3, #31
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <dir_sdi+0x26>
		return FR_INT_ERR;
 8004c96:	2302      	movs	r3, #2
 8004c98:	e071      	b.n	8004d7e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d106      	bne.n	8004cba <dir_sdi+0x46>
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d902      	bls.n	8004cba <dir_sdi+0x46>
		clst = fs->dirbase;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10c      	bne.n	8004cda <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	8912      	ldrh	r2, [r2, #8]
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d301      	bcc.n	8004cd0 <dir_sdi+0x5c>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e056      	b.n	8004d7e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	61da      	str	r2, [r3, #28]
 8004cd8:	e02d      	b.n	8004d36 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	895b      	ldrh	r3, [r3, #10]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	899b      	ldrh	r3, [r3, #12]
 8004ce4:	fb03 f302 	mul.w	r3, r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004cea:	e019      	b.n	8004d20 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6979      	ldr	r1, [r7, #20]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff fc9a 	bl	800462a <get_fat>
 8004cf6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfe:	d101      	bne.n	8004d04 <dir_sdi+0x90>
 8004d00:	2301      	movs	r3, #1
 8004d02:	e03c      	b.n	8004d7e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d904      	bls.n	8004d14 <dir_sdi+0xa0>
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d301      	bcc.n	8004d18 <dir_sdi+0xa4>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e032      	b.n	8004d7e <dir_sdi+0x10a>
			ofs -= csz;
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d2e1      	bcs.n	8004cec <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004d28:	6979      	ldr	r1, [r7, #20]
 8004d2a:	6938      	ldr	r0, [r7, #16]
 8004d2c:	f7ff fc5e 	bl	80045ec <clust2sect>
 8004d30:	4602      	mov	r2, r0
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <dir_sdi+0xd4>
 8004d44:	2302      	movs	r3, #2
 8004d46:	e01a      	b.n	8004d7e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	69da      	ldr	r2, [r3, #28]
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	899b      	ldrh	r3, [r3, #12]
 8004d50:	4619      	mov	r1, r3
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d58:	441a      	add	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	899b      	ldrh	r3, [r3, #12]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004d70:	fb02 f200 	mul.w	r2, r2, r0
 8004d74:	1a9b      	subs	r3, r3, r2
 8004d76:	18ca      	adds	r2, r1, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b086      	sub	sp, #24
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	3320      	adds	r3, #32
 8004d9c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <dir_next+0x28>
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dac:	d301      	bcc.n	8004db2 <dir_next+0x2c>
 8004dae:	2304      	movs	r3, #4
 8004db0:	e0bb      	b.n	8004f2a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	899b      	ldrh	r3, [r3, #12]
 8004db6:	461a      	mov	r2, r3
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	fbb3 f1f2 	udiv	r1, r3, r2
 8004dbe:	fb02 f201 	mul.w	r2, r2, r1
 8004dc2:	1a9b      	subs	r3, r3, r2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f040 809d 	bne.w	8004f04 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10b      	bne.n	8004df4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	8912      	ldrh	r2, [r2, #8]
 8004de4:	4293      	cmp	r3, r2
 8004de6:	f0c0 808d 	bcc.w	8004f04 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	61da      	str	r2, [r3, #28]
 8004df0:	2304      	movs	r3, #4
 8004df2:	e09a      	b.n	8004f2a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	899b      	ldrh	r3, [r3, #12]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	8952      	ldrh	r2, [r2, #10]
 8004e04:	3a01      	subs	r2, #1
 8004e06:	4013      	ands	r3, r2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d17b      	bne.n	8004f04 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	4619      	mov	r1, r3
 8004e14:	4610      	mov	r0, r2
 8004e16:	f7ff fc08 	bl	800462a <get_fat>
 8004e1a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d801      	bhi.n	8004e26 <dir_next+0xa0>
 8004e22:	2302      	movs	r3, #2
 8004e24:	e081      	b.n	8004f2a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2c:	d101      	bne.n	8004e32 <dir_next+0xac>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e07b      	b.n	8004f2a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d359      	bcc.n	8004ef0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d104      	bne.n	8004e4c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	61da      	str	r2, [r3, #28]
 8004e48:	2304      	movs	r3, #4
 8004e4a:	e06e      	b.n	8004f2a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	4619      	mov	r1, r3
 8004e54:	4610      	mov	r0, r2
 8004e56:	f7ff fe3d 	bl	8004ad4 <create_chain>
 8004e5a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <dir_next+0xe0>
 8004e62:	2307      	movs	r3, #7
 8004e64:	e061      	b.n	8004f2a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <dir_next+0xea>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e05c      	b.n	8004f2a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e76:	d101      	bne.n	8004e7c <dir_next+0xf6>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e056      	b.n	8004f2a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f7ff fad3 	bl	8004428 <sync_window>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <dir_next+0x106>
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e04e      	b.n	8004f2a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	899b      	ldrh	r3, [r3, #12]
 8004e96:	461a      	mov	r2, r3
 8004e98:	2100      	movs	r1, #0
 8004e9a:	f7ff f8fc 	bl	8004096 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	613b      	str	r3, [r7, #16]
 8004ea2:	6979      	ldr	r1, [r7, #20]
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f7ff fba1 	bl	80045ec <clust2sect>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	635a      	str	r2, [r3, #52]	; 0x34
 8004eb0:	e012      	b.n	8004ed8 <dir_next+0x152>
						fs->wflag = 1;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f7ff fab5 	bl	8004428 <sync_window>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <dir_next+0x142>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e030      	b.n	8004f2a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	635a      	str	r2, [r3, #52]	; 0x34
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	895b      	ldrh	r3, [r3, #10]
 8004edc:	461a      	mov	r2, r3
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d3e6      	bcc.n	8004eb2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad2      	subs	r2, r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004ef6:	6979      	ldr	r1, [r7, #20]
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f7ff fb77 	bl	80045ec <clust2sect>
 8004efe:	4602      	mov	r2, r0
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	899b      	ldrh	r3, [r3, #12]
 8004f14:	461a      	mov	r2, r3
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f1c:	fb02 f200 	mul.w	r2, r2, r0
 8004f20:	1a9b      	subs	r3, r3, r2
 8004f22:	18ca      	adds	r2, r1, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b086      	sub	sp, #24
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004f42:	2100      	movs	r1, #0
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7ff fe95 	bl	8004c74 <dir_sdi>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004f4e:	7dfb      	ldrb	r3, [r7, #23]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d12b      	bne.n	8004fac <dir_alloc+0x7a>
		n = 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	69db      	ldr	r3, [r3, #28]
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f7ff faa6 	bl	80044b0 <move_window>
 8004f64:	4603      	mov	r3, r0
 8004f66:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004f68:	7dfb      	ldrb	r3, [r7, #23]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d11d      	bne.n	8004faa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	2be5      	cmp	r3, #229	; 0xe5
 8004f76:	d004      	beq.n	8004f82 <dir_alloc+0x50>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d107      	bne.n	8004f92 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	3301      	adds	r3, #1
 8004f86:	613b      	str	r3, [r7, #16]
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d102      	bne.n	8004f96 <dir_alloc+0x64>
 8004f90:	e00c      	b.n	8004fac <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004f92:	2300      	movs	r3, #0
 8004f94:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004f96:	2101      	movs	r1, #1
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7ff fef4 	bl	8004d86 <dir_next>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004fa2:	7dfb      	ldrb	r3, [r7, #23]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0d7      	beq.n	8004f58 <dir_alloc+0x26>
 8004fa8:	e000      	b.n	8004fac <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004faa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004fac:	7dfb      	ldrb	r3, [r7, #23]
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	d101      	bne.n	8004fb6 <dir_alloc+0x84>
 8004fb2:	2307      	movs	r3, #7
 8004fb4:	75fb      	strb	r3, [r7, #23]
	return res;
 8004fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3718      	adds	r7, #24
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	331a      	adds	r3, #26
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fe ffbe 	bl	8003f50 <ld_word>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d109      	bne.n	8004ff4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	3314      	adds	r3, #20
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fe ffb3 	bl	8003f50 <ld_word>
 8004fea:	4603      	mov	r3, r0
 8004fec:	041b      	lsls	r3, r3, #16
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b084      	sub	sp, #16
 8005002:	af00      	add	r7, sp, #0
 8005004:	60f8      	str	r0, [r7, #12]
 8005006:	60b9      	str	r1, [r7, #8]
 8005008:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	331a      	adds	r3, #26
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	b292      	uxth	r2, r2
 8005012:	4611      	mov	r1, r2
 8005014:	4618      	mov	r0, r3
 8005016:	f7fe ffd6 	bl	8003fc6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b03      	cmp	r3, #3
 8005020:	d109      	bne.n	8005036 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f103 0214 	add.w	r2, r3, #20
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	0c1b      	lsrs	r3, r3, #16
 800502c:	b29b      	uxth	r3, r3
 800502e:	4619      	mov	r1, r3
 8005030:	4610      	mov	r0, r2
 8005032:	f7fe ffc8 	bl	8003fc6 <st_word>
	}
}
 8005036:	bf00      	nop
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005040:	b590      	push	{r4, r7, lr}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	331a      	adds	r3, #26
 800504e:	4618      	mov	r0, r3
 8005050:	f7fe ff7e 	bl	8003f50 <ld_word>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <cmp_lfn+0x1e>
 800505a:	2300      	movs	r3, #0
 800505c:	e059      	b.n	8005112 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005066:	1e5a      	subs	r2, r3, #1
 8005068:	4613      	mov	r3, r2
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	4413      	add	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005074:	2301      	movs	r3, #1
 8005076:	81fb      	strh	r3, [r7, #14]
 8005078:	2300      	movs	r3, #0
 800507a:	613b      	str	r3, [r7, #16]
 800507c:	e033      	b.n	80050e6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800507e:	4a27      	ldr	r2, [pc, #156]	; (800511c <cmp_lfn+0xdc>)
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	4413      	add	r3, r2
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	461a      	mov	r2, r3
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	4413      	add	r3, r2
 800508c:	4618      	mov	r0, r3
 800508e:	f7fe ff5f 	bl	8003f50 <ld_word>
 8005092:	4603      	mov	r3, r0
 8005094:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005096:	89fb      	ldrh	r3, [r7, #14]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d01a      	beq.n	80050d2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	2bfe      	cmp	r3, #254	; 0xfe
 80050a0:	d812      	bhi.n	80050c8 <cmp_lfn+0x88>
 80050a2:	89bb      	ldrh	r3, [r7, #12]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f001 ff69 	bl	8006f7c <ff_wtoupper>
 80050aa:	4603      	mov	r3, r0
 80050ac:	461c      	mov	r4, r3
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	617a      	str	r2, [r7, #20]
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	4413      	add	r3, r2
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	4618      	mov	r0, r3
 80050be:	f001 ff5d 	bl	8006f7c <ff_wtoupper>
 80050c2:	4603      	mov	r3, r0
 80050c4:	429c      	cmp	r4, r3
 80050c6:	d001      	beq.n	80050cc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80050c8:	2300      	movs	r3, #0
 80050ca:	e022      	b.n	8005112 <cmp_lfn+0xd2>
			}
			wc = uc;
 80050cc:	89bb      	ldrh	r3, [r7, #12]
 80050ce:	81fb      	strh	r3, [r7, #14]
 80050d0:	e006      	b.n	80050e0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80050d2:	89bb      	ldrh	r3, [r7, #12]
 80050d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050d8:	4293      	cmp	r3, r2
 80050da:	d001      	beq.n	80050e0 <cmp_lfn+0xa0>
 80050dc:	2300      	movs	r3, #0
 80050de:	e018      	b.n	8005112 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	3301      	adds	r3, #1
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	2b0c      	cmp	r3, #12
 80050ea:	d9c8      	bls.n	800507e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00b      	beq.n	8005110 <cmp_lfn+0xd0>
 80050f8:	89fb      	ldrh	r3, [r7, #14]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d008      	beq.n	8005110 <cmp_lfn+0xd0>
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	4413      	add	r3, r2
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <cmp_lfn+0xd0>
 800510c:	2300      	movs	r3, #0
 800510e:	e000      	b.n	8005112 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005110:	2301      	movs	r3, #1
}
 8005112:	4618      	mov	r0, r3
 8005114:	371c      	adds	r7, #28
 8005116:	46bd      	mov	sp, r7
 8005118:	bd90      	pop	{r4, r7, pc}
 800511a:	bf00      	nop
 800511c:	08008150 	.word	0x08008150

08005120 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b088      	sub	sp, #32
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	4611      	mov	r1, r2
 800512c:	461a      	mov	r2, r3
 800512e:	460b      	mov	r3, r1
 8005130:	71fb      	strb	r3, [r7, #7]
 8005132:	4613      	mov	r3, r2
 8005134:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	330d      	adds	r3, #13
 800513a:	79ba      	ldrb	r2, [r7, #6]
 800513c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	330b      	adds	r3, #11
 8005142:	220f      	movs	r2, #15
 8005144:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	330c      	adds	r3, #12
 800514a:	2200      	movs	r2, #0
 800514c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	331a      	adds	r3, #26
 8005152:	2100      	movs	r1, #0
 8005154:	4618      	mov	r0, r3
 8005156:	f7fe ff36 	bl	8003fc6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800515a:	79fb      	ldrb	r3, [r7, #7]
 800515c:	1e5a      	subs	r2, r3, #1
 800515e:	4613      	mov	r3, r2
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	4413      	add	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800516a:	2300      	movs	r3, #0
 800516c:	82fb      	strh	r3, [r7, #22]
 800516e:	2300      	movs	r3, #0
 8005170:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005172:	8afb      	ldrh	r3, [r7, #22]
 8005174:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005178:	4293      	cmp	r3, r2
 800517a:	d007      	beq.n	800518c <put_lfn+0x6c>
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	61fa      	str	r2, [r7, #28]
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	881b      	ldrh	r3, [r3, #0]
 800518a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800518c:	4a17      	ldr	r2, [pc, #92]	; (80051ec <put_lfn+0xcc>)
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	4413      	add	r3, r2
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	461a      	mov	r2, r3
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	4413      	add	r3, r2
 800519a:	8afa      	ldrh	r2, [r7, #22]
 800519c:	4611      	mov	r1, r2
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fe ff11 	bl	8003fc6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80051a4:	8afb      	ldrh	r3, [r7, #22]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d102      	bne.n	80051b0 <put_lfn+0x90>
 80051aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051ae:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	3301      	adds	r3, #1
 80051b4:	61bb      	str	r3, [r7, #24]
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	2b0c      	cmp	r3, #12
 80051ba:	d9da      	bls.n	8005172 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80051bc:	8afb      	ldrh	r3, [r7, #22]
 80051be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d006      	beq.n	80051d4 <put_lfn+0xb4>
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4413      	add	r3, r2
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d103      	bne.n	80051dc <put_lfn+0xbc>
 80051d4:	79fb      	ldrb	r3, [r7, #7]
 80051d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051da:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	79fa      	ldrb	r2, [r7, #7]
 80051e0:	701a      	strb	r2, [r3, #0]
}
 80051e2:	bf00      	nop
 80051e4:	3720      	adds	r7, #32
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	08008150 	.word	0x08008150

080051f0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08c      	sub	sp, #48	; 0x30
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
 80051fc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80051fe:	220b      	movs	r2, #11
 8005200:	68b9      	ldr	r1, [r7, #8]
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f7fe ff26 	bl	8004054 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2b05      	cmp	r3, #5
 800520c:	d92b      	bls.n	8005266 <gen_numname+0x76>
		sr = seq;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005212:	e022      	b.n	800525a <gen_numname+0x6a>
			wc = *lfn++;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	1c9a      	adds	r2, r3, #2
 8005218:	607a      	str	r2, [r7, #4]
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800521e:	2300      	movs	r3, #0
 8005220:	62bb      	str	r3, [r7, #40]	; 0x28
 8005222:	e017      	b.n	8005254 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	005a      	lsls	r2, r3, #1
 8005228:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	4413      	add	r3, r2
 8005230:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005232:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005234:	085b      	lsrs	r3, r3, #1
 8005236:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <gen_numname+0x5e>
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8005248:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800524c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800524e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005250:	3301      	adds	r3, #1
 8005252:	62bb      	str	r3, [r7, #40]	; 0x28
 8005254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005256:	2b0f      	cmp	r3, #15
 8005258:	d9e4      	bls.n	8005224 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1d8      	bne.n	8005214 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005266:	2307      	movs	r3, #7
 8005268:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	b2db      	uxtb	r3, r3
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	b2db      	uxtb	r3, r3
 8005274:	3330      	adds	r3, #48	; 0x30
 8005276:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800527a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800527e:	2b39      	cmp	r3, #57	; 0x39
 8005280:	d904      	bls.n	800528c <gen_numname+0x9c>
 8005282:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005286:	3307      	adds	r3, #7
 8005288:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800528c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528e:	1e5a      	subs	r2, r3, #1
 8005290:	62ba      	str	r2, [r7, #40]	; 0x28
 8005292:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005296:	4413      	add	r3, r2
 8005298:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800529c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	091b      	lsrs	r3, r3, #4
 80052a4:	603b      	str	r3, [r7, #0]
	} while (seq);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1de      	bne.n	800526a <gen_numname+0x7a>
	ns[i] = '~';
 80052ac:	f107 0214 	add.w	r2, r7, #20
 80052b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b2:	4413      	add	r3, r2
 80052b4:	227e      	movs	r2, #126	; 0x7e
 80052b6:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80052b8:	2300      	movs	r3, #0
 80052ba:	627b      	str	r3, [r7, #36]	; 0x24
 80052bc:	e002      	b.n	80052c4 <gen_numname+0xd4>
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	3301      	adds	r3, #1
 80052c2:	627b      	str	r3, [r7, #36]	; 0x24
 80052c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d205      	bcs.n	80052d8 <gen_numname+0xe8>
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	4413      	add	r3, r2
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	2b20      	cmp	r3, #32
 80052d6:	d1f2      	bne.n	80052be <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80052d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052da:	2b07      	cmp	r3, #7
 80052dc:	d808      	bhi.n	80052f0 <gen_numname+0x100>
 80052de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80052e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80052e8:	4413      	add	r3, r2
 80052ea:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80052ee:	e000      	b.n	80052f2 <gen_numname+0x102>
 80052f0:	2120      	movs	r1, #32
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	1c5a      	adds	r2, r3, #1
 80052f6:	627a      	str	r2, [r7, #36]	; 0x24
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	4413      	add	r3, r2
 80052fc:	460a      	mov	r2, r1
 80052fe:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	2b07      	cmp	r3, #7
 8005304:	d9e8      	bls.n	80052d8 <gen_numname+0xe8>
}
 8005306:	bf00      	nop
 8005308:	bf00      	nop
 800530a:	3730      	adds	r7, #48	; 0x30
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005318:	2300      	movs	r3, #0
 800531a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800531c:	230b      	movs	r3, #11
 800531e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005320:	7bfb      	ldrb	r3, [r7, #15]
 8005322:	b2da      	uxtb	r2, r3
 8005324:	0852      	lsrs	r2, r2, #1
 8005326:	01db      	lsls	r3, r3, #7
 8005328:	4313      	orrs	r3, r2
 800532a:	b2da      	uxtb	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	1c59      	adds	r1, r3, #1
 8005330:	6079      	str	r1, [r7, #4]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	4413      	add	r3, r2
 8005336:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	3b01      	subs	r3, #1
 800533c:	60bb      	str	r3, [r7, #8]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1ed      	bne.n	8005320 <sum_sfn+0x10>
	return sum;
 8005344:	7bfb      	ldrb	r3, [r7, #15]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b086      	sub	sp, #24
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005360:	2100      	movs	r1, #0
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7ff fc86 	bl	8004c74 <dir_sdi>
 8005368:	4603      	mov	r3, r0
 800536a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800536c:	7dfb      	ldrb	r3, [r7, #23]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <dir_find+0x24>
 8005372:	7dfb      	ldrb	r3, [r7, #23]
 8005374:	e0a9      	b.n	80054ca <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005376:	23ff      	movs	r3, #255	; 0xff
 8005378:	753b      	strb	r3, [r7, #20]
 800537a:	7d3b      	ldrb	r3, [r7, #20]
 800537c:	757b      	strb	r3, [r7, #21]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f04f 32ff 	mov.w	r2, #4294967295
 8005384:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	4619      	mov	r1, r3
 800538c:	6938      	ldr	r0, [r7, #16]
 800538e:	f7ff f88f 	bl	80044b0 <move_window>
 8005392:	4603      	mov	r3, r0
 8005394:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005396:	7dfb      	ldrb	r3, [r7, #23]
 8005398:	2b00      	cmp	r3, #0
 800539a:	f040 8090 	bne.w	80054be <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80053a6:	7dbb      	ldrb	r3, [r7, #22]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d102      	bne.n	80053b2 <dir_find+0x60>
 80053ac:	2304      	movs	r3, #4
 80053ae:	75fb      	strb	r3, [r7, #23]
 80053b0:	e08a      	b.n	80054c8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	330b      	adds	r3, #11
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053be:	73fb      	strb	r3, [r7, #15]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	7bfa      	ldrb	r2, [r7, #15]
 80053c4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80053c6:	7dbb      	ldrb	r3, [r7, #22]
 80053c8:	2be5      	cmp	r3, #229	; 0xe5
 80053ca:	d007      	beq.n	80053dc <dir_find+0x8a>
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
 80053ce:	f003 0308 	and.w	r3, r3, #8
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d009      	beq.n	80053ea <dir_find+0x98>
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
 80053d8:	2b0f      	cmp	r3, #15
 80053da:	d006      	beq.n	80053ea <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80053dc:	23ff      	movs	r3, #255	; 0xff
 80053de:	757b      	strb	r3, [r7, #21]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f04f 32ff 	mov.w	r2, #4294967295
 80053e6:	631a      	str	r2, [r3, #48]	; 0x30
 80053e8:	e05e      	b.n	80054a8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
 80053ec:	2b0f      	cmp	r3, #15
 80053ee:	d136      	bne.n	800545e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80053f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d154      	bne.n	80054a8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80053fe:	7dbb      	ldrb	r3, [r7, #22]
 8005400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00d      	beq.n	8005424 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	7b5b      	ldrb	r3, [r3, #13]
 800540e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005410:	7dbb      	ldrb	r3, [r7, #22]
 8005412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005416:	75bb      	strb	r3, [r7, #22]
 8005418:	7dbb      	ldrb	r3, [r7, #22]
 800541a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	695a      	ldr	r2, [r3, #20]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005424:	7dba      	ldrb	r2, [r7, #22]
 8005426:	7d7b      	ldrb	r3, [r7, #21]
 8005428:	429a      	cmp	r2, r3
 800542a:	d115      	bne.n	8005458 <dir_find+0x106>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	330d      	adds	r3, #13
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	7d3a      	ldrb	r2, [r7, #20]
 8005436:	429a      	cmp	r2, r3
 8005438:	d10e      	bne.n	8005458 <dir_find+0x106>
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	691a      	ldr	r2, [r3, #16]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	4619      	mov	r1, r3
 8005444:	4610      	mov	r0, r2
 8005446:	f7ff fdfb 	bl	8005040 <cmp_lfn>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <dir_find+0x106>
 8005450:	7d7b      	ldrb	r3, [r7, #21]
 8005452:	3b01      	subs	r3, #1
 8005454:	b2db      	uxtb	r3, r3
 8005456:	e000      	b.n	800545a <dir_find+0x108>
 8005458:	23ff      	movs	r3, #255	; 0xff
 800545a:	757b      	strb	r3, [r7, #21]
 800545c:	e024      	b.n	80054a8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800545e:	7d7b      	ldrb	r3, [r7, #21]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d109      	bne.n	8005478 <dir_find+0x126>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff ff51 	bl	8005310 <sum_sfn>
 800546e:	4603      	mov	r3, r0
 8005470:	461a      	mov	r2, r3
 8005472:	7d3b      	ldrb	r3, [r7, #20]
 8005474:	4293      	cmp	r3, r2
 8005476:	d024      	beq.n	80054c2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10a      	bne.n	800549c <dir_find+0x14a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a18      	ldr	r0, [r3, #32]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3324      	adds	r3, #36	; 0x24
 800548e:	220b      	movs	r2, #11
 8005490:	4619      	mov	r1, r3
 8005492:	f7fe fe1b 	bl	80040cc <mem_cmp>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d014      	beq.n	80054c6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800549c:	23ff      	movs	r3, #255	; 0xff
 800549e:	757b      	strb	r3, [r7, #21]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f04f 32ff 	mov.w	r2, #4294967295
 80054a6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80054a8:	2100      	movs	r1, #0
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7ff fc6b 	bl	8004d86 <dir_next>
 80054b0:	4603      	mov	r3, r0
 80054b2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80054b4:	7dfb      	ldrb	r3, [r7, #23]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f43f af65 	beq.w	8005386 <dir_find+0x34>
 80054bc:	e004      	b.n	80054c8 <dir_find+0x176>
		if (res != FR_OK) break;
 80054be:	bf00      	nop
 80054c0:	e002      	b.n	80054c8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80054c2:	bf00      	nop
 80054c4:	e000      	b.n	80054c8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80054c6:	bf00      	nop

	return res;
 80054c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
	...

080054d4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b08c      	sub	sp, #48	; 0x30
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80054e8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <dir_register+0x20>
 80054f0:	2306      	movs	r3, #6
 80054f2:	e0e0      	b.n	80056b6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80054f4:	2300      	movs	r3, #0
 80054f6:	627b      	str	r3, [r7, #36]	; 0x24
 80054f8:	e002      	b.n	8005500 <dir_register+0x2c>
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	3301      	adds	r3, #1
 80054fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	691a      	ldr	r2, [r3, #16]
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	4413      	add	r3, r2
 800550a:	881b      	ldrh	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1f4      	bne.n	80054fa <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005516:	f107 030c 	add.w	r3, r7, #12
 800551a:	220c      	movs	r2, #12
 800551c:	4618      	mov	r0, r3
 800551e:	f7fe fd99 	bl	8004054 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005522:	7dfb      	ldrb	r3, [r7, #23]
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	2b00      	cmp	r3, #0
 800552a:	d032      	beq.n	8005592 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2240      	movs	r2, #64	; 0x40
 8005530:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8005534:	2301      	movs	r3, #1
 8005536:	62bb      	str	r3, [r7, #40]	; 0x28
 8005538:	e016      	b.n	8005568 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	691a      	ldr	r2, [r3, #16]
 8005544:	f107 010c 	add.w	r1, r7, #12
 8005548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554a:	f7ff fe51 	bl	80051f0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7ff feff 	bl	8005352 <dir_find>
 8005554:	4603      	mov	r3, r0
 8005556:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800555a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800555e:	2b00      	cmp	r3, #0
 8005560:	d106      	bne.n	8005570 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8005562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005564:	3301      	adds	r3, #1
 8005566:	62bb      	str	r3, [r7, #40]	; 0x28
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556a:	2b63      	cmp	r3, #99	; 0x63
 800556c:	d9e5      	bls.n	800553a <dir_register+0x66>
 800556e:	e000      	b.n	8005572 <dir_register+0x9e>
			if (res != FR_OK) break;
 8005570:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005574:	2b64      	cmp	r3, #100	; 0x64
 8005576:	d101      	bne.n	800557c <dir_register+0xa8>
 8005578:	2307      	movs	r3, #7
 800557a:	e09c      	b.n	80056b6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800557c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005580:	2b04      	cmp	r3, #4
 8005582:	d002      	beq.n	800558a <dir_register+0xb6>
 8005584:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005588:	e095      	b.n	80056b6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800558a:	7dfa      	ldrb	r2, [r7, #23]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005592:	7dfb      	ldrb	r3, [r7, #23]
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d007      	beq.n	80055ac <dir_register+0xd8>
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	330c      	adds	r3, #12
 80055a0:	4a47      	ldr	r2, [pc, #284]	; (80056c0 <dir_register+0x1ec>)
 80055a2:	fba2 2303 	umull	r2, r3, r2, r3
 80055a6:	089b      	lsrs	r3, r3, #2
 80055a8:	3301      	adds	r3, #1
 80055aa:	e000      	b.n	80055ae <dir_register+0xda>
 80055ac:	2301      	movs	r3, #1
 80055ae:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80055b0:	6a39      	ldr	r1, [r7, #32]
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7ff fcbd 	bl	8004f32 <dir_alloc>
 80055b8:	4603      	mov	r3, r0
 80055ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80055be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d148      	bne.n	8005658 <dir_register+0x184>
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	3b01      	subs	r3, #1
 80055ca:	623b      	str	r3, [r7, #32]
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d042      	beq.n	8005658 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	695a      	ldr	r2, [r3, #20]
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	015b      	lsls	r3, r3, #5
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	4619      	mov	r1, r3
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7ff fb48 	bl	8004c74 <dir_sdi>
 80055e4:	4603      	mov	r3, r0
 80055e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80055ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d132      	bne.n	8005658 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	3324      	adds	r3, #36	; 0x24
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7ff fe8a 	bl	8005310 <sum_sfn>
 80055fc:	4603      	mov	r3, r0
 80055fe:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	4619      	mov	r1, r3
 8005606:	69f8      	ldr	r0, [r7, #28]
 8005608:	f7fe ff52 	bl	80044b0 <move_window>
 800560c:	4603      	mov	r3, r0
 800560e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8005612:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005616:	2b00      	cmp	r3, #0
 8005618:	d11d      	bne.n	8005656 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	6918      	ldr	r0, [r3, #16]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a19      	ldr	r1, [r3, #32]
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	b2da      	uxtb	r2, r3
 8005626:	7efb      	ldrb	r3, [r7, #27]
 8005628:	f7ff fd7a 	bl	8005120 <put_lfn>
				fs->wflag = 1;
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	2201      	movs	r2, #1
 8005630:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005632:	2100      	movs	r1, #0
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff fba6 	bl	8004d86 <dir_next>
 800563a:	4603      	mov	r3, r0
 800563c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8005640:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005644:	2b00      	cmp	r3, #0
 8005646:	d107      	bne.n	8005658 <dir_register+0x184>
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	3b01      	subs	r3, #1
 800564c:	623b      	str	r3, [r7, #32]
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1d5      	bne.n	8005600 <dir_register+0x12c>
 8005654:	e000      	b.n	8005658 <dir_register+0x184>
				if (res != FR_OK) break;
 8005656:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005658:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800565c:	2b00      	cmp	r3, #0
 800565e:	d128      	bne.n	80056b2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	4619      	mov	r1, r3
 8005666:	69f8      	ldr	r0, [r7, #28]
 8005668:	f7fe ff22 	bl	80044b0 <move_window>
 800566c:	4603      	mov	r3, r0
 800566e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005672:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005676:	2b00      	cmp	r3, #0
 8005678:	d11b      	bne.n	80056b2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	2220      	movs	r2, #32
 8005680:	2100      	movs	r1, #0
 8005682:	4618      	mov	r0, r3
 8005684:	f7fe fd07 	bl	8004096 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a18      	ldr	r0, [r3, #32]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3324      	adds	r3, #36	; 0x24
 8005690:	220b      	movs	r2, #11
 8005692:	4619      	mov	r1, r3
 8005694:	f7fe fcde 	bl	8004054 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	330c      	adds	r3, #12
 80056a4:	f002 0218 	and.w	r2, r2, #24
 80056a8:	b2d2      	uxtb	r2, r2
 80056aa:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	2201      	movs	r2, #1
 80056b0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80056b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3730      	adds	r7, #48	; 0x30
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	4ec4ec4f 	.word	0x4ec4ec4f

080056c4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b08a      	sub	sp, #40	; 0x28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	613b      	str	r3, [r7, #16]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	2300      	movs	r3, #0
 80056de:	617b      	str	r3, [r7, #20]
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	61ba      	str	r2, [r7, #24]
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	4413      	add	r3, r2
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80056f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056f4:	2b1f      	cmp	r3, #31
 80056f6:	d940      	bls.n	800577a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80056f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056fa:	2b2f      	cmp	r3, #47	; 0x2f
 80056fc:	d006      	beq.n	800570c <create_name+0x48>
 80056fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005700:	2b5c      	cmp	r3, #92	; 0x5c
 8005702:	d110      	bne.n	8005726 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005704:	e002      	b.n	800570c <create_name+0x48>
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	3301      	adds	r3, #1
 800570a:	61bb      	str	r3, [r7, #24]
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	4413      	add	r3, r2
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	2b2f      	cmp	r3, #47	; 0x2f
 8005716:	d0f6      	beq.n	8005706 <create_name+0x42>
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	4413      	add	r3, r2
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	2b5c      	cmp	r3, #92	; 0x5c
 8005722:	d0f0      	beq.n	8005706 <create_name+0x42>
			break;
 8005724:	e02a      	b.n	800577c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2bfe      	cmp	r3, #254	; 0xfe
 800572a:	d901      	bls.n	8005730 <create_name+0x6c>
 800572c:	2306      	movs	r3, #6
 800572e:	e177      	b.n	8005a20 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005730:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005732:	b2db      	uxtb	r3, r3
 8005734:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005736:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005738:	2101      	movs	r1, #1
 800573a:	4618      	mov	r0, r3
 800573c:	f001 fbe2 	bl	8006f04 <ff_convert>
 8005740:	4603      	mov	r3, r0
 8005742:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005744:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <create_name+0x8a>
 800574a:	2306      	movs	r3, #6
 800574c:	e168      	b.n	8005a20 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800574e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005750:	2b7f      	cmp	r3, #127	; 0x7f
 8005752:	d809      	bhi.n	8005768 <create_name+0xa4>
 8005754:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005756:	4619      	mov	r1, r3
 8005758:	48b3      	ldr	r0, [pc, #716]	; (8005a28 <create_name+0x364>)
 800575a:	f7fe fcde 	bl	800411a <chk_chr>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <create_name+0xa4>
 8005764:	2306      	movs	r3, #6
 8005766:	e15b      	b.n	8005a20 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	1c5a      	adds	r2, r3, #1
 800576c:	617a      	str	r2, [r7, #20]
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005776:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005778:	e7b4      	b.n	80056e4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800577a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	441a      	add	r2, r3
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005786:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005788:	2b1f      	cmp	r3, #31
 800578a:	d801      	bhi.n	8005790 <create_name+0xcc>
 800578c:	2304      	movs	r3, #4
 800578e:	e000      	b.n	8005792 <create_name+0xce>
 8005790:	2300      	movs	r3, #0
 8005792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005796:	e011      	b.n	80057bc <create_name+0xf8>
		w = lfn[di - 1];
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800579e:	3b01      	subs	r3, #1
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	4413      	add	r3, r2
 80057a6:	881b      	ldrh	r3, [r3, #0]
 80057a8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80057aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057ac:	2b20      	cmp	r3, #32
 80057ae:	d002      	beq.n	80057b6 <create_name+0xf2>
 80057b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057b2:	2b2e      	cmp	r3, #46	; 0x2e
 80057b4:	d106      	bne.n	80057c4 <create_name+0x100>
		di--;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	3b01      	subs	r3, #1
 80057ba:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1ea      	bne.n	8005798 <create_name+0xd4>
 80057c2:	e000      	b.n	80057c6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80057c4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	4413      	add	r3, r2
 80057ce:	2200      	movs	r2, #0
 80057d0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <create_name+0x118>
 80057d8:	2306      	movs	r3, #6
 80057da:	e121      	b.n	8005a20 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3324      	adds	r3, #36	; 0x24
 80057e0:	220b      	movs	r2, #11
 80057e2:	2120      	movs	r1, #32
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fe fc56 	bl	8004096 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80057ea:	2300      	movs	r3, #0
 80057ec:	61bb      	str	r3, [r7, #24]
 80057ee:	e002      	b.n	80057f6 <create_name+0x132>
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	3301      	adds	r3, #1
 80057f4:	61bb      	str	r3, [r7, #24]
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4413      	add	r3, r2
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	2b20      	cmp	r3, #32
 8005802:	d0f5      	beq.n	80057f0 <create_name+0x12c>
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	4413      	add	r3, r2
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	2b2e      	cmp	r3, #46	; 0x2e
 8005810:	d0ee      	beq.n	80057f0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d009      	beq.n	800582c <create_name+0x168>
 8005818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800581c:	f043 0303 	orr.w	r3, r3, #3
 8005820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005824:	e002      	b.n	800582c <create_name+0x168>
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	3b01      	subs	r3, #1
 800582a:	617b      	str	r3, [r7, #20]
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d009      	beq.n	8005846 <create_name+0x182>
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005838:	3b01      	subs	r3, #1
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4413      	add	r3, r2
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	2b2e      	cmp	r3, #46	; 0x2e
 8005844:	d1ef      	bne.n	8005826 <create_name+0x162>

	i = b = 0; ni = 8;
 8005846:	2300      	movs	r3, #0
 8005848:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800584c:	2300      	movs	r3, #0
 800584e:	623b      	str	r3, [r7, #32]
 8005850:	2308      	movs	r3, #8
 8005852:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	1c5a      	adds	r2, r3, #1
 8005858:	61ba      	str	r2, [r7, #24]
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	4413      	add	r3, r2
 8005860:	881b      	ldrh	r3, [r3, #0]
 8005862:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005864:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 8090 	beq.w	800598c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800586c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800586e:	2b20      	cmp	r3, #32
 8005870:	d006      	beq.n	8005880 <create_name+0x1bc>
 8005872:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005874:	2b2e      	cmp	r3, #46	; 0x2e
 8005876:	d10a      	bne.n	800588e <create_name+0x1ca>
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	429a      	cmp	r2, r3
 800587e:	d006      	beq.n	800588e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8005880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005884:	f043 0303 	orr.w	r3, r3, #3
 8005888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800588c:	e07d      	b.n	800598a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800588e:	6a3a      	ldr	r2, [r7, #32]
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	429a      	cmp	r2, r3
 8005894:	d203      	bcs.n	800589e <create_name+0x1da>
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	429a      	cmp	r2, r3
 800589c:	d123      	bne.n	80058e6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	2b0b      	cmp	r3, #11
 80058a2:	d106      	bne.n	80058b2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80058a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058a8:	f043 0303 	orr.w	r3, r3, #3
 80058ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80058b0:	e06f      	b.n	8005992 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d005      	beq.n	80058c6 <create_name+0x202>
 80058ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058be:	f043 0303 	orr.w	r3, r3, #3
 80058c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d860      	bhi.n	8005990 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	61bb      	str	r3, [r7, #24]
 80058d2:	2308      	movs	r3, #8
 80058d4:	623b      	str	r3, [r7, #32]
 80058d6:	230b      	movs	r3, #11
 80058d8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80058da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80058e4:	e051      	b.n	800598a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80058e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058e8:	2b7f      	cmp	r3, #127	; 0x7f
 80058ea:	d914      	bls.n	8005916 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80058ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058ee:	2100      	movs	r1, #0
 80058f0:	4618      	mov	r0, r3
 80058f2:	f001 fb07 	bl	8006f04 <ff_convert>
 80058f6:	4603      	mov	r3, r0
 80058f8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80058fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d004      	beq.n	800590a <create_name+0x246>
 8005900:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005902:	3b80      	subs	r3, #128	; 0x80
 8005904:	4a49      	ldr	r2, [pc, #292]	; (8005a2c <create_name+0x368>)
 8005906:	5cd3      	ldrb	r3, [r2, r3]
 8005908:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800590a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800590e:	f043 0302 	orr.w	r3, r3, #2
 8005912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005916:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005918:	2b00      	cmp	r3, #0
 800591a:	d007      	beq.n	800592c <create_name+0x268>
 800591c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800591e:	4619      	mov	r1, r3
 8005920:	4843      	ldr	r0, [pc, #268]	; (8005a30 <create_name+0x36c>)
 8005922:	f7fe fbfa 	bl	800411a <chk_chr>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d008      	beq.n	800593e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800592c:	235f      	movs	r3, #95	; 0x5f
 800592e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005934:	f043 0303 	orr.w	r3, r3, #3
 8005938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800593c:	e01b      	b.n	8005976 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800593e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005940:	2b40      	cmp	r3, #64	; 0x40
 8005942:	d909      	bls.n	8005958 <create_name+0x294>
 8005944:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005946:	2b5a      	cmp	r3, #90	; 0x5a
 8005948:	d806      	bhi.n	8005958 <create_name+0x294>
					b |= 2;
 800594a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800594e:	f043 0302 	orr.w	r3, r3, #2
 8005952:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005956:	e00e      	b.n	8005976 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005958:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800595a:	2b60      	cmp	r3, #96	; 0x60
 800595c:	d90b      	bls.n	8005976 <create_name+0x2b2>
 800595e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005960:	2b7a      	cmp	r3, #122	; 0x7a
 8005962:	d808      	bhi.n	8005976 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005964:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005968:	f043 0301 	orr.w	r3, r3, #1
 800596c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005970:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005972:	3b20      	subs	r3, #32
 8005974:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	1c5a      	adds	r2, r3, #1
 800597a:	623a      	str	r2, [r7, #32]
 800597c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800597e:	b2d1      	uxtb	r1, r2
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	4413      	add	r3, r2
 8005984:	460a      	mov	r2, r1
 8005986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800598a:	e763      	b.n	8005854 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800598c:	bf00      	nop
 800598e:	e000      	b.n	8005992 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8005990:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005998:	2be5      	cmp	r3, #229	; 0xe5
 800599a:	d103      	bne.n	80059a4 <create_name+0x2e0>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2205      	movs	r2, #5
 80059a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	2b08      	cmp	r3, #8
 80059a8:	d104      	bne.n	80059b4 <create_name+0x2f0>
 80059aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80059b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80059b8:	f003 030c 	and.w	r3, r3, #12
 80059bc:	2b0c      	cmp	r3, #12
 80059be:	d005      	beq.n	80059cc <create_name+0x308>
 80059c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80059c4:	f003 0303 	and.w	r3, r3, #3
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d105      	bne.n	80059d8 <create_name+0x314>
 80059cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059d0:	f043 0302 	orr.w	r3, r3, #2
 80059d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80059d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d117      	bne.n	8005a14 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80059e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80059e8:	f003 0303 	and.w	r3, r3, #3
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d105      	bne.n	80059fc <create_name+0x338>
 80059f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059f4:	f043 0310 	orr.w	r3, r3, #16
 80059f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80059fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a00:	f003 030c 	and.w	r3, r3, #12
 8005a04:	2b04      	cmp	r3, #4
 8005a06:	d105      	bne.n	8005a14 <create_name+0x350>
 8005a08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a0c:	f043 0308 	orr.w	r3, r3, #8
 8005a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005a1a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8005a1e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3728      	adds	r7, #40	; 0x28
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	08008070 	.word	0x08008070
 8005a2c:	080080d0 	.word	0x080080d0
 8005a30:	0800807c 	.word	0x0800807c

08005a34 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005a48:	e002      	b.n	8005a50 <follow_path+0x1c>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	603b      	str	r3, [r7, #0]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	2b2f      	cmp	r3, #47	; 0x2f
 8005a56:	d0f8      	beq.n	8005a4a <follow_path+0x16>
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	2b5c      	cmp	r3, #92	; 0x5c
 8005a5e:	d0f4      	beq.n	8005a4a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	2200      	movs	r2, #0
 8005a64:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	2b1f      	cmp	r3, #31
 8005a6c:	d80a      	bhi.n	8005a84 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2280      	movs	r2, #128	; 0x80
 8005a72:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005a76:	2100      	movs	r1, #0
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f7ff f8fb 	bl	8004c74 <dir_sdi>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	75fb      	strb	r3, [r7, #23]
 8005a82:	e048      	b.n	8005b16 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005a84:	463b      	mov	r3, r7
 8005a86:	4619      	mov	r1, r3
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f7ff fe1b 	bl	80056c4 <create_name>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005a92:	7dfb      	ldrb	r3, [r7, #23]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d139      	bne.n	8005b0c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f7ff fc5a 	bl	8005352 <dir_find>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005aa8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005aaa:	7dfb      	ldrb	r3, [r7, #23]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00a      	beq.n	8005ac6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005ab0:	7dfb      	ldrb	r3, [r7, #23]
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d12c      	bne.n	8005b10 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005ab6:	7afb      	ldrb	r3, [r7, #11]
 8005ab8:	f003 0304 	and.w	r3, r3, #4
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d127      	bne.n	8005b10 <follow_path+0xdc>
 8005ac0:	2305      	movs	r3, #5
 8005ac2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005ac4:	e024      	b.n	8005b10 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005ac6:	7afb      	ldrb	r3, [r7, #11]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d121      	bne.n	8005b14 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	799b      	ldrb	r3, [r3, #6]
 8005ad4:	f003 0310 	and.w	r3, r3, #16
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d102      	bne.n	8005ae2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005adc:	2305      	movs	r3, #5
 8005ade:	75fb      	strb	r3, [r7, #23]
 8005ae0:	e019      	b.n	8005b16 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	8992      	ldrh	r2, [r2, #12]
 8005af0:	fbb3 f0f2 	udiv	r0, r3, r2
 8005af4:	fb02 f200 	mul.w	r2, r2, r0
 8005af8:	1a9b      	subs	r3, r3, r2
 8005afa:	440b      	add	r3, r1
 8005afc:	4619      	mov	r1, r3
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f7ff fa5e 	bl	8004fc0 <ld_clust>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005b0a:	e7bb      	b.n	8005a84 <follow_path+0x50>
			if (res != FR_OK) break;
 8005b0c:	bf00      	nop
 8005b0e:	e002      	b.n	8005b16 <follow_path+0xe2>
				break;
 8005b10:	bf00      	nop
 8005b12:	e000      	b.n	8005b16 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005b14:	bf00      	nop
			}
		}
	}

	return res;
 8005b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3718      	adds	r7, #24
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b087      	sub	sp, #28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005b28:	f04f 33ff 	mov.w	r3, #4294967295
 8005b2c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d031      	beq.n	8005b9a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	e002      	b.n	8005b44 <get_ldnumber+0x24>
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	3301      	adds	r3, #1
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b1f      	cmp	r3, #31
 8005b4a:	d903      	bls.n	8005b54 <get_ldnumber+0x34>
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b3a      	cmp	r3, #58	; 0x3a
 8005b52:	d1f4      	bne.n	8005b3e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b3a      	cmp	r3, #58	; 0x3a
 8005b5a:	d11c      	bne.n	8005b96 <get_ldnumber+0x76>
			tp = *path;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	1c5a      	adds	r2, r3, #1
 8005b66:	60fa      	str	r2, [r7, #12]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	3b30      	subs	r3, #48	; 0x30
 8005b6c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2b09      	cmp	r3, #9
 8005b72:	d80e      	bhi.n	8005b92 <get_ldnumber+0x72>
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d10a      	bne.n	8005b92 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d107      	bne.n	8005b92 <get_ldnumber+0x72>
					vol = (int)i;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	617b      	str	r3, [r7, #20]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	e002      	b.n	8005b9c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005b96:	2300      	movs	r3, #0
 8005b98:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005b9a:	693b      	ldr	r3, [r7, #16]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	371c      	adds	r7, #28
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	70da      	strb	r2, [r3, #3]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f04f 32ff 	mov.w	r2, #4294967295
 8005bbe:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005bc0:	6839      	ldr	r1, [r7, #0]
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7fe fc74 	bl	80044b0 <move_window>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <check_fs+0x2a>
 8005bce:	2304      	movs	r3, #4
 8005bd0:	e038      	b.n	8005c44 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	3338      	adds	r3, #56	; 0x38
 8005bd6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fe f9b8 	bl	8003f50 <ld_word>
 8005be0:	4603      	mov	r3, r0
 8005be2:	461a      	mov	r2, r3
 8005be4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d001      	beq.n	8005bf0 <check_fs+0x48>
 8005bec:	2303      	movs	r3, #3
 8005bee:	e029      	b.n	8005c44 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bf6:	2be9      	cmp	r3, #233	; 0xe9
 8005bf8:	d009      	beq.n	8005c0e <check_fs+0x66>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c00:	2beb      	cmp	r3, #235	; 0xeb
 8005c02:	d11e      	bne.n	8005c42 <check_fs+0x9a>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005c0a:	2b90      	cmp	r3, #144	; 0x90
 8005c0c:	d119      	bne.n	8005c42 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	3338      	adds	r3, #56	; 0x38
 8005c12:	3336      	adds	r3, #54	; 0x36
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7fe f9b3 	bl	8003f80 <ld_dword>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c20:	4a0a      	ldr	r2, [pc, #40]	; (8005c4c <check_fs+0xa4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d101      	bne.n	8005c2a <check_fs+0x82>
 8005c26:	2300      	movs	r3, #0
 8005c28:	e00c      	b.n	8005c44 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	3338      	adds	r3, #56	; 0x38
 8005c2e:	3352      	adds	r3, #82	; 0x52
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7fe f9a5 	bl	8003f80 <ld_dword>
 8005c36:	4603      	mov	r3, r0
 8005c38:	4a05      	ldr	r2, [pc, #20]	; (8005c50 <check_fs+0xa8>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d101      	bne.n	8005c42 <check_fs+0x9a>
 8005c3e:	2300      	movs	r3, #0
 8005c40:	e000      	b.n	8005c44 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005c42:	2302      	movs	r3, #2
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	00544146 	.word	0x00544146
 8005c50:	33544146 	.word	0x33544146

08005c54 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b096      	sub	sp, #88	; 0x58
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f7ff ff59 	bl	8005b20 <get_ldnumber>
 8005c6e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	da01      	bge.n	8005c7a <find_volume+0x26>
 8005c76:	230b      	movs	r3, #11
 8005c78:	e268      	b.n	800614c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005c7a:	4ab0      	ldr	r2, [pc, #704]	; (8005f3c <find_volume+0x2e8>)
 8005c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c82:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <find_volume+0x3a>
 8005c8a:	230c      	movs	r3, #12
 8005c8c:	e25e      	b.n	800614c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c92:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005c94:	79fb      	ldrb	r3, [r7, #7]
 8005c96:	f023 0301 	bic.w	r3, r3, #1
 8005c9a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d01a      	beq.n	8005cda <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca6:	785b      	ldrb	r3, [r3, #1]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7fe f8b3 	bl	8003e14 <disk_status>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005cb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10c      	bne.n	8005cda <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005cc0:	79fb      	ldrb	r3, [r7, #7]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d007      	beq.n	8005cd6 <find_volume+0x82>
 8005cc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005cca:	f003 0304 	and.w	r3, r3, #4
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005cd2:	230a      	movs	r3, #10
 8005cd4:	e23a      	b.n	800614c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	e238      	b.n	800614c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cdc:	2200      	movs	r2, #0
 8005cde:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cea:	785b      	ldrb	r3, [r3, #1]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7fe f8ab 	bl	8003e48 <disk_initialize>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005cf8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005d04:	2303      	movs	r3, #3
 8005d06:	e221      	b.n	800614c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005d08:	79fb      	ldrb	r3, [r7, #7]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d007      	beq.n	8005d1e <find_volume+0xca>
 8005d0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d12:	f003 0304 	and.w	r3, r3, #4
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005d1a:	230a      	movs	r3, #10
 8005d1c:	e216      	b.n	800614c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d20:	7858      	ldrb	r0, [r3, #1]
 8005d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d24:	330c      	adds	r3, #12
 8005d26:	461a      	mov	r2, r3
 8005d28:	2102      	movs	r1, #2
 8005d2a:	f7fe f8f3 	bl	8003f14 <disk_ioctl>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <find_volume+0xe4>
 8005d34:	2301      	movs	r3, #1
 8005d36:	e209      	b.n	800614c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3a:	899b      	ldrh	r3, [r3, #12]
 8005d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d40:	d80d      	bhi.n	8005d5e <find_volume+0x10a>
 8005d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d44:	899b      	ldrh	r3, [r3, #12]
 8005d46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d4a:	d308      	bcc.n	8005d5e <find_volume+0x10a>
 8005d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4e:	899b      	ldrh	r3, [r3, #12]
 8005d50:	461a      	mov	r2, r3
 8005d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d54:	899b      	ldrh	r3, [r3, #12]
 8005d56:	3b01      	subs	r3, #1
 8005d58:	4013      	ands	r3, r2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <find_volume+0x10e>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e1f4      	b.n	800614c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005d62:	2300      	movs	r3, #0
 8005d64:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005d66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d6a:	f7ff ff1d 	bl	8005ba8 <check_fs>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005d74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d14b      	bne.n	8005e14 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	643b      	str	r3, [r7, #64]	; 0x40
 8005d80:	e01f      	b.n	8005dc2 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d84:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005d90:	4413      	add	r3, r2
 8005d92:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d96:	3304      	adds	r3, #4
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d006      	beq.n	8005dac <find_volume+0x158>
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da0:	3308      	adds	r3, #8
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fe f8ec 	bl	8003f80 <ld_dword>
 8005da8:	4602      	mov	r2, r0
 8005daa:	e000      	b.n	8005dae <find_volume+0x15a>
 8005dac:	2200      	movs	r2, #0
 8005dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005db6:	440b      	add	r3, r1
 8005db8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	643b      	str	r3, [r7, #64]	; 0x40
 8005dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d9dc      	bls.n	8005d82 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005dc8:	2300      	movs	r3, #0
 8005dca:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d002      	beq.n	8005dd8 <find_volume+0x184>
 8005dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005de0:	4413      	add	r3, r2
 8005de2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005de6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d005      	beq.n	8005dfa <find_volume+0x1a6>
 8005dee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005df0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005df2:	f7ff fed9 	bl	8005ba8 <check_fs>
 8005df6:	4603      	mov	r3, r0
 8005df8:	e000      	b.n	8005dfc <find_volume+0x1a8>
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005e00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d905      	bls.n	8005e14 <find_volume+0x1c0>
 8005e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	643b      	str	r3, [r7, #64]	; 0x40
 8005e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e10:	2b03      	cmp	r3, #3
 8005e12:	d9e1      	bls.n	8005dd8 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005e14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e18:	2b04      	cmp	r3, #4
 8005e1a:	d101      	bne.n	8005e20 <find_volume+0x1cc>
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e195      	b.n	800614c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005e20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d901      	bls.n	8005e2c <find_volume+0x1d8>
 8005e28:	230d      	movs	r3, #13
 8005e2a:	e18f      	b.n	800614c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2e:	3338      	adds	r3, #56	; 0x38
 8005e30:	330b      	adds	r3, #11
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fe f88c 	bl	8003f50 <ld_word>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3e:	899b      	ldrh	r3, [r3, #12]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d001      	beq.n	8005e48 <find_volume+0x1f4>
 8005e44:	230d      	movs	r3, #13
 8005e46:	e181      	b.n	800614c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4a:	3338      	adds	r3, #56	; 0x38
 8005e4c:	3316      	adds	r3, #22
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fe f87e 	bl	8003f50 <ld_word>
 8005e54:	4603      	mov	r3, r0
 8005e56:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d106      	bne.n	8005e6c <find_volume+0x218>
 8005e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e60:	3338      	adds	r3, #56	; 0x38
 8005e62:	3324      	adds	r3, #36	; 0x24
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7fe f88b 	bl	8003f80 <ld_dword>
 8005e6a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e70:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e74:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7e:	789b      	ldrb	r3, [r3, #2]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d005      	beq.n	8005e90 <find_volume+0x23c>
 8005e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e86:	789b      	ldrb	r3, [r3, #2]
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d001      	beq.n	8005e90 <find_volume+0x23c>
 8005e8c:	230d      	movs	r3, #13
 8005e8e:	e15d      	b.n	800614c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e92:	789b      	ldrb	r3, [r3, #2]
 8005e94:	461a      	mov	r2, r3
 8005e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e98:	fb02 f303 	mul.w	r3, r2, r3
 8005e9c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eac:	895b      	ldrh	r3, [r3, #10]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d008      	beq.n	8005ec4 <find_volume+0x270>
 8005eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb4:	895b      	ldrh	r3, [r3, #10]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eba:	895b      	ldrh	r3, [r3, #10]
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <find_volume+0x274>
 8005ec4:	230d      	movs	r3, #13
 8005ec6:	e141      	b.n	800614c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eca:	3338      	adds	r3, #56	; 0x38
 8005ecc:	3311      	adds	r3, #17
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fe f83e 	bl	8003f50 <ld_word>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eda:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ede:	891b      	ldrh	r3, [r3, #8]
 8005ee0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ee2:	8992      	ldrh	r2, [r2, #12]
 8005ee4:	0952      	lsrs	r2, r2, #5
 8005ee6:	b292      	uxth	r2, r2
 8005ee8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005eec:	fb02 f201 	mul.w	r2, r2, r1
 8005ef0:	1a9b      	subs	r3, r3, r2
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <find_volume+0x2a8>
 8005ef8:	230d      	movs	r3, #13
 8005efa:	e127      	b.n	800614c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efe:	3338      	adds	r3, #56	; 0x38
 8005f00:	3313      	adds	r3, #19
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fe f824 	bl	8003f50 <ld_word>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d106      	bne.n	8005f20 <find_volume+0x2cc>
 8005f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f14:	3338      	adds	r3, #56	; 0x38
 8005f16:	3320      	adds	r3, #32
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fe f831 	bl	8003f80 <ld_dword>
 8005f1e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f22:	3338      	adds	r3, #56	; 0x38
 8005f24:	330e      	adds	r3, #14
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7fe f812 	bl	8003f50 <ld_word>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005f30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d104      	bne.n	8005f40 <find_volume+0x2ec>
 8005f36:	230d      	movs	r3, #13
 8005f38:	e108      	b.n	800614c <find_volume+0x4f8>
 8005f3a:	bf00      	nop
 8005f3c:	200000b0 	.word	0x200000b0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005f40:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f44:	4413      	add	r3, r2
 8005f46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f48:	8911      	ldrh	r1, [r2, #8]
 8005f4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f4c:	8992      	ldrh	r2, [r2, #12]
 8005f4e:	0952      	lsrs	r2, r2, #5
 8005f50:	b292      	uxth	r2, r2
 8005f52:	fbb1 f2f2 	udiv	r2, r1, r2
 8005f56:	b292      	uxth	r2, r2
 8005f58:	4413      	add	r3, r2
 8005f5a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005f5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d201      	bcs.n	8005f68 <find_volume+0x314>
 8005f64:	230d      	movs	r3, #13
 8005f66:	e0f1      	b.n	800614c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005f68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f70:	8952      	ldrh	r2, [r2, #10]
 8005f72:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f76:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <find_volume+0x32e>
 8005f7e:	230d      	movs	r3, #13
 8005f80:	e0e4      	b.n	800614c <find_volume+0x4f8>
		fmt = FS_FAT32;
 8005f82:	2303      	movs	r3, #3
 8005f84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d802      	bhi.n	8005f98 <find_volume+0x344>
 8005f92:	2302      	movs	r3, #2
 8005f94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d802      	bhi.n	8005fa8 <find_volume+0x354>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	1c9a      	adds	r2, r3, #2
 8005fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fae:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8005fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005fb4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005fb6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fba:	441a      	add	r2, r3
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbe:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8005fc0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc4:	441a      	add	r2, r3
 8005fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc8:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8005fca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	d11e      	bne.n	8006010 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd4:	3338      	adds	r3, #56	; 0x38
 8005fd6:	332a      	adds	r3, #42	; 0x2a
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7fd ffb9 	bl	8003f50 <ld_word>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <find_volume+0x394>
 8005fe4:	230d      	movs	r3, #13
 8005fe6:	e0b1      	b.n	800614c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fea:	891b      	ldrh	r3, [r3, #8]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <find_volume+0x3a0>
 8005ff0:	230d      	movs	r3, #13
 8005ff2:	e0ab      	b.n	800614c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff6:	3338      	adds	r3, #56	; 0x38
 8005ff8:	332c      	adds	r3, #44	; 0x2c
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fd ffc0 	bl	8003f80 <ld_dword>
 8006000:	4602      	mov	r2, r0
 8006002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006004:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	647b      	str	r3, [r7, #68]	; 0x44
 800600e:	e01f      	b.n	8006050 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006012:	891b      	ldrh	r3, [r3, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <find_volume+0x3c8>
 8006018:	230d      	movs	r3, #13
 800601a:	e097      	b.n	800614c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800601c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006022:	441a      	add	r2, r3
 8006024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006026:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006028:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800602c:	2b02      	cmp	r3, #2
 800602e:	d103      	bne.n	8006038 <find_volume+0x3e4>
 8006030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006032:	69db      	ldr	r3, [r3, #28]
 8006034:	005b      	lsls	r3, r3, #1
 8006036:	e00a      	b.n	800604e <find_volume+0x3fa>
 8006038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603a:	69da      	ldr	r2, [r3, #28]
 800603c:	4613      	mov	r3, r2
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	4413      	add	r3, r2
 8006042:	085a      	lsrs	r2, r3, #1
 8006044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800604e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006052:	6a1a      	ldr	r2, [r3, #32]
 8006054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006056:	899b      	ldrh	r3, [r3, #12]
 8006058:	4619      	mov	r1, r3
 800605a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800605c:	440b      	add	r3, r1
 800605e:	3b01      	subs	r3, #1
 8006060:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006062:	8989      	ldrh	r1, [r1, #12]
 8006064:	fbb3 f3f1 	udiv	r3, r3, r1
 8006068:	429a      	cmp	r2, r3
 800606a:	d201      	bcs.n	8006070 <find_volume+0x41c>
 800606c:	230d      	movs	r3, #13
 800606e:	e06d      	b.n	800614c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006072:	f04f 32ff 	mov.w	r2, #4294967295
 8006076:	619a      	str	r2, [r3, #24]
 8006078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607a:	699a      	ldr	r2, [r3, #24]
 800607c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006082:	2280      	movs	r2, #128	; 0x80
 8006084:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006086:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800608a:	2b03      	cmp	r3, #3
 800608c:	d149      	bne.n	8006122 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800608e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006090:	3338      	adds	r3, #56	; 0x38
 8006092:	3330      	adds	r3, #48	; 0x30
 8006094:	4618      	mov	r0, r3
 8006096:	f7fd ff5b 	bl	8003f50 <ld_word>
 800609a:	4603      	mov	r3, r0
 800609c:	2b01      	cmp	r3, #1
 800609e:	d140      	bne.n	8006122 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80060a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060a2:	3301      	adds	r3, #1
 80060a4:	4619      	mov	r1, r3
 80060a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80060a8:	f7fe fa02 	bl	80044b0 <move_window>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d137      	bne.n	8006122 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80060b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b4:	2200      	movs	r2, #0
 80060b6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80060b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ba:	3338      	adds	r3, #56	; 0x38
 80060bc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7fd ff45 	bl	8003f50 <ld_word>
 80060c6:	4603      	mov	r3, r0
 80060c8:	461a      	mov	r2, r3
 80060ca:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d127      	bne.n	8006122 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80060d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d4:	3338      	adds	r3, #56	; 0x38
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fd ff52 	bl	8003f80 <ld_dword>
 80060dc:	4603      	mov	r3, r0
 80060de:	4a1d      	ldr	r2, [pc, #116]	; (8006154 <find_volume+0x500>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d11e      	bne.n	8006122 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80060e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e6:	3338      	adds	r3, #56	; 0x38
 80060e8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7fd ff47 	bl	8003f80 <ld_dword>
 80060f2:	4603      	mov	r3, r0
 80060f4:	4a18      	ldr	r2, [pc, #96]	; (8006158 <find_volume+0x504>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d113      	bne.n	8006122 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80060fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fc:	3338      	adds	r3, #56	; 0x38
 80060fe:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006102:	4618      	mov	r0, r3
 8006104:	f7fd ff3c 	bl	8003f80 <ld_dword>
 8006108:	4602      	mov	r2, r0
 800610a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610c:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800610e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006110:	3338      	adds	r3, #56	; 0x38
 8006112:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006116:	4618      	mov	r0, r3
 8006118:	f7fd ff32 	bl	8003f80 <ld_dword>
 800611c:	4602      	mov	r2, r0
 800611e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006120:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006124:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006128:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800612a:	4b0c      	ldr	r3, [pc, #48]	; (800615c <find_volume+0x508>)
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	3301      	adds	r3, #1
 8006130:	b29a      	uxth	r2, r3
 8006132:	4b0a      	ldr	r3, [pc, #40]	; (800615c <find_volume+0x508>)
 8006134:	801a      	strh	r2, [r3, #0]
 8006136:	4b09      	ldr	r3, [pc, #36]	; (800615c <find_volume+0x508>)
 8006138:	881a      	ldrh	r2, [r3, #0]
 800613a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800613e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006140:	4a07      	ldr	r2, [pc, #28]	; (8006160 <find_volume+0x50c>)
 8006142:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006144:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006146:	f7fe f94b 	bl	80043e0 <clear_lock>
#endif
	return FR_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3758      	adds	r7, #88	; 0x58
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	41615252 	.word	0x41615252
 8006158:	61417272 	.word	0x61417272
 800615c:	200000b4 	.word	0x200000b4
 8006160:	200000d8 	.word	0x200000d8

08006164 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800616e:	2309      	movs	r3, #9
 8006170:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d01c      	beq.n	80061b2 <validate+0x4e>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d018      	beq.n	80061b2 <validate+0x4e>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d013      	beq.n	80061b2 <validate+0x4e>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	889a      	ldrh	r2, [r3, #4]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	88db      	ldrh	r3, [r3, #6]
 8006194:	429a      	cmp	r2, r3
 8006196:	d10c      	bne.n	80061b2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	785b      	ldrb	r3, [r3, #1]
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fd fe38 	bl	8003e14 <disk_status>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <validate+0x4e>
			res = FR_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80061b2:	7bfb      	ldrb	r3, [r7, #15]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d102      	bne.n	80061be <validate+0x5a>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	e000      	b.n	80061c0 <validate+0x5c>
 80061be:	2300      	movs	r3, #0
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	6013      	str	r3, [r2, #0]
	return res;
 80061c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
	...

080061d0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b088      	sub	sp, #32
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	4613      	mov	r3, r2
 80061dc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80061e2:	f107 0310 	add.w	r3, r7, #16
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7ff fc9a 	bl	8005b20 <get_ldnumber>
 80061ec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	da01      	bge.n	80061f8 <f_mount+0x28>
 80061f4:	230b      	movs	r3, #11
 80061f6:	e02b      	b.n	8006250 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80061f8:	4a17      	ldr	r2, [pc, #92]	; (8006258 <f_mount+0x88>)
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006200:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d005      	beq.n	8006214 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006208:	69b8      	ldr	r0, [r7, #24]
 800620a:	f7fe f8e9 	bl	80043e0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	2200      	movs	r2, #0
 8006212:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	490d      	ldr	r1, [pc, #52]	; (8006258 <f_mount+0x88>)
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d002      	beq.n	8006236 <f_mount+0x66>
 8006230:	79fb      	ldrb	r3, [r7, #7]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d001      	beq.n	800623a <f_mount+0x6a>
 8006236:	2300      	movs	r3, #0
 8006238:	e00a      	b.n	8006250 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800623a:	f107 010c 	add.w	r1, r7, #12
 800623e:	f107 0308 	add.w	r3, r7, #8
 8006242:	2200      	movs	r2, #0
 8006244:	4618      	mov	r0, r3
 8006246:	f7ff fd05 	bl	8005c54 <find_volume>
 800624a:	4603      	mov	r3, r0
 800624c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800624e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006250:	4618      	mov	r0, r3
 8006252:	3720      	adds	r7, #32
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	200000b0 	.word	0x200000b0

0800625c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b09a      	sub	sp, #104	; 0x68
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	4613      	mov	r3, r2
 8006268:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <f_open+0x18>
 8006270:	2309      	movs	r3, #9
 8006272:	e1bb      	b.n	80065ec <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006274:	79fb      	ldrb	r3, [r7, #7]
 8006276:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800627a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800627c:	79fa      	ldrb	r2, [r7, #7]
 800627e:	f107 0114 	add.w	r1, r7, #20
 8006282:	f107 0308 	add.w	r3, r7, #8
 8006286:	4618      	mov	r0, r3
 8006288:	f7ff fce4 	bl	8005c54 <find_volume>
 800628c:	4603      	mov	r3, r0
 800628e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8006292:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006296:	2b00      	cmp	r3, #0
 8006298:	f040 819f 	bne.w	80065da <f_open+0x37e>
		dj.obj.fs = fs;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	f107 0318 	add.w	r3, r7, #24
 80062a6:	4611      	mov	r1, r2
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7ff fbc3 	bl	8005a34 <follow_path>
 80062ae:	4603      	mov	r3, r0
 80062b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80062b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d11a      	bne.n	80062f2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80062bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80062c0:	b25b      	sxtb	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	da03      	bge.n	80062ce <f_open+0x72>
				res = FR_INVALID_NAME;
 80062c6:	2306      	movs	r3, #6
 80062c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80062cc:	e011      	b.n	80062f2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80062ce:	79fb      	ldrb	r3, [r7, #7]
 80062d0:	f023 0301 	bic.w	r3, r3, #1
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	bf14      	ite	ne
 80062d8:	2301      	movne	r3, #1
 80062da:	2300      	moveq	r3, #0
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	461a      	mov	r2, r3
 80062e0:	f107 0318 	add.w	r3, r7, #24
 80062e4:	4611      	mov	r1, r2
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fd ff32 	bl	8004150 <chk_lock>
 80062ec:	4603      	mov	r3, r0
 80062ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80062f2:	79fb      	ldrb	r3, [r7, #7]
 80062f4:	f003 031c 	and.w	r3, r3, #28
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d07f      	beq.n	80063fc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80062fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006300:	2b00      	cmp	r3, #0
 8006302:	d017      	beq.n	8006334 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006304:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006308:	2b04      	cmp	r3, #4
 800630a:	d10e      	bne.n	800632a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800630c:	f7fd ff7c 	bl	8004208 <enq_lock>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d006      	beq.n	8006324 <f_open+0xc8>
 8006316:	f107 0318 	add.w	r3, r7, #24
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff f8da 	bl	80054d4 <dir_register>
 8006320:	4603      	mov	r3, r0
 8006322:	e000      	b.n	8006326 <f_open+0xca>
 8006324:	2312      	movs	r3, #18
 8006326:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800632a:	79fb      	ldrb	r3, [r7, #7]
 800632c:	f043 0308 	orr.w	r3, r3, #8
 8006330:	71fb      	strb	r3, [r7, #7]
 8006332:	e010      	b.n	8006356 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006334:	7fbb      	ldrb	r3, [r7, #30]
 8006336:	f003 0311 	and.w	r3, r3, #17
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <f_open+0xea>
					res = FR_DENIED;
 800633e:	2307      	movs	r3, #7
 8006340:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006344:	e007      	b.n	8006356 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006346:	79fb      	ldrb	r3, [r7, #7]
 8006348:	f003 0304 	and.w	r3, r3, #4
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <f_open+0xfa>
 8006350:	2308      	movs	r3, #8
 8006352:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006356:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800635a:	2b00      	cmp	r3, #0
 800635c:	d168      	bne.n	8006430 <f_open+0x1d4>
 800635e:	79fb      	ldrb	r3, [r7, #7]
 8006360:	f003 0308 	and.w	r3, r3, #8
 8006364:	2b00      	cmp	r3, #0
 8006366:	d063      	beq.n	8006430 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006368:	f7fd fce2 	bl	8003d30 <get_fattime>
 800636c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800636e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006370:	330e      	adds	r3, #14
 8006372:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006374:	4618      	mov	r0, r3
 8006376:	f7fd fe41 	bl	8003ffc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800637a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637c:	3316      	adds	r3, #22
 800637e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006380:	4618      	mov	r0, r3
 8006382:	f7fd fe3b 	bl	8003ffc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006388:	330b      	adds	r3, #11
 800638a:	2220      	movs	r2, #32
 800638c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006392:	4611      	mov	r1, r2
 8006394:	4618      	mov	r0, r3
 8006396:	f7fe fe13 	bl	8004fc0 <ld_clust>
 800639a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063a0:	2200      	movs	r2, #0
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fe fe2b 	bl	8004ffe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80063a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063aa:	331c      	adds	r3, #28
 80063ac:	2100      	movs	r1, #0
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fd fe24 	bl	8003ffc <st_dword>
					fs->wflag = 1;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2201      	movs	r2, #1
 80063b8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80063ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d037      	beq.n	8006430 <f_open+0x1d4>
						dw = fs->winsect;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80063c6:	f107 0318 	add.w	r3, r7, #24
 80063ca:	2200      	movs	r2, #0
 80063cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7fe fb1b 	bl	8004a0a <remove_chain>
 80063d4:	4603      	mov	r3, r0
 80063d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80063da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d126      	bne.n	8006430 <f_open+0x1d4>
							res = move_window(fs, dw);
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fe f862 	bl	80044b0 <move_window>
 80063ec:	4603      	mov	r3, r0
 80063ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80063f6:	3a01      	subs	r2, #1
 80063f8:	615a      	str	r2, [r3, #20]
 80063fa:	e019      	b.n	8006430 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80063fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006400:	2b00      	cmp	r3, #0
 8006402:	d115      	bne.n	8006430 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006404:	7fbb      	ldrb	r3, [r7, #30]
 8006406:	f003 0310 	and.w	r3, r3, #16
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <f_open+0x1ba>
					res = FR_NO_FILE;
 800640e:	2304      	movs	r3, #4
 8006410:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006414:	e00c      	b.n	8006430 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006416:	79fb      	ldrb	r3, [r7, #7]
 8006418:	f003 0302 	and.w	r3, r3, #2
 800641c:	2b00      	cmp	r3, #0
 800641e:	d007      	beq.n	8006430 <f_open+0x1d4>
 8006420:	7fbb      	ldrb	r3, [r7, #30]
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d002      	beq.n	8006430 <f_open+0x1d4>
						res = FR_DENIED;
 800642a:	2307      	movs	r3, #7
 800642c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8006430:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006434:	2b00      	cmp	r3, #0
 8006436:	d128      	bne.n	800648a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006438:	79fb      	ldrb	r3, [r7, #7]
 800643a:	f003 0308 	and.w	r3, r3, #8
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006442:	79fb      	ldrb	r3, [r7, #7]
 8006444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006448:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006452:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006458:	79fb      	ldrb	r3, [r7, #7]
 800645a:	f023 0301 	bic.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	bf14      	ite	ne
 8006462:	2301      	movne	r3, #1
 8006464:	2300      	moveq	r3, #0
 8006466:	b2db      	uxtb	r3, r3
 8006468:	461a      	mov	r2, r3
 800646a:	f107 0318 	add.w	r3, r7, #24
 800646e:	4611      	mov	r1, r2
 8006470:	4618      	mov	r0, r3
 8006472:	f7fd feeb 	bl	800424c <inc_lock>
 8006476:	4602      	mov	r2, r0
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d102      	bne.n	800648a <f_open+0x22e>
 8006484:	2302      	movs	r3, #2
 8006486:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800648a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800648e:	2b00      	cmp	r3, #0
 8006490:	f040 80a3 	bne.w	80065da <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006498:	4611      	mov	r1, r2
 800649a:	4618      	mov	r0, r3
 800649c:	f7fe fd90 	bl	8004fc0 <ld_clust>
 80064a0:	4602      	mov	r2, r0
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80064a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a8:	331c      	adds	r3, #28
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fd fd68 	bl	8003f80 <ld_dword>
 80064b0:	4602      	mov	r2, r0
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	88da      	ldrh	r2, [r3, #6]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	79fa      	ldrb	r2, [r7, #7]
 80064ce:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	3330      	adds	r3, #48	; 0x30
 80064e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80064ea:	2100      	movs	r1, #0
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7fd fdd2 	bl	8004096 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80064f2:	79fb      	ldrb	r3, [r7, #7]
 80064f4:	f003 0320 	and.w	r3, r3, #32
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d06e      	beq.n	80065da <f_open+0x37e>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d06a      	beq.n	80065da <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	68da      	ldr	r2, [r3, #12]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	895b      	ldrh	r3, [r3, #10]
 8006510:	461a      	mov	r2, r3
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	899b      	ldrh	r3, [r3, #12]
 8006516:	fb03 f302 	mul.w	r3, r3, r2
 800651a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006528:	e016      	b.n	8006558 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800652e:	4618      	mov	r0, r3
 8006530:	f7fe f87b 	bl	800462a <get_fat>
 8006534:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8006536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006538:	2b01      	cmp	r3, #1
 800653a:	d802      	bhi.n	8006542 <f_open+0x2e6>
 800653c:	2302      	movs	r3, #2
 800653e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006548:	d102      	bne.n	8006550 <f_open+0x2f4>
 800654a:	2301      	movs	r3, #1
 800654c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006550:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006558:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800655c:	2b00      	cmp	r3, #0
 800655e:	d103      	bne.n	8006568 <f_open+0x30c>
 8006560:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006564:	429a      	cmp	r2, r3
 8006566:	d8e0      	bhi.n	800652a <f_open+0x2ce>
				}
				fp->clust = clst;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800656c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800656e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006572:	2b00      	cmp	r3, #0
 8006574:	d131      	bne.n	80065da <f_open+0x37e>
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	899b      	ldrh	r3, [r3, #12]
 800657a:	461a      	mov	r2, r3
 800657c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800657e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006582:	fb02 f201 	mul.w	r2, r2, r1
 8006586:	1a9b      	subs	r3, r3, r2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d026      	beq.n	80065da <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006590:	4618      	mov	r0, r3
 8006592:	f7fe f82b 	bl	80045ec <clust2sect>
 8006596:	64f8      	str	r0, [r7, #76]	; 0x4c
 8006598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800659a:	2b00      	cmp	r3, #0
 800659c:	d103      	bne.n	80065a6 <f_open+0x34a>
						res = FR_INT_ERR;
 800659e:	2302      	movs	r3, #2
 80065a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80065a4:	e019      	b.n	80065da <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	899b      	ldrh	r3, [r3, #12]
 80065aa:	461a      	mov	r2, r3
 80065ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80065b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065b4:	441a      	add	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	7858      	ldrb	r0, [r3, #1]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6a1a      	ldr	r2, [r3, #32]
 80065c8:	2301      	movs	r3, #1
 80065ca:	f7fd fc63 	bl	8003e94 <disk_read>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <f_open+0x37e>
 80065d4:	2301      	movs	r3, #1
 80065d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80065da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <f_open+0x38c>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80065e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3768      	adds	r7, #104	; 0x68
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b08e      	sub	sp, #56	; 0x38
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
 8006600:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f107 0214 	add.w	r2, r7, #20
 8006612:	4611      	mov	r1, r2
 8006614:	4618      	mov	r0, r3
 8006616:	f7ff fda5 	bl	8006164 <validate>
 800661a:	4603      	mov	r3, r0
 800661c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006620:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006624:	2b00      	cmp	r3, #0
 8006626:	d107      	bne.n	8006638 <f_read+0x44>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	7d5b      	ldrb	r3, [r3, #21]
 800662c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006630:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006634:	2b00      	cmp	r3, #0
 8006636:	d002      	beq.n	800663e <f_read+0x4a>
 8006638:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800663c:	e135      	b.n	80068aa <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	7d1b      	ldrb	r3, [r3, #20]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <f_read+0x5a>
 800664a:	2307      	movs	r3, #7
 800664c:	e12d      	b.n	80068aa <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	68da      	ldr	r2, [r3, #12]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	429a      	cmp	r2, r3
 8006660:	f240 811e 	bls.w	80068a0 <f_read+0x2ac>
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006668:	e11a      	b.n	80068a0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	8992      	ldrh	r2, [r2, #12]
 8006672:	fbb3 f1f2 	udiv	r1, r3, r2
 8006676:	fb02 f201 	mul.w	r2, r2, r1
 800667a:	1a9b      	subs	r3, r3, r2
 800667c:	2b00      	cmp	r3, #0
 800667e:	f040 80d5 	bne.w	800682c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	8992      	ldrh	r2, [r2, #12]
 800668a:	fbb3 f3f2 	udiv	r3, r3, r2
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	8952      	ldrh	r2, [r2, #10]
 8006692:	3a01      	subs	r2, #1
 8006694:	4013      	ands	r3, r2
 8006696:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d12f      	bne.n	80066fe <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d103      	bne.n	80066ae <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	633b      	str	r3, [r7, #48]	; 0x30
 80066ac:	e013      	b.n	80066d6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d007      	beq.n	80066c6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	4619      	mov	r1, r3
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f7fe faa1 	bl	8004c04 <clmt_clust>
 80066c2:	6338      	str	r0, [r7, #48]	; 0x30
 80066c4:	e007      	b.n	80066d6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	69db      	ldr	r3, [r3, #28]
 80066cc:	4619      	mov	r1, r3
 80066ce:	4610      	mov	r0, r2
 80066d0:	f7fd ffab 	bl	800462a <get_fat>
 80066d4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80066d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d804      	bhi.n	80066e6 <f_read+0xf2>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2202      	movs	r2, #2
 80066e0:	755a      	strb	r2, [r3, #21]
 80066e2:	2302      	movs	r3, #2
 80066e4:	e0e1      	b.n	80068aa <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80066e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ec:	d104      	bne.n	80066f8 <f_read+0x104>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2201      	movs	r2, #1
 80066f2:	755a      	strb	r2, [r3, #21]
 80066f4:	2301      	movs	r3, #1
 80066f6:	e0d8      	b.n	80068aa <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066fc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	4619      	mov	r1, r3
 8006706:	4610      	mov	r0, r2
 8006708:	f7fd ff70 	bl	80045ec <clust2sect>
 800670c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d104      	bne.n	800671e <f_read+0x12a>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2202      	movs	r2, #2
 8006718:	755a      	strb	r2, [r3, #21]
 800671a:	2302      	movs	r3, #2
 800671c:	e0c5      	b.n	80068aa <f_read+0x2b6>
			sect += csect;
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	4413      	add	r3, r2
 8006724:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	899b      	ldrh	r3, [r3, #12]
 800672a:	461a      	mov	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006732:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	2b00      	cmp	r3, #0
 8006738:	d041      	beq.n	80067be <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800673a:	69fa      	ldr	r2, [r7, #28]
 800673c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673e:	4413      	add	r3, r2
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	8952      	ldrh	r2, [r2, #10]
 8006744:	4293      	cmp	r3, r2
 8006746:	d905      	bls.n	8006754 <f_read+0x160>
					cc = fs->csize - csect;
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	895b      	ldrh	r3, [r3, #10]
 800674c:	461a      	mov	r2, r3
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	7858      	ldrb	r0, [r3, #1]
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800675e:	f7fd fb99 	bl	8003e94 <disk_read>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d004      	beq.n	8006772 <f_read+0x17e>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2201      	movs	r2, #1
 800676c:	755a      	strb	r2, [r3, #21]
 800676e:	2301      	movs	r3, #1
 8006770:	e09b      	b.n	80068aa <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	7d1b      	ldrb	r3, [r3, #20]
 8006776:	b25b      	sxtb	r3, r3
 8006778:	2b00      	cmp	r3, #0
 800677a:	da18      	bge.n	80067ae <f_read+0x1ba>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6a1a      	ldr	r2, [r3, #32]
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006786:	429a      	cmp	r2, r3
 8006788:	d911      	bls.n	80067ae <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a1a      	ldr	r2, [r3, #32]
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	8992      	ldrh	r2, [r2, #12]
 8006796:	fb02 f303 	mul.w	r3, r2, r3
 800679a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800679c:	18d0      	adds	r0, r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	899b      	ldrh	r3, [r3, #12]
 80067a8:	461a      	mov	r2, r3
 80067aa:	f7fd fc53 	bl	8004054 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	899b      	ldrh	r3, [r3, #12]
 80067b2:	461a      	mov	r2, r3
 80067b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b6:	fb02 f303 	mul.w	r3, r2, r3
 80067ba:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80067bc:	e05c      	b.n	8006878 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	69ba      	ldr	r2, [r7, #24]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d02e      	beq.n	8006826 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	7d1b      	ldrb	r3, [r3, #20]
 80067cc:	b25b      	sxtb	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	da18      	bge.n	8006804 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	7858      	ldrb	r0, [r3, #1]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6a1a      	ldr	r2, [r3, #32]
 80067e0:	2301      	movs	r3, #1
 80067e2:	f7fd fb77 	bl	8003ed4 <disk_write>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d004      	beq.n	80067f6 <f_read+0x202>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2201      	movs	r2, #1
 80067f0:	755a      	strb	r2, [r3, #21]
 80067f2:	2301      	movs	r3, #1
 80067f4:	e059      	b.n	80068aa <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	7d1b      	ldrb	r3, [r3, #20]
 80067fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	7858      	ldrb	r0, [r3, #1]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800680e:	2301      	movs	r3, #1
 8006810:	69ba      	ldr	r2, [r7, #24]
 8006812:	f7fd fb3f 	bl	8003e94 <disk_read>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d004      	beq.n	8006826 <f_read+0x232>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2201      	movs	r2, #1
 8006820:	755a      	strb	r2, [r3, #21]
 8006822:	2301      	movs	r3, #1
 8006824:	e041      	b.n	80068aa <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	899b      	ldrh	r3, [r3, #12]
 8006830:	4618      	mov	r0, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	8992      	ldrh	r2, [r2, #12]
 800683a:	fbb3 f1f2 	udiv	r1, r3, r2
 800683e:	fb02 f201 	mul.w	r2, r2, r1
 8006842:	1a9b      	subs	r3, r3, r2
 8006844:	1ac3      	subs	r3, r0, r3
 8006846:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	429a      	cmp	r2, r3
 800684e:	d901      	bls.n	8006854 <f_read+0x260>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	8992      	ldrh	r2, [r2, #12]
 8006862:	fbb3 f0f2 	udiv	r0, r3, r2
 8006866:	fb02 f200 	mul.w	r2, r2, r0
 800686a:	1a9b      	subs	r3, r3, r2
 800686c:	440b      	add	r3, r1
 800686e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006870:	4619      	mov	r1, r3
 8006872:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006874:	f7fd fbee 	bl	8004054 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800687a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687c:	4413      	add	r3, r2
 800687e:	627b      	str	r3, [r7, #36]	; 0x24
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	699a      	ldr	r2, [r3, #24]
 8006884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006886:	441a      	add	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	619a      	str	r2, [r3, #24]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006892:	441a      	add	r2, r3
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	601a      	str	r2, [r3, #0]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f47f aee1 	bne.w	800666a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3738      	adds	r7, #56	; 0x38
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b086      	sub	sp, #24
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f107 0208 	add.w	r2, r7, #8
 80068c0:	4611      	mov	r1, r2
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7ff fc4e 	bl	8006164 <validate>
 80068c8:	4603      	mov	r3, r0
 80068ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80068cc:	7dfb      	ldrb	r3, [r7, #23]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d168      	bne.n	80069a4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	7d1b      	ldrb	r3, [r3, #20]
 80068d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d062      	beq.n	80069a4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	7d1b      	ldrb	r3, [r3, #20]
 80068e2:	b25b      	sxtb	r3, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	da15      	bge.n	8006914 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	7858      	ldrb	r0, [r3, #1]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a1a      	ldr	r2, [r3, #32]
 80068f6:	2301      	movs	r3, #1
 80068f8:	f7fd faec 	bl	8003ed4 <disk_write>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <f_sync+0x54>
 8006902:	2301      	movs	r3, #1
 8006904:	e04f      	b.n	80069a6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	7d1b      	ldrb	r3, [r3, #20]
 800690a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800690e:	b2da      	uxtb	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006914:	f7fd fa0c 	bl	8003d30 <get_fattime>
 8006918:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006920:	4619      	mov	r1, r3
 8006922:	4610      	mov	r0, r2
 8006924:	f7fd fdc4 	bl	80044b0 <move_window>
 8006928:	4603      	mov	r3, r0
 800692a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800692c:	7dfb      	ldrb	r3, [r7, #23]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d138      	bne.n	80069a4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006936:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	330b      	adds	r3, #11
 800693c:	781a      	ldrb	r2, [r3, #0]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	330b      	adds	r3, #11
 8006942:	f042 0220 	orr.w	r2, r2, #32
 8006946:	b2d2      	uxtb	r2, r2
 8006948:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6818      	ldr	r0, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	461a      	mov	r2, r3
 8006954:	68f9      	ldr	r1, [r7, #12]
 8006956:	f7fe fb52 	bl	8004ffe <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f103 021c 	add.w	r2, r3, #28
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	4619      	mov	r1, r3
 8006966:	4610      	mov	r0, r2
 8006968:	f7fd fb48 	bl	8003ffc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	3316      	adds	r3, #22
 8006970:	6939      	ldr	r1, [r7, #16]
 8006972:	4618      	mov	r0, r3
 8006974:	f7fd fb42 	bl	8003ffc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3312      	adds	r3, #18
 800697c:	2100      	movs	r1, #0
 800697e:	4618      	mov	r0, r3
 8006980:	f7fd fb21 	bl	8003fc6 <st_word>
					fs->wflag = 1;
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	2201      	movs	r2, #1
 8006988:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	4618      	mov	r0, r3
 800698e:	f7fd fdbd 	bl	800450c <sync_fs>
 8006992:	4603      	mov	r3, r0
 8006994:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	7d1b      	ldrb	r3, [r3, #20]
 800699a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80069a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3718      	adds	r7, #24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b084      	sub	sp, #16
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7ff ff7b 	bl	80068b2 <f_sync>
 80069bc:	4603      	mov	r3, r0
 80069be:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d118      	bne.n	80069f8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f107 0208 	add.w	r2, r7, #8
 80069cc:	4611      	mov	r1, r2
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7ff fbc8 	bl	8006164 <validate>
 80069d4:	4603      	mov	r3, r0
 80069d6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10c      	bne.n	80069f8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fd fcc0 	bl	8004368 <dec_lock>
 80069e8:	4603      	mov	r3, r0
 80069ea:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d102      	bne.n	80069f8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b090      	sub	sp, #64	; 0x40
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f107 0208 	add.w	r2, r7, #8
 8006a12:	4611      	mov	r1, r2
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7ff fba5 	bl	8006164 <validate>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8006a20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d103      	bne.n	8006a30 <f_lseek+0x2e>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	7d5b      	ldrb	r3, [r3, #21]
 8006a2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8006a30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d002      	beq.n	8006a3e <f_lseek+0x3c>
 8006a38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a3c:	e201      	b.n	8006e42 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 80d9 	beq.w	8006bfa <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4e:	d15a      	bne.n	8006b06 <f_lseek+0x104>
			tbl = fp->cltbl;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a58:	1d1a      	adds	r2, r3, #4
 8006a5a:	627a      	str	r2, [r7, #36]	; 0x24
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	617b      	str	r3, [r7, #20]
 8006a60:	2302      	movs	r3, #2
 8006a62:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d03a      	beq.n	8006ae6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8006a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a72:	613b      	str	r3, [r7, #16]
 8006a74:	2300      	movs	r3, #0
 8006a76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7a:	3302      	adds	r3, #2
 8006a7c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a80:	60fb      	str	r3, [r7, #12]
 8006a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a84:	3301      	adds	r3, #1
 8006a86:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7fd fdcc 	bl	800462a <get_fat>
 8006a92:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8006a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d804      	bhi.n	8006aa4 <f_lseek+0xa2>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	755a      	strb	r2, [r3, #21]
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	e1ce      	b.n	8006e42 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aaa:	d104      	bne.n	8006ab6 <f_lseek+0xb4>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	755a      	strb	r2, [r3, #21]
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e1c5      	b.n	8006e42 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d0de      	beq.n	8006a7e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d809      	bhi.n	8006adc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	1d1a      	adds	r2, r3, #4
 8006acc:	627a      	str	r2, [r7, #36]	; 0x24
 8006ace:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	1d1a      	adds	r2, r3, #4
 8006ad6:	627a      	str	r2, [r7, #36]	; 0x24
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d3c4      	bcc.n	8006a70 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aec:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8006aee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d803      	bhi.n	8006afe <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8006af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af8:	2200      	movs	r2, #0
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	e19f      	b.n	8006e3e <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8006afe:	2311      	movs	r3, #17
 8006b00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006b04:	e19b      	b.n	8006e3e <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d902      	bls.n	8006b16 <f_lseek+0x114>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	683a      	ldr	r2, [r7, #0]
 8006b1a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 818d 	beq.w	8006e3e <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	3b01      	subs	r3, #1
 8006b28:	4619      	mov	r1, r3
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7fe f86a 	bl	8004c04 <clmt_clust>
 8006b30:	4602      	mov	r2, r0
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	4610      	mov	r0, r2
 8006b40:	f7fd fd54 	bl	80045ec <clust2sect>
 8006b44:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d104      	bne.n	8006b56 <f_lseek+0x154>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	755a      	strb	r2, [r3, #21]
 8006b52:	2302      	movs	r3, #2
 8006b54:	e175      	b.n	8006e42 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	8992      	ldrh	r2, [r2, #12]
 8006b5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	8952      	ldrh	r2, [r2, #10]
 8006b66:	3a01      	subs	r2, #1
 8006b68:	4013      	ands	r3, r2
 8006b6a:	69ba      	ldr	r2, [r7, #24]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	8992      	ldrh	r2, [r2, #12]
 8006b78:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b7c:	fb02 f201 	mul.w	r2, r2, r1
 8006b80:	1a9b      	subs	r3, r3, r2
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f000 815b 	beq.w	8006e3e <f_lseek+0x43c>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	f000 8155 	beq.w	8006e3e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	7d1b      	ldrb	r3, [r3, #20]
 8006b98:	b25b      	sxtb	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	da18      	bge.n	8006bd0 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	7858      	ldrb	r0, [r3, #1]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a1a      	ldr	r2, [r3, #32]
 8006bac:	2301      	movs	r3, #1
 8006bae:	f7fd f991 	bl	8003ed4 <disk_write>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d004      	beq.n	8006bc2 <f_lseek+0x1c0>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	755a      	strb	r2, [r3, #21]
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e13f      	b.n	8006e42 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	7d1b      	ldrb	r3, [r3, #20]
 8006bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	7858      	ldrb	r0, [r3, #1]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006bda:	2301      	movs	r3, #1
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	f7fd f959 	bl	8003e94 <disk_read>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d004      	beq.n	8006bf2 <f_lseek+0x1f0>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	755a      	strb	r2, [r3, #21]
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e127      	b.n	8006e42 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	621a      	str	r2, [r3, #32]
 8006bf8:	e121      	b.n	8006e3e <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d908      	bls.n	8006c16 <f_lseek+0x214>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	7d1b      	ldrb	r3, [r3, #20]
 8006c08:	f003 0302 	and.w	r3, r3, #2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d102      	bne.n	8006c16 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c24:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 80b5 	beq.w	8006d98 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	895b      	ldrh	r3, [r3, #10]
 8006c32:	461a      	mov	r2, r3
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	899b      	ldrh	r3, [r3, #12]
 8006c38:	fb03 f302 	mul.w	r3, r3, r2
 8006c3c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d01b      	beq.n	8006c7c <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	1e5a      	subs	r2, r3, #1
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c4e:	6a3b      	ldr	r3, [r7, #32]
 8006c50:	1e59      	subs	r1, r3, #1
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d30f      	bcc.n	8006c7c <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	1e5a      	subs	r2, r3, #1
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	425b      	negs	r3, r3
 8006c64:	401a      	ands	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c7a:	e022      	b.n	8006cc2 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8006c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d119      	bne.n	8006cbc <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7fd ff21 	bl	8004ad4 <create_chain>
 8006c92:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d104      	bne.n	8006ca4 <f_lseek+0x2a2>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	755a      	strb	r2, [r3, #21]
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	e0ce      	b.n	8006e42 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006caa:	d104      	bne.n	8006cb6 <f_lseek+0x2b4>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	755a      	strb	r2, [r3, #21]
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e0c5      	b.n	8006e42 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cba:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cc0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8006cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d067      	beq.n	8006d98 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8006cc8:	e03a      	b.n	8006d40 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8006cca:	683a      	ldr	r2, [r7, #0]
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	603b      	str	r3, [r7, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	699a      	ldr	r2, [r3, #24]
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	441a      	add	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	7d1b      	ldrb	r3, [r3, #20]
 8006ce2:	f003 0302 	and.w	r3, r3, #2
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00b      	beq.n	8006d02 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fd fef0 	bl	8004ad4 <create_chain>
 8006cf4:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8006cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d108      	bne.n	8006d0e <f_lseek+0x30c>
							ofs = 0; break;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	603b      	str	r3, [r7, #0]
 8006d00:	e022      	b.n	8006d48 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fd fc8f 	bl	800462a <get_fat>
 8006d0c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d14:	d104      	bne.n	8006d20 <f_lseek+0x31e>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	755a      	strb	r2, [r3, #21]
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e090      	b.n	8006e42 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8006d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d904      	bls.n	8006d30 <f_lseek+0x32e>
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d304      	bcc.n	8006d3a <f_lseek+0x338>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2202      	movs	r2, #2
 8006d34:	755a      	strb	r2, [r3, #21]
 8006d36:	2302      	movs	r3, #2
 8006d38:	e083      	b.n	8006e42 <f_lseek+0x440>
					fp->clust = clst;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d3e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d8c0      	bhi.n	8006cca <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	699a      	ldr	r2, [r3, #24]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	441a      	add	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	899b      	ldrh	r3, [r3, #12]
 8006d58:	461a      	mov	r2, r3
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d60:	fb02 f201 	mul.w	r2, r2, r1
 8006d64:	1a9b      	subs	r3, r3, r2
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d016      	beq.n	8006d98 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fd fc3c 	bl	80045ec <clust2sect>
 8006d74:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8006d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d104      	bne.n	8006d86 <f_lseek+0x384>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	755a      	strb	r2, [r3, #21]
 8006d82:	2302      	movs	r3, #2
 8006d84:	e05d      	b.n	8006e42 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	899b      	ldrh	r3, [r3, #12]
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d94:	4413      	add	r3, r2
 8006d96:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	699a      	ldr	r2, [r3, #24]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d90a      	bls.n	8006dba <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	699a      	ldr	r2, [r3, #24]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	7d1b      	ldrb	r3, [r3, #20]
 8006db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	8992      	ldrh	r2, [r2, #12]
 8006dc2:	fbb3 f1f2 	udiv	r1, r3, r2
 8006dc6:	fb02 f201 	mul.w	r2, r2, r1
 8006dca:	1a9b      	subs	r3, r3, r2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d036      	beq.n	8006e3e <f_lseek+0x43c>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d031      	beq.n	8006e3e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	7d1b      	ldrb	r3, [r3, #20]
 8006dde:	b25b      	sxtb	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	da18      	bge.n	8006e16 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	7858      	ldrb	r0, [r3, #1]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a1a      	ldr	r2, [r3, #32]
 8006df2:	2301      	movs	r3, #1
 8006df4:	f7fd f86e 	bl	8003ed4 <disk_write>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d004      	beq.n	8006e08 <f_lseek+0x406>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	755a      	strb	r2, [r3, #21]
 8006e04:	2301      	movs	r3, #1
 8006e06:	e01c      	b.n	8006e42 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	7d1b      	ldrb	r3, [r3, #20]
 8006e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e10:	b2da      	uxtb	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	7858      	ldrb	r0, [r3, #1]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e20:	2301      	movs	r3, #1
 8006e22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e24:	f7fd f836 	bl	8003e94 <disk_read>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d004      	beq.n	8006e38 <f_lseek+0x436>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	755a      	strb	r2, [r3, #21]
 8006e34:	2301      	movs	r3, #1
 8006e36:	e004      	b.n	8006e42 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e3c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8006e3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3740      	adds	r7, #64	; 0x40
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
	...

08006e4c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	4613      	mov	r3, r2
 8006e58:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006e62:	4b1f      	ldr	r3, [pc, #124]	; (8006ee0 <FATFS_LinkDriverEx+0x94>)
 8006e64:	7a5b      	ldrb	r3, [r3, #9]
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d131      	bne.n	8006ed0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006e6c:	4b1c      	ldr	r3, [pc, #112]	; (8006ee0 <FATFS_LinkDriverEx+0x94>)
 8006e6e:	7a5b      	ldrb	r3, [r3, #9]
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	461a      	mov	r2, r3
 8006e74:	4b1a      	ldr	r3, [pc, #104]	; (8006ee0 <FATFS_LinkDriverEx+0x94>)
 8006e76:	2100      	movs	r1, #0
 8006e78:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006e7a:	4b19      	ldr	r3, [pc, #100]	; (8006ee0 <FATFS_LinkDriverEx+0x94>)
 8006e7c:	7a5b      	ldrb	r3, [r3, #9]
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	4a17      	ldr	r2, [pc, #92]	; (8006ee0 <FATFS_LinkDriverEx+0x94>)
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4413      	add	r3, r2
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006e8a:	4b15      	ldr	r3, [pc, #84]	; (8006ee0 <FATFS_LinkDriverEx+0x94>)
 8006e8c:	7a5b      	ldrb	r3, [r3, #9]
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	461a      	mov	r2, r3
 8006e92:	4b13      	ldr	r3, [pc, #76]	; (8006ee0 <FATFS_LinkDriverEx+0x94>)
 8006e94:	4413      	add	r3, r2
 8006e96:	79fa      	ldrb	r2, [r7, #7]
 8006e98:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006e9a:	4b11      	ldr	r3, [pc, #68]	; (8006ee0 <FATFS_LinkDriverEx+0x94>)
 8006e9c:	7a5b      	ldrb	r3, [r3, #9]
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	1c5a      	adds	r2, r3, #1
 8006ea2:	b2d1      	uxtb	r1, r2
 8006ea4:	4a0e      	ldr	r2, [pc, #56]	; (8006ee0 <FATFS_LinkDriverEx+0x94>)
 8006ea6:	7251      	strb	r1, [r2, #9]
 8006ea8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006eaa:	7dbb      	ldrb	r3, [r7, #22]
 8006eac:	3330      	adds	r3, #48	; 0x30
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	223a      	movs	r2, #58	; 0x3a
 8006eba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	3302      	adds	r3, #2
 8006ec0:	222f      	movs	r2, #47	; 0x2f
 8006ec2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	3303      	adds	r3, #3
 8006ec8:	2200      	movs	r2, #0
 8006eca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	371c      	adds	r7, #28
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	200002d8 	.word	0x200002d8

08006ee4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006eee:	2200      	movs	r2, #0
 8006ef0:	6839      	ldr	r1, [r7, #0]
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7ff ffaa 	bl	8006e4c <FATFS_LinkDriverEx>
 8006ef8:	4603      	mov	r3, r0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	6039      	str	r1, [r7, #0]
 8006f0e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006f10:	88fb      	ldrh	r3, [r7, #6]
 8006f12:	2b7f      	cmp	r3, #127	; 0x7f
 8006f14:	d802      	bhi.n	8006f1c <ff_convert+0x18>
		c = chr;
 8006f16:	88fb      	ldrh	r3, [r7, #6]
 8006f18:	81fb      	strh	r3, [r7, #14]
 8006f1a:	e025      	b.n	8006f68 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00b      	beq.n	8006f3a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006f22:	88fb      	ldrh	r3, [r7, #6]
 8006f24:	2bff      	cmp	r3, #255	; 0xff
 8006f26:	d805      	bhi.n	8006f34 <ff_convert+0x30>
 8006f28:	88fb      	ldrh	r3, [r7, #6]
 8006f2a:	3b80      	subs	r3, #128	; 0x80
 8006f2c:	4a12      	ldr	r2, [pc, #72]	; (8006f78 <ff_convert+0x74>)
 8006f2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f32:	e000      	b.n	8006f36 <ff_convert+0x32>
 8006f34:	2300      	movs	r3, #0
 8006f36:	81fb      	strh	r3, [r7, #14]
 8006f38:	e016      	b.n	8006f68 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	81fb      	strh	r3, [r7, #14]
 8006f3e:	e009      	b.n	8006f54 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8006f40:	89fb      	ldrh	r3, [r7, #14]
 8006f42:	4a0d      	ldr	r2, [pc, #52]	; (8006f78 <ff_convert+0x74>)
 8006f44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f48:	88fa      	ldrh	r2, [r7, #6]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d006      	beq.n	8006f5c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8006f4e:	89fb      	ldrh	r3, [r7, #14]
 8006f50:	3301      	adds	r3, #1
 8006f52:	81fb      	strh	r3, [r7, #14]
 8006f54:	89fb      	ldrh	r3, [r7, #14]
 8006f56:	2b7f      	cmp	r3, #127	; 0x7f
 8006f58:	d9f2      	bls.n	8006f40 <ff_convert+0x3c>
 8006f5a:	e000      	b.n	8006f5e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8006f5c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8006f5e:	89fb      	ldrh	r3, [r7, #14]
 8006f60:	3380      	adds	r3, #128	; 0x80
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8006f68:	89fb      	ldrh	r3, [r7, #14]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	08008160 	.word	0x08008160

08006f7c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b087      	sub	sp, #28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	4603      	mov	r3, r0
 8006f84:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8006f86:	88fb      	ldrh	r3, [r7, #6]
 8006f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f8c:	d201      	bcs.n	8006f92 <ff_wtoupper+0x16>
 8006f8e:	4b3e      	ldr	r3, [pc, #248]	; (8007088 <ff_wtoupper+0x10c>)
 8006f90:	e000      	b.n	8006f94 <ff_wtoupper+0x18>
 8006f92:	4b3e      	ldr	r3, [pc, #248]	; (800708c <ff_wtoupper+0x110>)
 8006f94:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	1c9a      	adds	r2, r3, #2
 8006f9a:	617a      	str	r2, [r7, #20]
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8006fa0:	8a7b      	ldrh	r3, [r7, #18]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d068      	beq.n	8007078 <ff_wtoupper+0xfc>
 8006fa6:	88fa      	ldrh	r2, [r7, #6]
 8006fa8:	8a7b      	ldrh	r3, [r7, #18]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d364      	bcc.n	8007078 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	1c9a      	adds	r2, r3, #2
 8006fb2:	617a      	str	r2, [r7, #20]
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	823b      	strh	r3, [r7, #16]
 8006fb8:	8a3b      	ldrh	r3, [r7, #16]
 8006fba:	0a1b      	lsrs	r3, r3, #8
 8006fbc:	81fb      	strh	r3, [r7, #14]
 8006fbe:	8a3b      	ldrh	r3, [r7, #16]
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8006fc4:	88fa      	ldrh	r2, [r7, #6]
 8006fc6:	8a79      	ldrh	r1, [r7, #18]
 8006fc8:	8a3b      	ldrh	r3, [r7, #16]
 8006fca:	440b      	add	r3, r1
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	da49      	bge.n	8007064 <ff_wtoupper+0xe8>
			switch (cmd) {
 8006fd0:	89fb      	ldrh	r3, [r7, #14]
 8006fd2:	2b08      	cmp	r3, #8
 8006fd4:	d84f      	bhi.n	8007076 <ff_wtoupper+0xfa>
 8006fd6:	a201      	add	r2, pc, #4	; (adr r2, 8006fdc <ff_wtoupper+0x60>)
 8006fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fdc:	08007001 	.word	0x08007001
 8006fe0:	08007013 	.word	0x08007013
 8006fe4:	08007029 	.word	0x08007029
 8006fe8:	08007031 	.word	0x08007031
 8006fec:	08007039 	.word	0x08007039
 8006ff0:	08007041 	.word	0x08007041
 8006ff4:	08007049 	.word	0x08007049
 8006ff8:	08007051 	.word	0x08007051
 8006ffc:	08007059 	.word	0x08007059
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007000:	88fa      	ldrh	r2, [r7, #6]
 8007002:	8a7b      	ldrh	r3, [r7, #18]
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	005b      	lsls	r3, r3, #1
 8007008:	697a      	ldr	r2, [r7, #20]
 800700a:	4413      	add	r3, r2
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	80fb      	strh	r3, [r7, #6]
 8007010:	e027      	b.n	8007062 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007012:	88fa      	ldrh	r2, [r7, #6]
 8007014:	8a7b      	ldrh	r3, [r7, #18]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	b29b      	uxth	r3, r3
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	b29b      	uxth	r3, r3
 8007020:	88fa      	ldrh	r2, [r7, #6]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	80fb      	strh	r3, [r7, #6]
 8007026:	e01c      	b.n	8007062 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007028:	88fb      	ldrh	r3, [r7, #6]
 800702a:	3b10      	subs	r3, #16
 800702c:	80fb      	strh	r3, [r7, #6]
 800702e:	e018      	b.n	8007062 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007030:	88fb      	ldrh	r3, [r7, #6]
 8007032:	3b20      	subs	r3, #32
 8007034:	80fb      	strh	r3, [r7, #6]
 8007036:	e014      	b.n	8007062 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007038:	88fb      	ldrh	r3, [r7, #6]
 800703a:	3b30      	subs	r3, #48	; 0x30
 800703c:	80fb      	strh	r3, [r7, #6]
 800703e:	e010      	b.n	8007062 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007040:	88fb      	ldrh	r3, [r7, #6]
 8007042:	3b1a      	subs	r3, #26
 8007044:	80fb      	strh	r3, [r7, #6]
 8007046:	e00c      	b.n	8007062 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007048:	88fb      	ldrh	r3, [r7, #6]
 800704a:	3308      	adds	r3, #8
 800704c:	80fb      	strh	r3, [r7, #6]
 800704e:	e008      	b.n	8007062 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007050:	88fb      	ldrh	r3, [r7, #6]
 8007052:	3b50      	subs	r3, #80	; 0x50
 8007054:	80fb      	strh	r3, [r7, #6]
 8007056:	e004      	b.n	8007062 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007058:	88fb      	ldrh	r3, [r7, #6]
 800705a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800705e:	80fb      	strh	r3, [r7, #6]
 8007060:	bf00      	nop
			}
			break;
 8007062:	e008      	b.n	8007076 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007064:	89fb      	ldrh	r3, [r7, #14]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d195      	bne.n	8006f96 <ff_wtoupper+0x1a>
 800706a:	8a3b      	ldrh	r3, [r7, #16]
 800706c:	005b      	lsls	r3, r3, #1
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	4413      	add	r3, r2
 8007072:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007074:	e78f      	b.n	8006f96 <ff_wtoupper+0x1a>
			break;
 8007076:	bf00      	nop
	}

	return chr;
 8007078:	88fb      	ldrh	r3, [r7, #6]
}
 800707a:	4618      	mov	r0, r3
 800707c:	371c      	adds	r7, #28
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	08008260 	.word	0x08008260
 800708c:	08008454 	.word	0x08008454

08007090 <__errno>:
 8007090:	4b01      	ldr	r3, [pc, #4]	; (8007098 <__errno+0x8>)
 8007092:	6818      	ldr	r0, [r3, #0]
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	20000024 	.word	0x20000024

0800709c <__libc_init_array>:
 800709c:	b570      	push	{r4, r5, r6, lr}
 800709e:	4d0d      	ldr	r5, [pc, #52]	; (80070d4 <__libc_init_array+0x38>)
 80070a0:	4c0d      	ldr	r4, [pc, #52]	; (80070d8 <__libc_init_array+0x3c>)
 80070a2:	1b64      	subs	r4, r4, r5
 80070a4:	10a4      	asrs	r4, r4, #2
 80070a6:	2600      	movs	r6, #0
 80070a8:	42a6      	cmp	r6, r4
 80070aa:	d109      	bne.n	80070c0 <__libc_init_array+0x24>
 80070ac:	4d0b      	ldr	r5, [pc, #44]	; (80070dc <__libc_init_array+0x40>)
 80070ae:	4c0c      	ldr	r4, [pc, #48]	; (80070e0 <__libc_init_array+0x44>)
 80070b0:	f000 ff76 	bl	8007fa0 <_init>
 80070b4:	1b64      	subs	r4, r4, r5
 80070b6:	10a4      	asrs	r4, r4, #2
 80070b8:	2600      	movs	r6, #0
 80070ba:	42a6      	cmp	r6, r4
 80070bc:	d105      	bne.n	80070ca <__libc_init_array+0x2e>
 80070be:	bd70      	pop	{r4, r5, r6, pc}
 80070c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80070c4:	4798      	blx	r3
 80070c6:	3601      	adds	r6, #1
 80070c8:	e7ee      	b.n	80070a8 <__libc_init_array+0xc>
 80070ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ce:	4798      	blx	r3
 80070d0:	3601      	adds	r6, #1
 80070d2:	e7f2      	b.n	80070ba <__libc_init_array+0x1e>
 80070d4:	080085b0 	.word	0x080085b0
 80070d8:	080085b0 	.word	0x080085b0
 80070dc:	080085b0 	.word	0x080085b0
 80070e0:	080085b4 	.word	0x080085b4

080070e4 <memset>:
 80070e4:	4402      	add	r2, r0
 80070e6:	4603      	mov	r3, r0
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d100      	bne.n	80070ee <memset+0xa>
 80070ec:	4770      	bx	lr
 80070ee:	f803 1b01 	strb.w	r1, [r3], #1
 80070f2:	e7f9      	b.n	80070e8 <memset+0x4>

080070f4 <iprintf>:
 80070f4:	b40f      	push	{r0, r1, r2, r3}
 80070f6:	4b0a      	ldr	r3, [pc, #40]	; (8007120 <iprintf+0x2c>)
 80070f8:	b513      	push	{r0, r1, r4, lr}
 80070fa:	681c      	ldr	r4, [r3, #0]
 80070fc:	b124      	cbz	r4, 8007108 <iprintf+0x14>
 80070fe:	69a3      	ldr	r3, [r4, #24]
 8007100:	b913      	cbnz	r3, 8007108 <iprintf+0x14>
 8007102:	4620      	mov	r0, r4
 8007104:	f000 f866 	bl	80071d4 <__sinit>
 8007108:	ab05      	add	r3, sp, #20
 800710a:	9a04      	ldr	r2, [sp, #16]
 800710c:	68a1      	ldr	r1, [r4, #8]
 800710e:	9301      	str	r3, [sp, #4]
 8007110:	4620      	mov	r0, r4
 8007112:	f000 f983 	bl	800741c <_vfiprintf_r>
 8007116:	b002      	add	sp, #8
 8007118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800711c:	b004      	add	sp, #16
 800711e:	4770      	bx	lr
 8007120:	20000024 	.word	0x20000024

08007124 <std>:
 8007124:	2300      	movs	r3, #0
 8007126:	b510      	push	{r4, lr}
 8007128:	4604      	mov	r4, r0
 800712a:	e9c0 3300 	strd	r3, r3, [r0]
 800712e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007132:	6083      	str	r3, [r0, #8]
 8007134:	8181      	strh	r1, [r0, #12]
 8007136:	6643      	str	r3, [r0, #100]	; 0x64
 8007138:	81c2      	strh	r2, [r0, #14]
 800713a:	6183      	str	r3, [r0, #24]
 800713c:	4619      	mov	r1, r3
 800713e:	2208      	movs	r2, #8
 8007140:	305c      	adds	r0, #92	; 0x5c
 8007142:	f7ff ffcf 	bl	80070e4 <memset>
 8007146:	4b05      	ldr	r3, [pc, #20]	; (800715c <std+0x38>)
 8007148:	6263      	str	r3, [r4, #36]	; 0x24
 800714a:	4b05      	ldr	r3, [pc, #20]	; (8007160 <std+0x3c>)
 800714c:	62a3      	str	r3, [r4, #40]	; 0x28
 800714e:	4b05      	ldr	r3, [pc, #20]	; (8007164 <std+0x40>)
 8007150:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007152:	4b05      	ldr	r3, [pc, #20]	; (8007168 <std+0x44>)
 8007154:	6224      	str	r4, [r4, #32]
 8007156:	6323      	str	r3, [r4, #48]	; 0x30
 8007158:	bd10      	pop	{r4, pc}
 800715a:	bf00      	nop
 800715c:	080079c5 	.word	0x080079c5
 8007160:	080079e7 	.word	0x080079e7
 8007164:	08007a1f 	.word	0x08007a1f
 8007168:	08007a43 	.word	0x08007a43

0800716c <_cleanup_r>:
 800716c:	4901      	ldr	r1, [pc, #4]	; (8007174 <_cleanup_r+0x8>)
 800716e:	f000 b8af 	b.w	80072d0 <_fwalk_reent>
 8007172:	bf00      	nop
 8007174:	08007d1d 	.word	0x08007d1d

08007178 <__sfmoreglue>:
 8007178:	b570      	push	{r4, r5, r6, lr}
 800717a:	1e4a      	subs	r2, r1, #1
 800717c:	2568      	movs	r5, #104	; 0x68
 800717e:	4355      	muls	r5, r2
 8007180:	460e      	mov	r6, r1
 8007182:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007186:	f000 f8c5 	bl	8007314 <_malloc_r>
 800718a:	4604      	mov	r4, r0
 800718c:	b140      	cbz	r0, 80071a0 <__sfmoreglue+0x28>
 800718e:	2100      	movs	r1, #0
 8007190:	e9c0 1600 	strd	r1, r6, [r0]
 8007194:	300c      	adds	r0, #12
 8007196:	60a0      	str	r0, [r4, #8]
 8007198:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800719c:	f7ff ffa2 	bl	80070e4 <memset>
 80071a0:	4620      	mov	r0, r4
 80071a2:	bd70      	pop	{r4, r5, r6, pc}

080071a4 <__sfp_lock_acquire>:
 80071a4:	4801      	ldr	r0, [pc, #4]	; (80071ac <__sfp_lock_acquire+0x8>)
 80071a6:	f000 b8b3 	b.w	8007310 <__retarget_lock_acquire_recursive>
 80071aa:	bf00      	nop
 80071ac:	2000463c 	.word	0x2000463c

080071b0 <__sfp_lock_release>:
 80071b0:	4801      	ldr	r0, [pc, #4]	; (80071b8 <__sfp_lock_release+0x8>)
 80071b2:	f000 b8ae 	b.w	8007312 <__retarget_lock_release_recursive>
 80071b6:	bf00      	nop
 80071b8:	2000463c 	.word	0x2000463c

080071bc <__sinit_lock_acquire>:
 80071bc:	4801      	ldr	r0, [pc, #4]	; (80071c4 <__sinit_lock_acquire+0x8>)
 80071be:	f000 b8a7 	b.w	8007310 <__retarget_lock_acquire_recursive>
 80071c2:	bf00      	nop
 80071c4:	20004637 	.word	0x20004637

080071c8 <__sinit_lock_release>:
 80071c8:	4801      	ldr	r0, [pc, #4]	; (80071d0 <__sinit_lock_release+0x8>)
 80071ca:	f000 b8a2 	b.w	8007312 <__retarget_lock_release_recursive>
 80071ce:	bf00      	nop
 80071d0:	20004637 	.word	0x20004637

080071d4 <__sinit>:
 80071d4:	b510      	push	{r4, lr}
 80071d6:	4604      	mov	r4, r0
 80071d8:	f7ff fff0 	bl	80071bc <__sinit_lock_acquire>
 80071dc:	69a3      	ldr	r3, [r4, #24]
 80071de:	b11b      	cbz	r3, 80071e8 <__sinit+0x14>
 80071e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071e4:	f7ff bff0 	b.w	80071c8 <__sinit_lock_release>
 80071e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80071ec:	6523      	str	r3, [r4, #80]	; 0x50
 80071ee:	4b13      	ldr	r3, [pc, #76]	; (800723c <__sinit+0x68>)
 80071f0:	4a13      	ldr	r2, [pc, #76]	; (8007240 <__sinit+0x6c>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80071f6:	42a3      	cmp	r3, r4
 80071f8:	bf04      	itt	eq
 80071fa:	2301      	moveq	r3, #1
 80071fc:	61a3      	streq	r3, [r4, #24]
 80071fe:	4620      	mov	r0, r4
 8007200:	f000 f820 	bl	8007244 <__sfp>
 8007204:	6060      	str	r0, [r4, #4]
 8007206:	4620      	mov	r0, r4
 8007208:	f000 f81c 	bl	8007244 <__sfp>
 800720c:	60a0      	str	r0, [r4, #8]
 800720e:	4620      	mov	r0, r4
 8007210:	f000 f818 	bl	8007244 <__sfp>
 8007214:	2200      	movs	r2, #0
 8007216:	60e0      	str	r0, [r4, #12]
 8007218:	2104      	movs	r1, #4
 800721a:	6860      	ldr	r0, [r4, #4]
 800721c:	f7ff ff82 	bl	8007124 <std>
 8007220:	68a0      	ldr	r0, [r4, #8]
 8007222:	2201      	movs	r2, #1
 8007224:	2109      	movs	r1, #9
 8007226:	f7ff ff7d 	bl	8007124 <std>
 800722a:	68e0      	ldr	r0, [r4, #12]
 800722c:	2202      	movs	r2, #2
 800722e:	2112      	movs	r1, #18
 8007230:	f7ff ff78 	bl	8007124 <std>
 8007234:	2301      	movs	r3, #1
 8007236:	61a3      	str	r3, [r4, #24]
 8007238:	e7d2      	b.n	80071e0 <__sinit+0xc>
 800723a:	bf00      	nop
 800723c:	08008510 	.word	0x08008510
 8007240:	0800716d 	.word	0x0800716d

08007244 <__sfp>:
 8007244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007246:	4607      	mov	r7, r0
 8007248:	f7ff ffac 	bl	80071a4 <__sfp_lock_acquire>
 800724c:	4b1e      	ldr	r3, [pc, #120]	; (80072c8 <__sfp+0x84>)
 800724e:	681e      	ldr	r6, [r3, #0]
 8007250:	69b3      	ldr	r3, [r6, #24]
 8007252:	b913      	cbnz	r3, 800725a <__sfp+0x16>
 8007254:	4630      	mov	r0, r6
 8007256:	f7ff ffbd 	bl	80071d4 <__sinit>
 800725a:	3648      	adds	r6, #72	; 0x48
 800725c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007260:	3b01      	subs	r3, #1
 8007262:	d503      	bpl.n	800726c <__sfp+0x28>
 8007264:	6833      	ldr	r3, [r6, #0]
 8007266:	b30b      	cbz	r3, 80072ac <__sfp+0x68>
 8007268:	6836      	ldr	r6, [r6, #0]
 800726a:	e7f7      	b.n	800725c <__sfp+0x18>
 800726c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007270:	b9d5      	cbnz	r5, 80072a8 <__sfp+0x64>
 8007272:	4b16      	ldr	r3, [pc, #88]	; (80072cc <__sfp+0x88>)
 8007274:	60e3      	str	r3, [r4, #12]
 8007276:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800727a:	6665      	str	r5, [r4, #100]	; 0x64
 800727c:	f000 f847 	bl	800730e <__retarget_lock_init_recursive>
 8007280:	f7ff ff96 	bl	80071b0 <__sfp_lock_release>
 8007284:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007288:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800728c:	6025      	str	r5, [r4, #0]
 800728e:	61a5      	str	r5, [r4, #24]
 8007290:	2208      	movs	r2, #8
 8007292:	4629      	mov	r1, r5
 8007294:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007298:	f7ff ff24 	bl	80070e4 <memset>
 800729c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80072a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80072a4:	4620      	mov	r0, r4
 80072a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072a8:	3468      	adds	r4, #104	; 0x68
 80072aa:	e7d9      	b.n	8007260 <__sfp+0x1c>
 80072ac:	2104      	movs	r1, #4
 80072ae:	4638      	mov	r0, r7
 80072b0:	f7ff ff62 	bl	8007178 <__sfmoreglue>
 80072b4:	4604      	mov	r4, r0
 80072b6:	6030      	str	r0, [r6, #0]
 80072b8:	2800      	cmp	r0, #0
 80072ba:	d1d5      	bne.n	8007268 <__sfp+0x24>
 80072bc:	f7ff ff78 	bl	80071b0 <__sfp_lock_release>
 80072c0:	230c      	movs	r3, #12
 80072c2:	603b      	str	r3, [r7, #0]
 80072c4:	e7ee      	b.n	80072a4 <__sfp+0x60>
 80072c6:	bf00      	nop
 80072c8:	08008510 	.word	0x08008510
 80072cc:	ffff0001 	.word	0xffff0001

080072d0 <_fwalk_reent>:
 80072d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072d4:	4606      	mov	r6, r0
 80072d6:	4688      	mov	r8, r1
 80072d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80072dc:	2700      	movs	r7, #0
 80072de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072e2:	f1b9 0901 	subs.w	r9, r9, #1
 80072e6:	d505      	bpl.n	80072f4 <_fwalk_reent+0x24>
 80072e8:	6824      	ldr	r4, [r4, #0]
 80072ea:	2c00      	cmp	r4, #0
 80072ec:	d1f7      	bne.n	80072de <_fwalk_reent+0xe>
 80072ee:	4638      	mov	r0, r7
 80072f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072f4:	89ab      	ldrh	r3, [r5, #12]
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d907      	bls.n	800730a <_fwalk_reent+0x3a>
 80072fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072fe:	3301      	adds	r3, #1
 8007300:	d003      	beq.n	800730a <_fwalk_reent+0x3a>
 8007302:	4629      	mov	r1, r5
 8007304:	4630      	mov	r0, r6
 8007306:	47c0      	blx	r8
 8007308:	4307      	orrs	r7, r0
 800730a:	3568      	adds	r5, #104	; 0x68
 800730c:	e7e9      	b.n	80072e2 <_fwalk_reent+0x12>

0800730e <__retarget_lock_init_recursive>:
 800730e:	4770      	bx	lr

08007310 <__retarget_lock_acquire_recursive>:
 8007310:	4770      	bx	lr

08007312 <__retarget_lock_release_recursive>:
 8007312:	4770      	bx	lr

08007314 <_malloc_r>:
 8007314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007316:	1ccd      	adds	r5, r1, #3
 8007318:	f025 0503 	bic.w	r5, r5, #3
 800731c:	3508      	adds	r5, #8
 800731e:	2d0c      	cmp	r5, #12
 8007320:	bf38      	it	cc
 8007322:	250c      	movcc	r5, #12
 8007324:	2d00      	cmp	r5, #0
 8007326:	4606      	mov	r6, r0
 8007328:	db01      	blt.n	800732e <_malloc_r+0x1a>
 800732a:	42a9      	cmp	r1, r5
 800732c:	d903      	bls.n	8007336 <_malloc_r+0x22>
 800732e:	230c      	movs	r3, #12
 8007330:	6033      	str	r3, [r6, #0]
 8007332:	2000      	movs	r0, #0
 8007334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007336:	f000 fda3 	bl	8007e80 <__malloc_lock>
 800733a:	4921      	ldr	r1, [pc, #132]	; (80073c0 <_malloc_r+0xac>)
 800733c:	680a      	ldr	r2, [r1, #0]
 800733e:	4614      	mov	r4, r2
 8007340:	b99c      	cbnz	r4, 800736a <_malloc_r+0x56>
 8007342:	4f20      	ldr	r7, [pc, #128]	; (80073c4 <_malloc_r+0xb0>)
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	b923      	cbnz	r3, 8007352 <_malloc_r+0x3e>
 8007348:	4621      	mov	r1, r4
 800734a:	4630      	mov	r0, r6
 800734c:	f000 fb2a 	bl	80079a4 <_sbrk_r>
 8007350:	6038      	str	r0, [r7, #0]
 8007352:	4629      	mov	r1, r5
 8007354:	4630      	mov	r0, r6
 8007356:	f000 fb25 	bl	80079a4 <_sbrk_r>
 800735a:	1c43      	adds	r3, r0, #1
 800735c:	d123      	bne.n	80073a6 <_malloc_r+0x92>
 800735e:	230c      	movs	r3, #12
 8007360:	6033      	str	r3, [r6, #0]
 8007362:	4630      	mov	r0, r6
 8007364:	f000 fd92 	bl	8007e8c <__malloc_unlock>
 8007368:	e7e3      	b.n	8007332 <_malloc_r+0x1e>
 800736a:	6823      	ldr	r3, [r4, #0]
 800736c:	1b5b      	subs	r3, r3, r5
 800736e:	d417      	bmi.n	80073a0 <_malloc_r+0x8c>
 8007370:	2b0b      	cmp	r3, #11
 8007372:	d903      	bls.n	800737c <_malloc_r+0x68>
 8007374:	6023      	str	r3, [r4, #0]
 8007376:	441c      	add	r4, r3
 8007378:	6025      	str	r5, [r4, #0]
 800737a:	e004      	b.n	8007386 <_malloc_r+0x72>
 800737c:	6863      	ldr	r3, [r4, #4]
 800737e:	42a2      	cmp	r2, r4
 8007380:	bf0c      	ite	eq
 8007382:	600b      	streq	r3, [r1, #0]
 8007384:	6053      	strne	r3, [r2, #4]
 8007386:	4630      	mov	r0, r6
 8007388:	f000 fd80 	bl	8007e8c <__malloc_unlock>
 800738c:	f104 000b 	add.w	r0, r4, #11
 8007390:	1d23      	adds	r3, r4, #4
 8007392:	f020 0007 	bic.w	r0, r0, #7
 8007396:	1ac2      	subs	r2, r0, r3
 8007398:	d0cc      	beq.n	8007334 <_malloc_r+0x20>
 800739a:	1a1b      	subs	r3, r3, r0
 800739c:	50a3      	str	r3, [r4, r2]
 800739e:	e7c9      	b.n	8007334 <_malloc_r+0x20>
 80073a0:	4622      	mov	r2, r4
 80073a2:	6864      	ldr	r4, [r4, #4]
 80073a4:	e7cc      	b.n	8007340 <_malloc_r+0x2c>
 80073a6:	1cc4      	adds	r4, r0, #3
 80073a8:	f024 0403 	bic.w	r4, r4, #3
 80073ac:	42a0      	cmp	r0, r4
 80073ae:	d0e3      	beq.n	8007378 <_malloc_r+0x64>
 80073b0:	1a21      	subs	r1, r4, r0
 80073b2:	4630      	mov	r0, r6
 80073b4:	f000 faf6 	bl	80079a4 <_sbrk_r>
 80073b8:	3001      	adds	r0, #1
 80073ba:	d1dd      	bne.n	8007378 <_malloc_r+0x64>
 80073bc:	e7cf      	b.n	800735e <_malloc_r+0x4a>
 80073be:	bf00      	nop
 80073c0:	200002e4 	.word	0x200002e4
 80073c4:	200002e8 	.word	0x200002e8

080073c8 <__sfputc_r>:
 80073c8:	6893      	ldr	r3, [r2, #8]
 80073ca:	3b01      	subs	r3, #1
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	b410      	push	{r4}
 80073d0:	6093      	str	r3, [r2, #8]
 80073d2:	da08      	bge.n	80073e6 <__sfputc_r+0x1e>
 80073d4:	6994      	ldr	r4, [r2, #24]
 80073d6:	42a3      	cmp	r3, r4
 80073d8:	db01      	blt.n	80073de <__sfputc_r+0x16>
 80073da:	290a      	cmp	r1, #10
 80073dc:	d103      	bne.n	80073e6 <__sfputc_r+0x1e>
 80073de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073e2:	f000 bb33 	b.w	8007a4c <__swbuf_r>
 80073e6:	6813      	ldr	r3, [r2, #0]
 80073e8:	1c58      	adds	r0, r3, #1
 80073ea:	6010      	str	r0, [r2, #0]
 80073ec:	7019      	strb	r1, [r3, #0]
 80073ee:	4608      	mov	r0, r1
 80073f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <__sfputs_r>:
 80073f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f8:	4606      	mov	r6, r0
 80073fa:	460f      	mov	r7, r1
 80073fc:	4614      	mov	r4, r2
 80073fe:	18d5      	adds	r5, r2, r3
 8007400:	42ac      	cmp	r4, r5
 8007402:	d101      	bne.n	8007408 <__sfputs_r+0x12>
 8007404:	2000      	movs	r0, #0
 8007406:	e007      	b.n	8007418 <__sfputs_r+0x22>
 8007408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800740c:	463a      	mov	r2, r7
 800740e:	4630      	mov	r0, r6
 8007410:	f7ff ffda 	bl	80073c8 <__sfputc_r>
 8007414:	1c43      	adds	r3, r0, #1
 8007416:	d1f3      	bne.n	8007400 <__sfputs_r+0xa>
 8007418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800741c <_vfiprintf_r>:
 800741c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007420:	460d      	mov	r5, r1
 8007422:	b09d      	sub	sp, #116	; 0x74
 8007424:	4614      	mov	r4, r2
 8007426:	4698      	mov	r8, r3
 8007428:	4606      	mov	r6, r0
 800742a:	b118      	cbz	r0, 8007434 <_vfiprintf_r+0x18>
 800742c:	6983      	ldr	r3, [r0, #24]
 800742e:	b90b      	cbnz	r3, 8007434 <_vfiprintf_r+0x18>
 8007430:	f7ff fed0 	bl	80071d4 <__sinit>
 8007434:	4b89      	ldr	r3, [pc, #548]	; (800765c <_vfiprintf_r+0x240>)
 8007436:	429d      	cmp	r5, r3
 8007438:	d11b      	bne.n	8007472 <_vfiprintf_r+0x56>
 800743a:	6875      	ldr	r5, [r6, #4]
 800743c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800743e:	07d9      	lsls	r1, r3, #31
 8007440:	d405      	bmi.n	800744e <_vfiprintf_r+0x32>
 8007442:	89ab      	ldrh	r3, [r5, #12]
 8007444:	059a      	lsls	r2, r3, #22
 8007446:	d402      	bmi.n	800744e <_vfiprintf_r+0x32>
 8007448:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800744a:	f7ff ff61 	bl	8007310 <__retarget_lock_acquire_recursive>
 800744e:	89ab      	ldrh	r3, [r5, #12]
 8007450:	071b      	lsls	r3, r3, #28
 8007452:	d501      	bpl.n	8007458 <_vfiprintf_r+0x3c>
 8007454:	692b      	ldr	r3, [r5, #16]
 8007456:	b9eb      	cbnz	r3, 8007494 <_vfiprintf_r+0x78>
 8007458:	4629      	mov	r1, r5
 800745a:	4630      	mov	r0, r6
 800745c:	f000 fb5a 	bl	8007b14 <__swsetup_r>
 8007460:	b1c0      	cbz	r0, 8007494 <_vfiprintf_r+0x78>
 8007462:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007464:	07dc      	lsls	r4, r3, #31
 8007466:	d50e      	bpl.n	8007486 <_vfiprintf_r+0x6a>
 8007468:	f04f 30ff 	mov.w	r0, #4294967295
 800746c:	b01d      	add	sp, #116	; 0x74
 800746e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007472:	4b7b      	ldr	r3, [pc, #492]	; (8007660 <_vfiprintf_r+0x244>)
 8007474:	429d      	cmp	r5, r3
 8007476:	d101      	bne.n	800747c <_vfiprintf_r+0x60>
 8007478:	68b5      	ldr	r5, [r6, #8]
 800747a:	e7df      	b.n	800743c <_vfiprintf_r+0x20>
 800747c:	4b79      	ldr	r3, [pc, #484]	; (8007664 <_vfiprintf_r+0x248>)
 800747e:	429d      	cmp	r5, r3
 8007480:	bf08      	it	eq
 8007482:	68f5      	ldreq	r5, [r6, #12]
 8007484:	e7da      	b.n	800743c <_vfiprintf_r+0x20>
 8007486:	89ab      	ldrh	r3, [r5, #12]
 8007488:	0598      	lsls	r0, r3, #22
 800748a:	d4ed      	bmi.n	8007468 <_vfiprintf_r+0x4c>
 800748c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800748e:	f7ff ff40 	bl	8007312 <__retarget_lock_release_recursive>
 8007492:	e7e9      	b.n	8007468 <_vfiprintf_r+0x4c>
 8007494:	2300      	movs	r3, #0
 8007496:	9309      	str	r3, [sp, #36]	; 0x24
 8007498:	2320      	movs	r3, #32
 800749a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800749e:	f8cd 800c 	str.w	r8, [sp, #12]
 80074a2:	2330      	movs	r3, #48	; 0x30
 80074a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007668 <_vfiprintf_r+0x24c>
 80074a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074ac:	f04f 0901 	mov.w	r9, #1
 80074b0:	4623      	mov	r3, r4
 80074b2:	469a      	mov	sl, r3
 80074b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074b8:	b10a      	cbz	r2, 80074be <_vfiprintf_r+0xa2>
 80074ba:	2a25      	cmp	r2, #37	; 0x25
 80074bc:	d1f9      	bne.n	80074b2 <_vfiprintf_r+0x96>
 80074be:	ebba 0b04 	subs.w	fp, sl, r4
 80074c2:	d00b      	beq.n	80074dc <_vfiprintf_r+0xc0>
 80074c4:	465b      	mov	r3, fp
 80074c6:	4622      	mov	r2, r4
 80074c8:	4629      	mov	r1, r5
 80074ca:	4630      	mov	r0, r6
 80074cc:	f7ff ff93 	bl	80073f6 <__sfputs_r>
 80074d0:	3001      	adds	r0, #1
 80074d2:	f000 80aa 	beq.w	800762a <_vfiprintf_r+0x20e>
 80074d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074d8:	445a      	add	r2, fp
 80074da:	9209      	str	r2, [sp, #36]	; 0x24
 80074dc:	f89a 3000 	ldrb.w	r3, [sl]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f000 80a2 	beq.w	800762a <_vfiprintf_r+0x20e>
 80074e6:	2300      	movs	r3, #0
 80074e8:	f04f 32ff 	mov.w	r2, #4294967295
 80074ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074f0:	f10a 0a01 	add.w	sl, sl, #1
 80074f4:	9304      	str	r3, [sp, #16]
 80074f6:	9307      	str	r3, [sp, #28]
 80074f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074fc:	931a      	str	r3, [sp, #104]	; 0x68
 80074fe:	4654      	mov	r4, sl
 8007500:	2205      	movs	r2, #5
 8007502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007506:	4858      	ldr	r0, [pc, #352]	; (8007668 <_vfiprintf_r+0x24c>)
 8007508:	f7f8 fe62 	bl	80001d0 <memchr>
 800750c:	9a04      	ldr	r2, [sp, #16]
 800750e:	b9d8      	cbnz	r0, 8007548 <_vfiprintf_r+0x12c>
 8007510:	06d1      	lsls	r1, r2, #27
 8007512:	bf44      	itt	mi
 8007514:	2320      	movmi	r3, #32
 8007516:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800751a:	0713      	lsls	r3, r2, #28
 800751c:	bf44      	itt	mi
 800751e:	232b      	movmi	r3, #43	; 0x2b
 8007520:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007524:	f89a 3000 	ldrb.w	r3, [sl]
 8007528:	2b2a      	cmp	r3, #42	; 0x2a
 800752a:	d015      	beq.n	8007558 <_vfiprintf_r+0x13c>
 800752c:	9a07      	ldr	r2, [sp, #28]
 800752e:	4654      	mov	r4, sl
 8007530:	2000      	movs	r0, #0
 8007532:	f04f 0c0a 	mov.w	ip, #10
 8007536:	4621      	mov	r1, r4
 8007538:	f811 3b01 	ldrb.w	r3, [r1], #1
 800753c:	3b30      	subs	r3, #48	; 0x30
 800753e:	2b09      	cmp	r3, #9
 8007540:	d94e      	bls.n	80075e0 <_vfiprintf_r+0x1c4>
 8007542:	b1b0      	cbz	r0, 8007572 <_vfiprintf_r+0x156>
 8007544:	9207      	str	r2, [sp, #28]
 8007546:	e014      	b.n	8007572 <_vfiprintf_r+0x156>
 8007548:	eba0 0308 	sub.w	r3, r0, r8
 800754c:	fa09 f303 	lsl.w	r3, r9, r3
 8007550:	4313      	orrs	r3, r2
 8007552:	9304      	str	r3, [sp, #16]
 8007554:	46a2      	mov	sl, r4
 8007556:	e7d2      	b.n	80074fe <_vfiprintf_r+0xe2>
 8007558:	9b03      	ldr	r3, [sp, #12]
 800755a:	1d19      	adds	r1, r3, #4
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	9103      	str	r1, [sp, #12]
 8007560:	2b00      	cmp	r3, #0
 8007562:	bfbb      	ittet	lt
 8007564:	425b      	neglt	r3, r3
 8007566:	f042 0202 	orrlt.w	r2, r2, #2
 800756a:	9307      	strge	r3, [sp, #28]
 800756c:	9307      	strlt	r3, [sp, #28]
 800756e:	bfb8      	it	lt
 8007570:	9204      	strlt	r2, [sp, #16]
 8007572:	7823      	ldrb	r3, [r4, #0]
 8007574:	2b2e      	cmp	r3, #46	; 0x2e
 8007576:	d10c      	bne.n	8007592 <_vfiprintf_r+0x176>
 8007578:	7863      	ldrb	r3, [r4, #1]
 800757a:	2b2a      	cmp	r3, #42	; 0x2a
 800757c:	d135      	bne.n	80075ea <_vfiprintf_r+0x1ce>
 800757e:	9b03      	ldr	r3, [sp, #12]
 8007580:	1d1a      	adds	r2, r3, #4
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	9203      	str	r2, [sp, #12]
 8007586:	2b00      	cmp	r3, #0
 8007588:	bfb8      	it	lt
 800758a:	f04f 33ff 	movlt.w	r3, #4294967295
 800758e:	3402      	adds	r4, #2
 8007590:	9305      	str	r3, [sp, #20]
 8007592:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007678 <_vfiprintf_r+0x25c>
 8007596:	7821      	ldrb	r1, [r4, #0]
 8007598:	2203      	movs	r2, #3
 800759a:	4650      	mov	r0, sl
 800759c:	f7f8 fe18 	bl	80001d0 <memchr>
 80075a0:	b140      	cbz	r0, 80075b4 <_vfiprintf_r+0x198>
 80075a2:	2340      	movs	r3, #64	; 0x40
 80075a4:	eba0 000a 	sub.w	r0, r0, sl
 80075a8:	fa03 f000 	lsl.w	r0, r3, r0
 80075ac:	9b04      	ldr	r3, [sp, #16]
 80075ae:	4303      	orrs	r3, r0
 80075b0:	3401      	adds	r4, #1
 80075b2:	9304      	str	r3, [sp, #16]
 80075b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075b8:	482c      	ldr	r0, [pc, #176]	; (800766c <_vfiprintf_r+0x250>)
 80075ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075be:	2206      	movs	r2, #6
 80075c0:	f7f8 fe06 	bl	80001d0 <memchr>
 80075c4:	2800      	cmp	r0, #0
 80075c6:	d03f      	beq.n	8007648 <_vfiprintf_r+0x22c>
 80075c8:	4b29      	ldr	r3, [pc, #164]	; (8007670 <_vfiprintf_r+0x254>)
 80075ca:	bb1b      	cbnz	r3, 8007614 <_vfiprintf_r+0x1f8>
 80075cc:	9b03      	ldr	r3, [sp, #12]
 80075ce:	3307      	adds	r3, #7
 80075d0:	f023 0307 	bic.w	r3, r3, #7
 80075d4:	3308      	adds	r3, #8
 80075d6:	9303      	str	r3, [sp, #12]
 80075d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075da:	443b      	add	r3, r7
 80075dc:	9309      	str	r3, [sp, #36]	; 0x24
 80075de:	e767      	b.n	80074b0 <_vfiprintf_r+0x94>
 80075e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80075e4:	460c      	mov	r4, r1
 80075e6:	2001      	movs	r0, #1
 80075e8:	e7a5      	b.n	8007536 <_vfiprintf_r+0x11a>
 80075ea:	2300      	movs	r3, #0
 80075ec:	3401      	adds	r4, #1
 80075ee:	9305      	str	r3, [sp, #20]
 80075f0:	4619      	mov	r1, r3
 80075f2:	f04f 0c0a 	mov.w	ip, #10
 80075f6:	4620      	mov	r0, r4
 80075f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075fc:	3a30      	subs	r2, #48	; 0x30
 80075fe:	2a09      	cmp	r2, #9
 8007600:	d903      	bls.n	800760a <_vfiprintf_r+0x1ee>
 8007602:	2b00      	cmp	r3, #0
 8007604:	d0c5      	beq.n	8007592 <_vfiprintf_r+0x176>
 8007606:	9105      	str	r1, [sp, #20]
 8007608:	e7c3      	b.n	8007592 <_vfiprintf_r+0x176>
 800760a:	fb0c 2101 	mla	r1, ip, r1, r2
 800760e:	4604      	mov	r4, r0
 8007610:	2301      	movs	r3, #1
 8007612:	e7f0      	b.n	80075f6 <_vfiprintf_r+0x1da>
 8007614:	ab03      	add	r3, sp, #12
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	462a      	mov	r2, r5
 800761a:	4b16      	ldr	r3, [pc, #88]	; (8007674 <_vfiprintf_r+0x258>)
 800761c:	a904      	add	r1, sp, #16
 800761e:	4630      	mov	r0, r6
 8007620:	f3af 8000 	nop.w
 8007624:	4607      	mov	r7, r0
 8007626:	1c78      	adds	r0, r7, #1
 8007628:	d1d6      	bne.n	80075d8 <_vfiprintf_r+0x1bc>
 800762a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800762c:	07d9      	lsls	r1, r3, #31
 800762e:	d405      	bmi.n	800763c <_vfiprintf_r+0x220>
 8007630:	89ab      	ldrh	r3, [r5, #12]
 8007632:	059a      	lsls	r2, r3, #22
 8007634:	d402      	bmi.n	800763c <_vfiprintf_r+0x220>
 8007636:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007638:	f7ff fe6b 	bl	8007312 <__retarget_lock_release_recursive>
 800763c:	89ab      	ldrh	r3, [r5, #12]
 800763e:	065b      	lsls	r3, r3, #25
 8007640:	f53f af12 	bmi.w	8007468 <_vfiprintf_r+0x4c>
 8007644:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007646:	e711      	b.n	800746c <_vfiprintf_r+0x50>
 8007648:	ab03      	add	r3, sp, #12
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	462a      	mov	r2, r5
 800764e:	4b09      	ldr	r3, [pc, #36]	; (8007674 <_vfiprintf_r+0x258>)
 8007650:	a904      	add	r1, sp, #16
 8007652:	4630      	mov	r0, r6
 8007654:	f000 f880 	bl	8007758 <_printf_i>
 8007658:	e7e4      	b.n	8007624 <_vfiprintf_r+0x208>
 800765a:	bf00      	nop
 800765c:	08008534 	.word	0x08008534
 8007660:	08008554 	.word	0x08008554
 8007664:	08008514 	.word	0x08008514
 8007668:	08008574 	.word	0x08008574
 800766c:	0800857e 	.word	0x0800857e
 8007670:	00000000 	.word	0x00000000
 8007674:	080073f7 	.word	0x080073f7
 8007678:	0800857a 	.word	0x0800857a

0800767c <_printf_common>:
 800767c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007680:	4616      	mov	r6, r2
 8007682:	4699      	mov	r9, r3
 8007684:	688a      	ldr	r2, [r1, #8]
 8007686:	690b      	ldr	r3, [r1, #16]
 8007688:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800768c:	4293      	cmp	r3, r2
 800768e:	bfb8      	it	lt
 8007690:	4613      	movlt	r3, r2
 8007692:	6033      	str	r3, [r6, #0]
 8007694:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007698:	4607      	mov	r7, r0
 800769a:	460c      	mov	r4, r1
 800769c:	b10a      	cbz	r2, 80076a2 <_printf_common+0x26>
 800769e:	3301      	adds	r3, #1
 80076a0:	6033      	str	r3, [r6, #0]
 80076a2:	6823      	ldr	r3, [r4, #0]
 80076a4:	0699      	lsls	r1, r3, #26
 80076a6:	bf42      	ittt	mi
 80076a8:	6833      	ldrmi	r3, [r6, #0]
 80076aa:	3302      	addmi	r3, #2
 80076ac:	6033      	strmi	r3, [r6, #0]
 80076ae:	6825      	ldr	r5, [r4, #0]
 80076b0:	f015 0506 	ands.w	r5, r5, #6
 80076b4:	d106      	bne.n	80076c4 <_printf_common+0x48>
 80076b6:	f104 0a19 	add.w	sl, r4, #25
 80076ba:	68e3      	ldr	r3, [r4, #12]
 80076bc:	6832      	ldr	r2, [r6, #0]
 80076be:	1a9b      	subs	r3, r3, r2
 80076c0:	42ab      	cmp	r3, r5
 80076c2:	dc26      	bgt.n	8007712 <_printf_common+0x96>
 80076c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076c8:	1e13      	subs	r3, r2, #0
 80076ca:	6822      	ldr	r2, [r4, #0]
 80076cc:	bf18      	it	ne
 80076ce:	2301      	movne	r3, #1
 80076d0:	0692      	lsls	r2, r2, #26
 80076d2:	d42b      	bmi.n	800772c <_printf_common+0xb0>
 80076d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076d8:	4649      	mov	r1, r9
 80076da:	4638      	mov	r0, r7
 80076dc:	47c0      	blx	r8
 80076de:	3001      	adds	r0, #1
 80076e0:	d01e      	beq.n	8007720 <_printf_common+0xa4>
 80076e2:	6823      	ldr	r3, [r4, #0]
 80076e4:	68e5      	ldr	r5, [r4, #12]
 80076e6:	6832      	ldr	r2, [r6, #0]
 80076e8:	f003 0306 	and.w	r3, r3, #6
 80076ec:	2b04      	cmp	r3, #4
 80076ee:	bf08      	it	eq
 80076f0:	1aad      	subeq	r5, r5, r2
 80076f2:	68a3      	ldr	r3, [r4, #8]
 80076f4:	6922      	ldr	r2, [r4, #16]
 80076f6:	bf0c      	ite	eq
 80076f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076fc:	2500      	movne	r5, #0
 80076fe:	4293      	cmp	r3, r2
 8007700:	bfc4      	itt	gt
 8007702:	1a9b      	subgt	r3, r3, r2
 8007704:	18ed      	addgt	r5, r5, r3
 8007706:	2600      	movs	r6, #0
 8007708:	341a      	adds	r4, #26
 800770a:	42b5      	cmp	r5, r6
 800770c:	d11a      	bne.n	8007744 <_printf_common+0xc8>
 800770e:	2000      	movs	r0, #0
 8007710:	e008      	b.n	8007724 <_printf_common+0xa8>
 8007712:	2301      	movs	r3, #1
 8007714:	4652      	mov	r2, sl
 8007716:	4649      	mov	r1, r9
 8007718:	4638      	mov	r0, r7
 800771a:	47c0      	blx	r8
 800771c:	3001      	adds	r0, #1
 800771e:	d103      	bne.n	8007728 <_printf_common+0xac>
 8007720:	f04f 30ff 	mov.w	r0, #4294967295
 8007724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007728:	3501      	adds	r5, #1
 800772a:	e7c6      	b.n	80076ba <_printf_common+0x3e>
 800772c:	18e1      	adds	r1, r4, r3
 800772e:	1c5a      	adds	r2, r3, #1
 8007730:	2030      	movs	r0, #48	; 0x30
 8007732:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007736:	4422      	add	r2, r4
 8007738:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800773c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007740:	3302      	adds	r3, #2
 8007742:	e7c7      	b.n	80076d4 <_printf_common+0x58>
 8007744:	2301      	movs	r3, #1
 8007746:	4622      	mov	r2, r4
 8007748:	4649      	mov	r1, r9
 800774a:	4638      	mov	r0, r7
 800774c:	47c0      	blx	r8
 800774e:	3001      	adds	r0, #1
 8007750:	d0e6      	beq.n	8007720 <_printf_common+0xa4>
 8007752:	3601      	adds	r6, #1
 8007754:	e7d9      	b.n	800770a <_printf_common+0x8e>
	...

08007758 <_printf_i>:
 8007758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800775c:	460c      	mov	r4, r1
 800775e:	4691      	mov	r9, r2
 8007760:	7e27      	ldrb	r7, [r4, #24]
 8007762:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007764:	2f78      	cmp	r7, #120	; 0x78
 8007766:	4680      	mov	r8, r0
 8007768:	469a      	mov	sl, r3
 800776a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800776e:	d807      	bhi.n	8007780 <_printf_i+0x28>
 8007770:	2f62      	cmp	r7, #98	; 0x62
 8007772:	d80a      	bhi.n	800778a <_printf_i+0x32>
 8007774:	2f00      	cmp	r7, #0
 8007776:	f000 80d8 	beq.w	800792a <_printf_i+0x1d2>
 800777a:	2f58      	cmp	r7, #88	; 0x58
 800777c:	f000 80a3 	beq.w	80078c6 <_printf_i+0x16e>
 8007780:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007784:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007788:	e03a      	b.n	8007800 <_printf_i+0xa8>
 800778a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800778e:	2b15      	cmp	r3, #21
 8007790:	d8f6      	bhi.n	8007780 <_printf_i+0x28>
 8007792:	a001      	add	r0, pc, #4	; (adr r0, 8007798 <_printf_i+0x40>)
 8007794:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007798:	080077f1 	.word	0x080077f1
 800779c:	08007805 	.word	0x08007805
 80077a0:	08007781 	.word	0x08007781
 80077a4:	08007781 	.word	0x08007781
 80077a8:	08007781 	.word	0x08007781
 80077ac:	08007781 	.word	0x08007781
 80077b0:	08007805 	.word	0x08007805
 80077b4:	08007781 	.word	0x08007781
 80077b8:	08007781 	.word	0x08007781
 80077bc:	08007781 	.word	0x08007781
 80077c0:	08007781 	.word	0x08007781
 80077c4:	08007911 	.word	0x08007911
 80077c8:	08007835 	.word	0x08007835
 80077cc:	080078f3 	.word	0x080078f3
 80077d0:	08007781 	.word	0x08007781
 80077d4:	08007781 	.word	0x08007781
 80077d8:	08007933 	.word	0x08007933
 80077dc:	08007781 	.word	0x08007781
 80077e0:	08007835 	.word	0x08007835
 80077e4:	08007781 	.word	0x08007781
 80077e8:	08007781 	.word	0x08007781
 80077ec:	080078fb 	.word	0x080078fb
 80077f0:	680b      	ldr	r3, [r1, #0]
 80077f2:	1d1a      	adds	r2, r3, #4
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	600a      	str	r2, [r1, #0]
 80077f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80077fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007800:	2301      	movs	r3, #1
 8007802:	e0a3      	b.n	800794c <_printf_i+0x1f4>
 8007804:	6825      	ldr	r5, [r4, #0]
 8007806:	6808      	ldr	r0, [r1, #0]
 8007808:	062e      	lsls	r6, r5, #24
 800780a:	f100 0304 	add.w	r3, r0, #4
 800780e:	d50a      	bpl.n	8007826 <_printf_i+0xce>
 8007810:	6805      	ldr	r5, [r0, #0]
 8007812:	600b      	str	r3, [r1, #0]
 8007814:	2d00      	cmp	r5, #0
 8007816:	da03      	bge.n	8007820 <_printf_i+0xc8>
 8007818:	232d      	movs	r3, #45	; 0x2d
 800781a:	426d      	negs	r5, r5
 800781c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007820:	485e      	ldr	r0, [pc, #376]	; (800799c <_printf_i+0x244>)
 8007822:	230a      	movs	r3, #10
 8007824:	e019      	b.n	800785a <_printf_i+0x102>
 8007826:	f015 0f40 	tst.w	r5, #64	; 0x40
 800782a:	6805      	ldr	r5, [r0, #0]
 800782c:	600b      	str	r3, [r1, #0]
 800782e:	bf18      	it	ne
 8007830:	b22d      	sxthne	r5, r5
 8007832:	e7ef      	b.n	8007814 <_printf_i+0xbc>
 8007834:	680b      	ldr	r3, [r1, #0]
 8007836:	6825      	ldr	r5, [r4, #0]
 8007838:	1d18      	adds	r0, r3, #4
 800783a:	6008      	str	r0, [r1, #0]
 800783c:	0628      	lsls	r0, r5, #24
 800783e:	d501      	bpl.n	8007844 <_printf_i+0xec>
 8007840:	681d      	ldr	r5, [r3, #0]
 8007842:	e002      	b.n	800784a <_printf_i+0xf2>
 8007844:	0669      	lsls	r1, r5, #25
 8007846:	d5fb      	bpl.n	8007840 <_printf_i+0xe8>
 8007848:	881d      	ldrh	r5, [r3, #0]
 800784a:	4854      	ldr	r0, [pc, #336]	; (800799c <_printf_i+0x244>)
 800784c:	2f6f      	cmp	r7, #111	; 0x6f
 800784e:	bf0c      	ite	eq
 8007850:	2308      	moveq	r3, #8
 8007852:	230a      	movne	r3, #10
 8007854:	2100      	movs	r1, #0
 8007856:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800785a:	6866      	ldr	r6, [r4, #4]
 800785c:	60a6      	str	r6, [r4, #8]
 800785e:	2e00      	cmp	r6, #0
 8007860:	bfa2      	ittt	ge
 8007862:	6821      	ldrge	r1, [r4, #0]
 8007864:	f021 0104 	bicge.w	r1, r1, #4
 8007868:	6021      	strge	r1, [r4, #0]
 800786a:	b90d      	cbnz	r5, 8007870 <_printf_i+0x118>
 800786c:	2e00      	cmp	r6, #0
 800786e:	d04d      	beq.n	800790c <_printf_i+0x1b4>
 8007870:	4616      	mov	r6, r2
 8007872:	fbb5 f1f3 	udiv	r1, r5, r3
 8007876:	fb03 5711 	mls	r7, r3, r1, r5
 800787a:	5dc7      	ldrb	r7, [r0, r7]
 800787c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007880:	462f      	mov	r7, r5
 8007882:	42bb      	cmp	r3, r7
 8007884:	460d      	mov	r5, r1
 8007886:	d9f4      	bls.n	8007872 <_printf_i+0x11a>
 8007888:	2b08      	cmp	r3, #8
 800788a:	d10b      	bne.n	80078a4 <_printf_i+0x14c>
 800788c:	6823      	ldr	r3, [r4, #0]
 800788e:	07df      	lsls	r7, r3, #31
 8007890:	d508      	bpl.n	80078a4 <_printf_i+0x14c>
 8007892:	6923      	ldr	r3, [r4, #16]
 8007894:	6861      	ldr	r1, [r4, #4]
 8007896:	4299      	cmp	r1, r3
 8007898:	bfde      	ittt	le
 800789a:	2330      	movle	r3, #48	; 0x30
 800789c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80078a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80078a4:	1b92      	subs	r2, r2, r6
 80078a6:	6122      	str	r2, [r4, #16]
 80078a8:	f8cd a000 	str.w	sl, [sp]
 80078ac:	464b      	mov	r3, r9
 80078ae:	aa03      	add	r2, sp, #12
 80078b0:	4621      	mov	r1, r4
 80078b2:	4640      	mov	r0, r8
 80078b4:	f7ff fee2 	bl	800767c <_printf_common>
 80078b8:	3001      	adds	r0, #1
 80078ba:	d14c      	bne.n	8007956 <_printf_i+0x1fe>
 80078bc:	f04f 30ff 	mov.w	r0, #4294967295
 80078c0:	b004      	add	sp, #16
 80078c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c6:	4835      	ldr	r0, [pc, #212]	; (800799c <_printf_i+0x244>)
 80078c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80078cc:	6823      	ldr	r3, [r4, #0]
 80078ce:	680e      	ldr	r6, [r1, #0]
 80078d0:	061f      	lsls	r7, r3, #24
 80078d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80078d6:	600e      	str	r6, [r1, #0]
 80078d8:	d514      	bpl.n	8007904 <_printf_i+0x1ac>
 80078da:	07d9      	lsls	r1, r3, #31
 80078dc:	bf44      	itt	mi
 80078de:	f043 0320 	orrmi.w	r3, r3, #32
 80078e2:	6023      	strmi	r3, [r4, #0]
 80078e4:	b91d      	cbnz	r5, 80078ee <_printf_i+0x196>
 80078e6:	6823      	ldr	r3, [r4, #0]
 80078e8:	f023 0320 	bic.w	r3, r3, #32
 80078ec:	6023      	str	r3, [r4, #0]
 80078ee:	2310      	movs	r3, #16
 80078f0:	e7b0      	b.n	8007854 <_printf_i+0xfc>
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	f043 0320 	orr.w	r3, r3, #32
 80078f8:	6023      	str	r3, [r4, #0]
 80078fa:	2378      	movs	r3, #120	; 0x78
 80078fc:	4828      	ldr	r0, [pc, #160]	; (80079a0 <_printf_i+0x248>)
 80078fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007902:	e7e3      	b.n	80078cc <_printf_i+0x174>
 8007904:	065e      	lsls	r6, r3, #25
 8007906:	bf48      	it	mi
 8007908:	b2ad      	uxthmi	r5, r5
 800790a:	e7e6      	b.n	80078da <_printf_i+0x182>
 800790c:	4616      	mov	r6, r2
 800790e:	e7bb      	b.n	8007888 <_printf_i+0x130>
 8007910:	680b      	ldr	r3, [r1, #0]
 8007912:	6826      	ldr	r6, [r4, #0]
 8007914:	6960      	ldr	r0, [r4, #20]
 8007916:	1d1d      	adds	r5, r3, #4
 8007918:	600d      	str	r5, [r1, #0]
 800791a:	0635      	lsls	r5, r6, #24
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	d501      	bpl.n	8007924 <_printf_i+0x1cc>
 8007920:	6018      	str	r0, [r3, #0]
 8007922:	e002      	b.n	800792a <_printf_i+0x1d2>
 8007924:	0671      	lsls	r1, r6, #25
 8007926:	d5fb      	bpl.n	8007920 <_printf_i+0x1c8>
 8007928:	8018      	strh	r0, [r3, #0]
 800792a:	2300      	movs	r3, #0
 800792c:	6123      	str	r3, [r4, #16]
 800792e:	4616      	mov	r6, r2
 8007930:	e7ba      	b.n	80078a8 <_printf_i+0x150>
 8007932:	680b      	ldr	r3, [r1, #0]
 8007934:	1d1a      	adds	r2, r3, #4
 8007936:	600a      	str	r2, [r1, #0]
 8007938:	681e      	ldr	r6, [r3, #0]
 800793a:	6862      	ldr	r2, [r4, #4]
 800793c:	2100      	movs	r1, #0
 800793e:	4630      	mov	r0, r6
 8007940:	f7f8 fc46 	bl	80001d0 <memchr>
 8007944:	b108      	cbz	r0, 800794a <_printf_i+0x1f2>
 8007946:	1b80      	subs	r0, r0, r6
 8007948:	6060      	str	r0, [r4, #4]
 800794a:	6863      	ldr	r3, [r4, #4]
 800794c:	6123      	str	r3, [r4, #16]
 800794e:	2300      	movs	r3, #0
 8007950:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007954:	e7a8      	b.n	80078a8 <_printf_i+0x150>
 8007956:	6923      	ldr	r3, [r4, #16]
 8007958:	4632      	mov	r2, r6
 800795a:	4649      	mov	r1, r9
 800795c:	4640      	mov	r0, r8
 800795e:	47d0      	blx	sl
 8007960:	3001      	adds	r0, #1
 8007962:	d0ab      	beq.n	80078bc <_printf_i+0x164>
 8007964:	6823      	ldr	r3, [r4, #0]
 8007966:	079b      	lsls	r3, r3, #30
 8007968:	d413      	bmi.n	8007992 <_printf_i+0x23a>
 800796a:	68e0      	ldr	r0, [r4, #12]
 800796c:	9b03      	ldr	r3, [sp, #12]
 800796e:	4298      	cmp	r0, r3
 8007970:	bfb8      	it	lt
 8007972:	4618      	movlt	r0, r3
 8007974:	e7a4      	b.n	80078c0 <_printf_i+0x168>
 8007976:	2301      	movs	r3, #1
 8007978:	4632      	mov	r2, r6
 800797a:	4649      	mov	r1, r9
 800797c:	4640      	mov	r0, r8
 800797e:	47d0      	blx	sl
 8007980:	3001      	adds	r0, #1
 8007982:	d09b      	beq.n	80078bc <_printf_i+0x164>
 8007984:	3501      	adds	r5, #1
 8007986:	68e3      	ldr	r3, [r4, #12]
 8007988:	9903      	ldr	r1, [sp, #12]
 800798a:	1a5b      	subs	r3, r3, r1
 800798c:	42ab      	cmp	r3, r5
 800798e:	dcf2      	bgt.n	8007976 <_printf_i+0x21e>
 8007990:	e7eb      	b.n	800796a <_printf_i+0x212>
 8007992:	2500      	movs	r5, #0
 8007994:	f104 0619 	add.w	r6, r4, #25
 8007998:	e7f5      	b.n	8007986 <_printf_i+0x22e>
 800799a:	bf00      	nop
 800799c:	08008585 	.word	0x08008585
 80079a0:	08008596 	.word	0x08008596

080079a4 <_sbrk_r>:
 80079a4:	b538      	push	{r3, r4, r5, lr}
 80079a6:	4d06      	ldr	r5, [pc, #24]	; (80079c0 <_sbrk_r+0x1c>)
 80079a8:	2300      	movs	r3, #0
 80079aa:	4604      	mov	r4, r0
 80079ac:	4608      	mov	r0, r1
 80079ae:	602b      	str	r3, [r5, #0]
 80079b0:	f7fa fa36 	bl	8001e20 <_sbrk>
 80079b4:	1c43      	adds	r3, r0, #1
 80079b6:	d102      	bne.n	80079be <_sbrk_r+0x1a>
 80079b8:	682b      	ldr	r3, [r5, #0]
 80079ba:	b103      	cbz	r3, 80079be <_sbrk_r+0x1a>
 80079bc:	6023      	str	r3, [r4, #0]
 80079be:	bd38      	pop	{r3, r4, r5, pc}
 80079c0:	20004640 	.word	0x20004640

080079c4 <__sread>:
 80079c4:	b510      	push	{r4, lr}
 80079c6:	460c      	mov	r4, r1
 80079c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079cc:	f000 fab4 	bl	8007f38 <_read_r>
 80079d0:	2800      	cmp	r0, #0
 80079d2:	bfab      	itete	ge
 80079d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80079d6:	89a3      	ldrhlt	r3, [r4, #12]
 80079d8:	181b      	addge	r3, r3, r0
 80079da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80079de:	bfac      	ite	ge
 80079e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80079e2:	81a3      	strhlt	r3, [r4, #12]
 80079e4:	bd10      	pop	{r4, pc}

080079e6 <__swrite>:
 80079e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ea:	461f      	mov	r7, r3
 80079ec:	898b      	ldrh	r3, [r1, #12]
 80079ee:	05db      	lsls	r3, r3, #23
 80079f0:	4605      	mov	r5, r0
 80079f2:	460c      	mov	r4, r1
 80079f4:	4616      	mov	r6, r2
 80079f6:	d505      	bpl.n	8007a04 <__swrite+0x1e>
 80079f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079fc:	2302      	movs	r3, #2
 80079fe:	2200      	movs	r2, #0
 8007a00:	f000 f9c8 	bl	8007d94 <_lseek_r>
 8007a04:	89a3      	ldrh	r3, [r4, #12]
 8007a06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a0e:	81a3      	strh	r3, [r4, #12]
 8007a10:	4632      	mov	r2, r6
 8007a12:	463b      	mov	r3, r7
 8007a14:	4628      	mov	r0, r5
 8007a16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a1a:	f000 b869 	b.w	8007af0 <_write_r>

08007a1e <__sseek>:
 8007a1e:	b510      	push	{r4, lr}
 8007a20:	460c      	mov	r4, r1
 8007a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a26:	f000 f9b5 	bl	8007d94 <_lseek_r>
 8007a2a:	1c43      	adds	r3, r0, #1
 8007a2c:	89a3      	ldrh	r3, [r4, #12]
 8007a2e:	bf15      	itete	ne
 8007a30:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a3a:	81a3      	strheq	r3, [r4, #12]
 8007a3c:	bf18      	it	ne
 8007a3e:	81a3      	strhne	r3, [r4, #12]
 8007a40:	bd10      	pop	{r4, pc}

08007a42 <__sclose>:
 8007a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a46:	f000 b8d3 	b.w	8007bf0 <_close_r>
	...

08007a4c <__swbuf_r>:
 8007a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4e:	460e      	mov	r6, r1
 8007a50:	4614      	mov	r4, r2
 8007a52:	4605      	mov	r5, r0
 8007a54:	b118      	cbz	r0, 8007a5e <__swbuf_r+0x12>
 8007a56:	6983      	ldr	r3, [r0, #24]
 8007a58:	b90b      	cbnz	r3, 8007a5e <__swbuf_r+0x12>
 8007a5a:	f7ff fbbb 	bl	80071d4 <__sinit>
 8007a5e:	4b21      	ldr	r3, [pc, #132]	; (8007ae4 <__swbuf_r+0x98>)
 8007a60:	429c      	cmp	r4, r3
 8007a62:	d12b      	bne.n	8007abc <__swbuf_r+0x70>
 8007a64:	686c      	ldr	r4, [r5, #4]
 8007a66:	69a3      	ldr	r3, [r4, #24]
 8007a68:	60a3      	str	r3, [r4, #8]
 8007a6a:	89a3      	ldrh	r3, [r4, #12]
 8007a6c:	071a      	lsls	r2, r3, #28
 8007a6e:	d52f      	bpl.n	8007ad0 <__swbuf_r+0x84>
 8007a70:	6923      	ldr	r3, [r4, #16]
 8007a72:	b36b      	cbz	r3, 8007ad0 <__swbuf_r+0x84>
 8007a74:	6923      	ldr	r3, [r4, #16]
 8007a76:	6820      	ldr	r0, [r4, #0]
 8007a78:	1ac0      	subs	r0, r0, r3
 8007a7a:	6963      	ldr	r3, [r4, #20]
 8007a7c:	b2f6      	uxtb	r6, r6
 8007a7e:	4283      	cmp	r3, r0
 8007a80:	4637      	mov	r7, r6
 8007a82:	dc04      	bgt.n	8007a8e <__swbuf_r+0x42>
 8007a84:	4621      	mov	r1, r4
 8007a86:	4628      	mov	r0, r5
 8007a88:	f000 f948 	bl	8007d1c <_fflush_r>
 8007a8c:	bb30      	cbnz	r0, 8007adc <__swbuf_r+0x90>
 8007a8e:	68a3      	ldr	r3, [r4, #8]
 8007a90:	3b01      	subs	r3, #1
 8007a92:	60a3      	str	r3, [r4, #8]
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	6022      	str	r2, [r4, #0]
 8007a9a:	701e      	strb	r6, [r3, #0]
 8007a9c:	6963      	ldr	r3, [r4, #20]
 8007a9e:	3001      	adds	r0, #1
 8007aa0:	4283      	cmp	r3, r0
 8007aa2:	d004      	beq.n	8007aae <__swbuf_r+0x62>
 8007aa4:	89a3      	ldrh	r3, [r4, #12]
 8007aa6:	07db      	lsls	r3, r3, #31
 8007aa8:	d506      	bpl.n	8007ab8 <__swbuf_r+0x6c>
 8007aaa:	2e0a      	cmp	r6, #10
 8007aac:	d104      	bne.n	8007ab8 <__swbuf_r+0x6c>
 8007aae:	4621      	mov	r1, r4
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	f000 f933 	bl	8007d1c <_fflush_r>
 8007ab6:	b988      	cbnz	r0, 8007adc <__swbuf_r+0x90>
 8007ab8:	4638      	mov	r0, r7
 8007aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007abc:	4b0a      	ldr	r3, [pc, #40]	; (8007ae8 <__swbuf_r+0x9c>)
 8007abe:	429c      	cmp	r4, r3
 8007ac0:	d101      	bne.n	8007ac6 <__swbuf_r+0x7a>
 8007ac2:	68ac      	ldr	r4, [r5, #8]
 8007ac4:	e7cf      	b.n	8007a66 <__swbuf_r+0x1a>
 8007ac6:	4b09      	ldr	r3, [pc, #36]	; (8007aec <__swbuf_r+0xa0>)
 8007ac8:	429c      	cmp	r4, r3
 8007aca:	bf08      	it	eq
 8007acc:	68ec      	ldreq	r4, [r5, #12]
 8007ace:	e7ca      	b.n	8007a66 <__swbuf_r+0x1a>
 8007ad0:	4621      	mov	r1, r4
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	f000 f81e 	bl	8007b14 <__swsetup_r>
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	d0cb      	beq.n	8007a74 <__swbuf_r+0x28>
 8007adc:	f04f 37ff 	mov.w	r7, #4294967295
 8007ae0:	e7ea      	b.n	8007ab8 <__swbuf_r+0x6c>
 8007ae2:	bf00      	nop
 8007ae4:	08008534 	.word	0x08008534
 8007ae8:	08008554 	.word	0x08008554
 8007aec:	08008514 	.word	0x08008514

08007af0 <_write_r>:
 8007af0:	b538      	push	{r3, r4, r5, lr}
 8007af2:	4d07      	ldr	r5, [pc, #28]	; (8007b10 <_write_r+0x20>)
 8007af4:	4604      	mov	r4, r0
 8007af6:	4608      	mov	r0, r1
 8007af8:	4611      	mov	r1, r2
 8007afa:	2200      	movs	r2, #0
 8007afc:	602a      	str	r2, [r5, #0]
 8007afe:	461a      	mov	r2, r3
 8007b00:	f7fa f93d 	bl	8001d7e <_write>
 8007b04:	1c43      	adds	r3, r0, #1
 8007b06:	d102      	bne.n	8007b0e <_write_r+0x1e>
 8007b08:	682b      	ldr	r3, [r5, #0]
 8007b0a:	b103      	cbz	r3, 8007b0e <_write_r+0x1e>
 8007b0c:	6023      	str	r3, [r4, #0]
 8007b0e:	bd38      	pop	{r3, r4, r5, pc}
 8007b10:	20004640 	.word	0x20004640

08007b14 <__swsetup_r>:
 8007b14:	4b32      	ldr	r3, [pc, #200]	; (8007be0 <__swsetup_r+0xcc>)
 8007b16:	b570      	push	{r4, r5, r6, lr}
 8007b18:	681d      	ldr	r5, [r3, #0]
 8007b1a:	4606      	mov	r6, r0
 8007b1c:	460c      	mov	r4, r1
 8007b1e:	b125      	cbz	r5, 8007b2a <__swsetup_r+0x16>
 8007b20:	69ab      	ldr	r3, [r5, #24]
 8007b22:	b913      	cbnz	r3, 8007b2a <__swsetup_r+0x16>
 8007b24:	4628      	mov	r0, r5
 8007b26:	f7ff fb55 	bl	80071d4 <__sinit>
 8007b2a:	4b2e      	ldr	r3, [pc, #184]	; (8007be4 <__swsetup_r+0xd0>)
 8007b2c:	429c      	cmp	r4, r3
 8007b2e:	d10f      	bne.n	8007b50 <__swsetup_r+0x3c>
 8007b30:	686c      	ldr	r4, [r5, #4]
 8007b32:	89a3      	ldrh	r3, [r4, #12]
 8007b34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b38:	0719      	lsls	r1, r3, #28
 8007b3a:	d42c      	bmi.n	8007b96 <__swsetup_r+0x82>
 8007b3c:	06dd      	lsls	r5, r3, #27
 8007b3e:	d411      	bmi.n	8007b64 <__swsetup_r+0x50>
 8007b40:	2309      	movs	r3, #9
 8007b42:	6033      	str	r3, [r6, #0]
 8007b44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b48:	81a3      	strh	r3, [r4, #12]
 8007b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b4e:	e03e      	b.n	8007bce <__swsetup_r+0xba>
 8007b50:	4b25      	ldr	r3, [pc, #148]	; (8007be8 <__swsetup_r+0xd4>)
 8007b52:	429c      	cmp	r4, r3
 8007b54:	d101      	bne.n	8007b5a <__swsetup_r+0x46>
 8007b56:	68ac      	ldr	r4, [r5, #8]
 8007b58:	e7eb      	b.n	8007b32 <__swsetup_r+0x1e>
 8007b5a:	4b24      	ldr	r3, [pc, #144]	; (8007bec <__swsetup_r+0xd8>)
 8007b5c:	429c      	cmp	r4, r3
 8007b5e:	bf08      	it	eq
 8007b60:	68ec      	ldreq	r4, [r5, #12]
 8007b62:	e7e6      	b.n	8007b32 <__swsetup_r+0x1e>
 8007b64:	0758      	lsls	r0, r3, #29
 8007b66:	d512      	bpl.n	8007b8e <__swsetup_r+0x7a>
 8007b68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b6a:	b141      	cbz	r1, 8007b7e <__swsetup_r+0x6a>
 8007b6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b70:	4299      	cmp	r1, r3
 8007b72:	d002      	beq.n	8007b7a <__swsetup_r+0x66>
 8007b74:	4630      	mov	r0, r6
 8007b76:	f000 f98f 	bl	8007e98 <_free_r>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	6363      	str	r3, [r4, #52]	; 0x34
 8007b7e:	89a3      	ldrh	r3, [r4, #12]
 8007b80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b84:	81a3      	strh	r3, [r4, #12]
 8007b86:	2300      	movs	r3, #0
 8007b88:	6063      	str	r3, [r4, #4]
 8007b8a:	6923      	ldr	r3, [r4, #16]
 8007b8c:	6023      	str	r3, [r4, #0]
 8007b8e:	89a3      	ldrh	r3, [r4, #12]
 8007b90:	f043 0308 	orr.w	r3, r3, #8
 8007b94:	81a3      	strh	r3, [r4, #12]
 8007b96:	6923      	ldr	r3, [r4, #16]
 8007b98:	b94b      	cbnz	r3, 8007bae <__swsetup_r+0x9a>
 8007b9a:	89a3      	ldrh	r3, [r4, #12]
 8007b9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ba4:	d003      	beq.n	8007bae <__swsetup_r+0x9a>
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	4630      	mov	r0, r6
 8007baa:	f000 f929 	bl	8007e00 <__smakebuf_r>
 8007bae:	89a0      	ldrh	r0, [r4, #12]
 8007bb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bb4:	f010 0301 	ands.w	r3, r0, #1
 8007bb8:	d00a      	beq.n	8007bd0 <__swsetup_r+0xbc>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	60a3      	str	r3, [r4, #8]
 8007bbe:	6963      	ldr	r3, [r4, #20]
 8007bc0:	425b      	negs	r3, r3
 8007bc2:	61a3      	str	r3, [r4, #24]
 8007bc4:	6923      	ldr	r3, [r4, #16]
 8007bc6:	b943      	cbnz	r3, 8007bda <__swsetup_r+0xc6>
 8007bc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007bcc:	d1ba      	bne.n	8007b44 <__swsetup_r+0x30>
 8007bce:	bd70      	pop	{r4, r5, r6, pc}
 8007bd0:	0781      	lsls	r1, r0, #30
 8007bd2:	bf58      	it	pl
 8007bd4:	6963      	ldrpl	r3, [r4, #20]
 8007bd6:	60a3      	str	r3, [r4, #8]
 8007bd8:	e7f4      	b.n	8007bc4 <__swsetup_r+0xb0>
 8007bda:	2000      	movs	r0, #0
 8007bdc:	e7f7      	b.n	8007bce <__swsetup_r+0xba>
 8007bde:	bf00      	nop
 8007be0:	20000024 	.word	0x20000024
 8007be4:	08008534 	.word	0x08008534
 8007be8:	08008554 	.word	0x08008554
 8007bec:	08008514 	.word	0x08008514

08007bf0 <_close_r>:
 8007bf0:	b538      	push	{r3, r4, r5, lr}
 8007bf2:	4d06      	ldr	r5, [pc, #24]	; (8007c0c <_close_r+0x1c>)
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	4608      	mov	r0, r1
 8007bfa:	602b      	str	r3, [r5, #0]
 8007bfc:	f7fa f8db 	bl	8001db6 <_close>
 8007c00:	1c43      	adds	r3, r0, #1
 8007c02:	d102      	bne.n	8007c0a <_close_r+0x1a>
 8007c04:	682b      	ldr	r3, [r5, #0]
 8007c06:	b103      	cbz	r3, 8007c0a <_close_r+0x1a>
 8007c08:	6023      	str	r3, [r4, #0]
 8007c0a:	bd38      	pop	{r3, r4, r5, pc}
 8007c0c:	20004640 	.word	0x20004640

08007c10 <__sflush_r>:
 8007c10:	898a      	ldrh	r2, [r1, #12]
 8007c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c16:	4605      	mov	r5, r0
 8007c18:	0710      	lsls	r0, r2, #28
 8007c1a:	460c      	mov	r4, r1
 8007c1c:	d458      	bmi.n	8007cd0 <__sflush_r+0xc0>
 8007c1e:	684b      	ldr	r3, [r1, #4]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	dc05      	bgt.n	8007c30 <__sflush_r+0x20>
 8007c24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	dc02      	bgt.n	8007c30 <__sflush_r+0x20>
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c32:	2e00      	cmp	r6, #0
 8007c34:	d0f9      	beq.n	8007c2a <__sflush_r+0x1a>
 8007c36:	2300      	movs	r3, #0
 8007c38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c3c:	682f      	ldr	r7, [r5, #0]
 8007c3e:	602b      	str	r3, [r5, #0]
 8007c40:	d032      	beq.n	8007ca8 <__sflush_r+0x98>
 8007c42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c44:	89a3      	ldrh	r3, [r4, #12]
 8007c46:	075a      	lsls	r2, r3, #29
 8007c48:	d505      	bpl.n	8007c56 <__sflush_r+0x46>
 8007c4a:	6863      	ldr	r3, [r4, #4]
 8007c4c:	1ac0      	subs	r0, r0, r3
 8007c4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c50:	b10b      	cbz	r3, 8007c56 <__sflush_r+0x46>
 8007c52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c54:	1ac0      	subs	r0, r0, r3
 8007c56:	2300      	movs	r3, #0
 8007c58:	4602      	mov	r2, r0
 8007c5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c5c:	6a21      	ldr	r1, [r4, #32]
 8007c5e:	4628      	mov	r0, r5
 8007c60:	47b0      	blx	r6
 8007c62:	1c43      	adds	r3, r0, #1
 8007c64:	89a3      	ldrh	r3, [r4, #12]
 8007c66:	d106      	bne.n	8007c76 <__sflush_r+0x66>
 8007c68:	6829      	ldr	r1, [r5, #0]
 8007c6a:	291d      	cmp	r1, #29
 8007c6c:	d82c      	bhi.n	8007cc8 <__sflush_r+0xb8>
 8007c6e:	4a2a      	ldr	r2, [pc, #168]	; (8007d18 <__sflush_r+0x108>)
 8007c70:	40ca      	lsrs	r2, r1
 8007c72:	07d6      	lsls	r6, r2, #31
 8007c74:	d528      	bpl.n	8007cc8 <__sflush_r+0xb8>
 8007c76:	2200      	movs	r2, #0
 8007c78:	6062      	str	r2, [r4, #4]
 8007c7a:	04d9      	lsls	r1, r3, #19
 8007c7c:	6922      	ldr	r2, [r4, #16]
 8007c7e:	6022      	str	r2, [r4, #0]
 8007c80:	d504      	bpl.n	8007c8c <__sflush_r+0x7c>
 8007c82:	1c42      	adds	r2, r0, #1
 8007c84:	d101      	bne.n	8007c8a <__sflush_r+0x7a>
 8007c86:	682b      	ldr	r3, [r5, #0]
 8007c88:	b903      	cbnz	r3, 8007c8c <__sflush_r+0x7c>
 8007c8a:	6560      	str	r0, [r4, #84]	; 0x54
 8007c8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c8e:	602f      	str	r7, [r5, #0]
 8007c90:	2900      	cmp	r1, #0
 8007c92:	d0ca      	beq.n	8007c2a <__sflush_r+0x1a>
 8007c94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c98:	4299      	cmp	r1, r3
 8007c9a:	d002      	beq.n	8007ca2 <__sflush_r+0x92>
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	f000 f8fb 	bl	8007e98 <_free_r>
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	6360      	str	r0, [r4, #52]	; 0x34
 8007ca6:	e7c1      	b.n	8007c2c <__sflush_r+0x1c>
 8007ca8:	6a21      	ldr	r1, [r4, #32]
 8007caa:	2301      	movs	r3, #1
 8007cac:	4628      	mov	r0, r5
 8007cae:	47b0      	blx	r6
 8007cb0:	1c41      	adds	r1, r0, #1
 8007cb2:	d1c7      	bne.n	8007c44 <__sflush_r+0x34>
 8007cb4:	682b      	ldr	r3, [r5, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d0c4      	beq.n	8007c44 <__sflush_r+0x34>
 8007cba:	2b1d      	cmp	r3, #29
 8007cbc:	d001      	beq.n	8007cc2 <__sflush_r+0xb2>
 8007cbe:	2b16      	cmp	r3, #22
 8007cc0:	d101      	bne.n	8007cc6 <__sflush_r+0xb6>
 8007cc2:	602f      	str	r7, [r5, #0]
 8007cc4:	e7b1      	b.n	8007c2a <__sflush_r+0x1a>
 8007cc6:	89a3      	ldrh	r3, [r4, #12]
 8007cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ccc:	81a3      	strh	r3, [r4, #12]
 8007cce:	e7ad      	b.n	8007c2c <__sflush_r+0x1c>
 8007cd0:	690f      	ldr	r7, [r1, #16]
 8007cd2:	2f00      	cmp	r7, #0
 8007cd4:	d0a9      	beq.n	8007c2a <__sflush_r+0x1a>
 8007cd6:	0793      	lsls	r3, r2, #30
 8007cd8:	680e      	ldr	r6, [r1, #0]
 8007cda:	bf08      	it	eq
 8007cdc:	694b      	ldreq	r3, [r1, #20]
 8007cde:	600f      	str	r7, [r1, #0]
 8007ce0:	bf18      	it	ne
 8007ce2:	2300      	movne	r3, #0
 8007ce4:	eba6 0807 	sub.w	r8, r6, r7
 8007ce8:	608b      	str	r3, [r1, #8]
 8007cea:	f1b8 0f00 	cmp.w	r8, #0
 8007cee:	dd9c      	ble.n	8007c2a <__sflush_r+0x1a>
 8007cf0:	6a21      	ldr	r1, [r4, #32]
 8007cf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007cf4:	4643      	mov	r3, r8
 8007cf6:	463a      	mov	r2, r7
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	47b0      	blx	r6
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	dc06      	bgt.n	8007d0e <__sflush_r+0xfe>
 8007d00:	89a3      	ldrh	r3, [r4, #12]
 8007d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d06:	81a3      	strh	r3, [r4, #12]
 8007d08:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0c:	e78e      	b.n	8007c2c <__sflush_r+0x1c>
 8007d0e:	4407      	add	r7, r0
 8007d10:	eba8 0800 	sub.w	r8, r8, r0
 8007d14:	e7e9      	b.n	8007cea <__sflush_r+0xda>
 8007d16:	bf00      	nop
 8007d18:	20400001 	.word	0x20400001

08007d1c <_fflush_r>:
 8007d1c:	b538      	push	{r3, r4, r5, lr}
 8007d1e:	690b      	ldr	r3, [r1, #16]
 8007d20:	4605      	mov	r5, r0
 8007d22:	460c      	mov	r4, r1
 8007d24:	b913      	cbnz	r3, 8007d2c <_fflush_r+0x10>
 8007d26:	2500      	movs	r5, #0
 8007d28:	4628      	mov	r0, r5
 8007d2a:	bd38      	pop	{r3, r4, r5, pc}
 8007d2c:	b118      	cbz	r0, 8007d36 <_fflush_r+0x1a>
 8007d2e:	6983      	ldr	r3, [r0, #24]
 8007d30:	b90b      	cbnz	r3, 8007d36 <_fflush_r+0x1a>
 8007d32:	f7ff fa4f 	bl	80071d4 <__sinit>
 8007d36:	4b14      	ldr	r3, [pc, #80]	; (8007d88 <_fflush_r+0x6c>)
 8007d38:	429c      	cmp	r4, r3
 8007d3a:	d11b      	bne.n	8007d74 <_fflush_r+0x58>
 8007d3c:	686c      	ldr	r4, [r5, #4]
 8007d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d0ef      	beq.n	8007d26 <_fflush_r+0xa>
 8007d46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d48:	07d0      	lsls	r0, r2, #31
 8007d4a:	d404      	bmi.n	8007d56 <_fflush_r+0x3a>
 8007d4c:	0599      	lsls	r1, r3, #22
 8007d4e:	d402      	bmi.n	8007d56 <_fflush_r+0x3a>
 8007d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d52:	f7ff fadd 	bl	8007310 <__retarget_lock_acquire_recursive>
 8007d56:	4628      	mov	r0, r5
 8007d58:	4621      	mov	r1, r4
 8007d5a:	f7ff ff59 	bl	8007c10 <__sflush_r>
 8007d5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d60:	07da      	lsls	r2, r3, #31
 8007d62:	4605      	mov	r5, r0
 8007d64:	d4e0      	bmi.n	8007d28 <_fflush_r+0xc>
 8007d66:	89a3      	ldrh	r3, [r4, #12]
 8007d68:	059b      	lsls	r3, r3, #22
 8007d6a:	d4dd      	bmi.n	8007d28 <_fflush_r+0xc>
 8007d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d6e:	f7ff fad0 	bl	8007312 <__retarget_lock_release_recursive>
 8007d72:	e7d9      	b.n	8007d28 <_fflush_r+0xc>
 8007d74:	4b05      	ldr	r3, [pc, #20]	; (8007d8c <_fflush_r+0x70>)
 8007d76:	429c      	cmp	r4, r3
 8007d78:	d101      	bne.n	8007d7e <_fflush_r+0x62>
 8007d7a:	68ac      	ldr	r4, [r5, #8]
 8007d7c:	e7df      	b.n	8007d3e <_fflush_r+0x22>
 8007d7e:	4b04      	ldr	r3, [pc, #16]	; (8007d90 <_fflush_r+0x74>)
 8007d80:	429c      	cmp	r4, r3
 8007d82:	bf08      	it	eq
 8007d84:	68ec      	ldreq	r4, [r5, #12]
 8007d86:	e7da      	b.n	8007d3e <_fflush_r+0x22>
 8007d88:	08008534 	.word	0x08008534
 8007d8c:	08008554 	.word	0x08008554
 8007d90:	08008514 	.word	0x08008514

08007d94 <_lseek_r>:
 8007d94:	b538      	push	{r3, r4, r5, lr}
 8007d96:	4d07      	ldr	r5, [pc, #28]	; (8007db4 <_lseek_r+0x20>)
 8007d98:	4604      	mov	r4, r0
 8007d9a:	4608      	mov	r0, r1
 8007d9c:	4611      	mov	r1, r2
 8007d9e:	2200      	movs	r2, #0
 8007da0:	602a      	str	r2, [r5, #0]
 8007da2:	461a      	mov	r2, r3
 8007da4:	f7fa f82e 	bl	8001e04 <_lseek>
 8007da8:	1c43      	adds	r3, r0, #1
 8007daa:	d102      	bne.n	8007db2 <_lseek_r+0x1e>
 8007dac:	682b      	ldr	r3, [r5, #0]
 8007dae:	b103      	cbz	r3, 8007db2 <_lseek_r+0x1e>
 8007db0:	6023      	str	r3, [r4, #0]
 8007db2:	bd38      	pop	{r3, r4, r5, pc}
 8007db4:	20004640 	.word	0x20004640

08007db8 <__swhatbuf_r>:
 8007db8:	b570      	push	{r4, r5, r6, lr}
 8007dba:	460e      	mov	r6, r1
 8007dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dc0:	2900      	cmp	r1, #0
 8007dc2:	b096      	sub	sp, #88	; 0x58
 8007dc4:	4614      	mov	r4, r2
 8007dc6:	461d      	mov	r5, r3
 8007dc8:	da07      	bge.n	8007dda <__swhatbuf_r+0x22>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	602b      	str	r3, [r5, #0]
 8007dce:	89b3      	ldrh	r3, [r6, #12]
 8007dd0:	061a      	lsls	r2, r3, #24
 8007dd2:	d410      	bmi.n	8007df6 <__swhatbuf_r+0x3e>
 8007dd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dd8:	e00e      	b.n	8007df8 <__swhatbuf_r+0x40>
 8007dda:	466a      	mov	r2, sp
 8007ddc:	f000 f8be 	bl	8007f5c <_fstat_r>
 8007de0:	2800      	cmp	r0, #0
 8007de2:	dbf2      	blt.n	8007dca <__swhatbuf_r+0x12>
 8007de4:	9a01      	ldr	r2, [sp, #4]
 8007de6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007dea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007dee:	425a      	negs	r2, r3
 8007df0:	415a      	adcs	r2, r3
 8007df2:	602a      	str	r2, [r5, #0]
 8007df4:	e7ee      	b.n	8007dd4 <__swhatbuf_r+0x1c>
 8007df6:	2340      	movs	r3, #64	; 0x40
 8007df8:	2000      	movs	r0, #0
 8007dfa:	6023      	str	r3, [r4, #0]
 8007dfc:	b016      	add	sp, #88	; 0x58
 8007dfe:	bd70      	pop	{r4, r5, r6, pc}

08007e00 <__smakebuf_r>:
 8007e00:	898b      	ldrh	r3, [r1, #12]
 8007e02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e04:	079d      	lsls	r5, r3, #30
 8007e06:	4606      	mov	r6, r0
 8007e08:	460c      	mov	r4, r1
 8007e0a:	d507      	bpl.n	8007e1c <__smakebuf_r+0x1c>
 8007e0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e10:	6023      	str	r3, [r4, #0]
 8007e12:	6123      	str	r3, [r4, #16]
 8007e14:	2301      	movs	r3, #1
 8007e16:	6163      	str	r3, [r4, #20]
 8007e18:	b002      	add	sp, #8
 8007e1a:	bd70      	pop	{r4, r5, r6, pc}
 8007e1c:	ab01      	add	r3, sp, #4
 8007e1e:	466a      	mov	r2, sp
 8007e20:	f7ff ffca 	bl	8007db8 <__swhatbuf_r>
 8007e24:	9900      	ldr	r1, [sp, #0]
 8007e26:	4605      	mov	r5, r0
 8007e28:	4630      	mov	r0, r6
 8007e2a:	f7ff fa73 	bl	8007314 <_malloc_r>
 8007e2e:	b948      	cbnz	r0, 8007e44 <__smakebuf_r+0x44>
 8007e30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e34:	059a      	lsls	r2, r3, #22
 8007e36:	d4ef      	bmi.n	8007e18 <__smakebuf_r+0x18>
 8007e38:	f023 0303 	bic.w	r3, r3, #3
 8007e3c:	f043 0302 	orr.w	r3, r3, #2
 8007e40:	81a3      	strh	r3, [r4, #12]
 8007e42:	e7e3      	b.n	8007e0c <__smakebuf_r+0xc>
 8007e44:	4b0d      	ldr	r3, [pc, #52]	; (8007e7c <__smakebuf_r+0x7c>)
 8007e46:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e48:	89a3      	ldrh	r3, [r4, #12]
 8007e4a:	6020      	str	r0, [r4, #0]
 8007e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e50:	81a3      	strh	r3, [r4, #12]
 8007e52:	9b00      	ldr	r3, [sp, #0]
 8007e54:	6163      	str	r3, [r4, #20]
 8007e56:	9b01      	ldr	r3, [sp, #4]
 8007e58:	6120      	str	r0, [r4, #16]
 8007e5a:	b15b      	cbz	r3, 8007e74 <__smakebuf_r+0x74>
 8007e5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e60:	4630      	mov	r0, r6
 8007e62:	f000 f88d 	bl	8007f80 <_isatty_r>
 8007e66:	b128      	cbz	r0, 8007e74 <__smakebuf_r+0x74>
 8007e68:	89a3      	ldrh	r3, [r4, #12]
 8007e6a:	f023 0303 	bic.w	r3, r3, #3
 8007e6e:	f043 0301 	orr.w	r3, r3, #1
 8007e72:	81a3      	strh	r3, [r4, #12]
 8007e74:	89a0      	ldrh	r0, [r4, #12]
 8007e76:	4305      	orrs	r5, r0
 8007e78:	81a5      	strh	r5, [r4, #12]
 8007e7a:	e7cd      	b.n	8007e18 <__smakebuf_r+0x18>
 8007e7c:	0800716d 	.word	0x0800716d

08007e80 <__malloc_lock>:
 8007e80:	4801      	ldr	r0, [pc, #4]	; (8007e88 <__malloc_lock+0x8>)
 8007e82:	f7ff ba45 	b.w	8007310 <__retarget_lock_acquire_recursive>
 8007e86:	bf00      	nop
 8007e88:	20004638 	.word	0x20004638

08007e8c <__malloc_unlock>:
 8007e8c:	4801      	ldr	r0, [pc, #4]	; (8007e94 <__malloc_unlock+0x8>)
 8007e8e:	f7ff ba40 	b.w	8007312 <__retarget_lock_release_recursive>
 8007e92:	bf00      	nop
 8007e94:	20004638 	.word	0x20004638

08007e98 <_free_r>:
 8007e98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e9a:	2900      	cmp	r1, #0
 8007e9c:	d048      	beq.n	8007f30 <_free_r+0x98>
 8007e9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ea2:	9001      	str	r0, [sp, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f1a1 0404 	sub.w	r4, r1, #4
 8007eaa:	bfb8      	it	lt
 8007eac:	18e4      	addlt	r4, r4, r3
 8007eae:	f7ff ffe7 	bl	8007e80 <__malloc_lock>
 8007eb2:	4a20      	ldr	r2, [pc, #128]	; (8007f34 <_free_r+0x9c>)
 8007eb4:	9801      	ldr	r0, [sp, #4]
 8007eb6:	6813      	ldr	r3, [r2, #0]
 8007eb8:	4615      	mov	r5, r2
 8007eba:	b933      	cbnz	r3, 8007eca <_free_r+0x32>
 8007ebc:	6063      	str	r3, [r4, #4]
 8007ebe:	6014      	str	r4, [r2, #0]
 8007ec0:	b003      	add	sp, #12
 8007ec2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ec6:	f7ff bfe1 	b.w	8007e8c <__malloc_unlock>
 8007eca:	42a3      	cmp	r3, r4
 8007ecc:	d90b      	bls.n	8007ee6 <_free_r+0x4e>
 8007ece:	6821      	ldr	r1, [r4, #0]
 8007ed0:	1862      	adds	r2, r4, r1
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	bf04      	itt	eq
 8007ed6:	681a      	ldreq	r2, [r3, #0]
 8007ed8:	685b      	ldreq	r3, [r3, #4]
 8007eda:	6063      	str	r3, [r4, #4]
 8007edc:	bf04      	itt	eq
 8007ede:	1852      	addeq	r2, r2, r1
 8007ee0:	6022      	streq	r2, [r4, #0]
 8007ee2:	602c      	str	r4, [r5, #0]
 8007ee4:	e7ec      	b.n	8007ec0 <_free_r+0x28>
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	b10b      	cbz	r3, 8007ef0 <_free_r+0x58>
 8007eec:	42a3      	cmp	r3, r4
 8007eee:	d9fa      	bls.n	8007ee6 <_free_r+0x4e>
 8007ef0:	6811      	ldr	r1, [r2, #0]
 8007ef2:	1855      	adds	r5, r2, r1
 8007ef4:	42a5      	cmp	r5, r4
 8007ef6:	d10b      	bne.n	8007f10 <_free_r+0x78>
 8007ef8:	6824      	ldr	r4, [r4, #0]
 8007efa:	4421      	add	r1, r4
 8007efc:	1854      	adds	r4, r2, r1
 8007efe:	42a3      	cmp	r3, r4
 8007f00:	6011      	str	r1, [r2, #0]
 8007f02:	d1dd      	bne.n	8007ec0 <_free_r+0x28>
 8007f04:	681c      	ldr	r4, [r3, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	6053      	str	r3, [r2, #4]
 8007f0a:	4421      	add	r1, r4
 8007f0c:	6011      	str	r1, [r2, #0]
 8007f0e:	e7d7      	b.n	8007ec0 <_free_r+0x28>
 8007f10:	d902      	bls.n	8007f18 <_free_r+0x80>
 8007f12:	230c      	movs	r3, #12
 8007f14:	6003      	str	r3, [r0, #0]
 8007f16:	e7d3      	b.n	8007ec0 <_free_r+0x28>
 8007f18:	6825      	ldr	r5, [r4, #0]
 8007f1a:	1961      	adds	r1, r4, r5
 8007f1c:	428b      	cmp	r3, r1
 8007f1e:	bf04      	itt	eq
 8007f20:	6819      	ldreq	r1, [r3, #0]
 8007f22:	685b      	ldreq	r3, [r3, #4]
 8007f24:	6063      	str	r3, [r4, #4]
 8007f26:	bf04      	itt	eq
 8007f28:	1949      	addeq	r1, r1, r5
 8007f2a:	6021      	streq	r1, [r4, #0]
 8007f2c:	6054      	str	r4, [r2, #4]
 8007f2e:	e7c7      	b.n	8007ec0 <_free_r+0x28>
 8007f30:	b003      	add	sp, #12
 8007f32:	bd30      	pop	{r4, r5, pc}
 8007f34:	200002e4 	.word	0x200002e4

08007f38 <_read_r>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	4d07      	ldr	r5, [pc, #28]	; (8007f58 <_read_r+0x20>)
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	4608      	mov	r0, r1
 8007f40:	4611      	mov	r1, r2
 8007f42:	2200      	movs	r2, #0
 8007f44:	602a      	str	r2, [r5, #0]
 8007f46:	461a      	mov	r2, r3
 8007f48:	f7f9 fefc 	bl	8001d44 <_read>
 8007f4c:	1c43      	adds	r3, r0, #1
 8007f4e:	d102      	bne.n	8007f56 <_read_r+0x1e>
 8007f50:	682b      	ldr	r3, [r5, #0]
 8007f52:	b103      	cbz	r3, 8007f56 <_read_r+0x1e>
 8007f54:	6023      	str	r3, [r4, #0]
 8007f56:	bd38      	pop	{r3, r4, r5, pc}
 8007f58:	20004640 	.word	0x20004640

08007f5c <_fstat_r>:
 8007f5c:	b538      	push	{r3, r4, r5, lr}
 8007f5e:	4d07      	ldr	r5, [pc, #28]	; (8007f7c <_fstat_r+0x20>)
 8007f60:	2300      	movs	r3, #0
 8007f62:	4604      	mov	r4, r0
 8007f64:	4608      	mov	r0, r1
 8007f66:	4611      	mov	r1, r2
 8007f68:	602b      	str	r3, [r5, #0]
 8007f6a:	f7f9 ff30 	bl	8001dce <_fstat>
 8007f6e:	1c43      	adds	r3, r0, #1
 8007f70:	d102      	bne.n	8007f78 <_fstat_r+0x1c>
 8007f72:	682b      	ldr	r3, [r5, #0]
 8007f74:	b103      	cbz	r3, 8007f78 <_fstat_r+0x1c>
 8007f76:	6023      	str	r3, [r4, #0]
 8007f78:	bd38      	pop	{r3, r4, r5, pc}
 8007f7a:	bf00      	nop
 8007f7c:	20004640 	.word	0x20004640

08007f80 <_isatty_r>:
 8007f80:	b538      	push	{r3, r4, r5, lr}
 8007f82:	4d06      	ldr	r5, [pc, #24]	; (8007f9c <_isatty_r+0x1c>)
 8007f84:	2300      	movs	r3, #0
 8007f86:	4604      	mov	r4, r0
 8007f88:	4608      	mov	r0, r1
 8007f8a:	602b      	str	r3, [r5, #0]
 8007f8c:	f7f9 ff2f 	bl	8001dee <_isatty>
 8007f90:	1c43      	adds	r3, r0, #1
 8007f92:	d102      	bne.n	8007f9a <_isatty_r+0x1a>
 8007f94:	682b      	ldr	r3, [r5, #0]
 8007f96:	b103      	cbz	r3, 8007f9a <_isatty_r+0x1a>
 8007f98:	6023      	str	r3, [r4, #0]
 8007f9a:	bd38      	pop	{r3, r4, r5, pc}
 8007f9c:	20004640 	.word	0x20004640

08007fa0 <_init>:
 8007fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa2:	bf00      	nop
 8007fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fa6:	bc08      	pop	{r3}
 8007fa8:	469e      	mov	lr, r3
 8007faa:	4770      	bx	lr

08007fac <_fini>:
 8007fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fae:	bf00      	nop
 8007fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb2:	bc08      	pop	{r3}
 8007fb4:	469e      	mov	lr, r3
 8007fb6:	4770      	bx	lr
